if not game:IsLoaded() then
	game.Loaded:Wait()
end

TidalWaveLoadStartTime = tick()

CloneRef = cloneref or function(Obj) return Obj end

Players = CloneRef(game:GetService("Players"))
CoreGui = CloneRef(game:GetService("CoreGui"))
Lighting = CloneRef(game:GetService("Lighting"))
MaterialService = CloneRef(game:GetService("MaterialService"))
NetworkClient = CloneRef(game:GetService("NetworkClient"))
ReplicatedFirst = CloneRef(game:GetService("ReplicatedFirst"))
ReplicatedStorage = CloneRef(game:GetService("ReplicatedStorage"))
StarterGui = CloneRef(game:GetService("StarterGui"))
StarterPack = CloneRef(game:GetService("StarterPack"))
StarterPlayer = CloneRef(game:GetService("StarterPlayer"))
Teams = CloneRef(game:GetService("Teams"))
SoundService = CloneRef(game:GetService("SoundService"))
ChatService = CloneRef(game:GetService("Chat"))
TextChatService = CloneRef(game:GetService("TextChatService"))
VoiceChatService = CloneRef(game:GetService("VoiceChatService"))
TestService = CloneRef(game:GetService("TestService"))
VRService = CloneRef(game:GetService("VRService"))
AssetService = CloneRef(game:GetService("AssetService"))
CollectionService = CloneRef(game:GetService("CollectionService"))
ContentProvider = CloneRef(game:GetService("ContentProvider"))
ContextActionService = CloneRef(game:GetService("ContextActionService"))
Debris = CloneRef(game:GetService("Debris"))
FriendService = CloneRef(game:GetService("FriendService"))
GroupService = CloneRef(game:GetService("GroupService"))
GuiService = CloneRef(game:GetService("GuiService"))
HttpService = CloneRef(game:GetService("HttpService"))
InsertService = CloneRef(game:GetService("InsertService"))
PathfindingService = CloneRef(game:GetService("PathfindingService"))
ProximityPromptService = CloneRef(game:GetService("ProximityPromptService"))
RunService = CloneRef(game:GetService("RunService"))
TeleportService = CloneRef(game:GetService("TeleportService"))
TweenService = CloneRef(game:GetService("TweenService"))
UserInputService = CloneRef(game:GetService("UserInputService"))
AvatarEditorService = CloneRef(game:GetService("AvatarEditorService"))
VirtualUser = CloneRef(game:GetService("VirtualUser"))
VoiceChatInternal = CloneRef(game:GetService("VoiceChatInternal"))
UIS = UserInputService

CurrentVersion = "0.2.2"

Plr = Players.LocalPlayer
Mouse = Plr:GetMouse()
Camera = workspace.CurrentCamera

KeepTidalWave = false
AnimateWindows = true
HackListRGBText = true
NotifyOn = true
StopScript = false
TidalWaveFocused = false
AnimateCategories = true
KeepCMDBarOpen = false

SelectedCMD = nil
ProfileToAutoLoad = nil

MenuOpenSpeed = 0.2
CategoryCloseSpeed = 0.3

MenuEasingStyle = "Quad"
MenuOpenEasingDirection = "Out"
MenuCloseEasingDirection = "In"
TextFont = "Montserrat"
BoldFont = "MontserratBold"
MenuKeybind = "RightShift"
CMDBarKeybind = ""
SearchBarKeybind = ""

Connections = {
	Combat = {},
	Player = {},
	Movement = {},
	Skywars = {},
	["Chick-n-Coop"] = {},
	Visuals = {},
	World = {},
	Other = {},
	ServerInfo = {},
	TidalWave = {},
    Storage = {},
}
TidalWaveKeybinds = {}
GuiColors = {
	CategoryTopBar = Color3.fromRGB(20, 135, 255),
	CategoryBackground = Color3.fromRGB(25, 25, 25),
	Button = Color3.fromRGB(20, 20, 20),
	ButtonHover = Color3.fromRGB(40, 40, 40),
	Text = Color3.fromRGB(255, 255, 255),
	TextboxPlaceholder = Color3.fromRGB(178, 178, 178),
	TextboxBackground = Color3.fromRGB(25, 25, 25),
	EnabledIndicatorOff = Color3.fromRGB(0, 92, 162),
	EnabledIndicatorOn = Color3.fromRGB(0, 200, 255),
}
CMDS = {}
Aliases = {}
ToggleFunctions = {}
KeycodeMap = {
	["0"] = 0x30,
	["1"] = 0x31,
	["2"] = 0x32,
	["3"] = 0x33,
	["4"] = 0x34,
	["5"] = 0x35,
	["6"] = 0x36,
	["7"] = 0x37,
	["8"] = 0x38,
	["9"] = 0x39,
	["A"] = 0x41,
	["B"] = 0x42,
	["C"] = 0x43,
	["D"] = 0x44,
	["E"] = 0x45,
	["F"] = 0x46,
	["G"] = 0x47,
	["H"] = 0x48,
	["I"] = 0x49,
	["J"] = 0x4A,
	["K"] = 0x4B,
	["L"] = 0x4C,
	["M"] = 0x4D,
	["N"] = 0x4E,
	["O"] = 0x4F,
	["P"] = 0x50,
	["Q"] = 0x51,
	["R"] = 0x52,
	["S"] = 0x53,
	["T"] = 0x54,
	["U"] = 0x55,
	["V"] = 0x56,
	["W"] = 0x57,
	["X"] = 0x58,
	["Y"] = 0x59,
	["Z"] = 0x5A,
	["Enter"] = 0x0D,
	["Shift"] = 0x10,
	["Ctrl"] = 0x11,
	["Control"] = 0x11,
	["Alt"] = 0x12,
	["Pause"] = 0x13,
	["CapsLock"] = 0x14,
	["Spacebar"] = 0x20,
	["Space"] = 0x20,
	["PageUp"] = 0x21,
	["PageDown"] = 0x22,
	["End"] = 0x23,
	["Home"] = 0x24,
	["Left"] = 0x25,
	["Up"] = 0x26,
	["Right"] = 0x27,
	["Down"] = 0x28,
	["LeftArrow"] = 0x25,
	["UpArrow"] = 0x26,
	["RightArrow"] = 0x27,
	["DownArrow"] = 0x28,
	["Insert"] = 0x2D,
	["Delete"] = 0x2E,
	["F1"] = 0x70,
	["F2"] = 0x71,
	["F3"] = 0x72,
	["F4"] = 0x73,
	["F5"] = 0x74,
	["F6"] = 0x75,
	["F7"] = 0x76,
	["F8"] = 0x77,
	["F9"] = 0x78,
	["F10"] = 0x79,
	["F11"] = 0x7A,
	["F12"] = 0x7B,
}

-------------------------------------------------------------------------------- Combat Variables

HitboxExpanderTarget = "HumanoidRootPart"
GlobalAimbotTarget = "Head"
GlobalAimbotMethod = "CFrame"
PartAimbotMethod = "CFrame"

HitboxExpander = false
ToolHitboxExpander = false
ToolHitboxExpanderMassless = true

ToolHitboxExpanderSize = Vector3.new(2, 2, 2)
HitboxExpanderSize = Vector3.new(2, 2, 1)

GlobalAimbotMinDistance = 0
GlobalAimbotMaxDistance = 1000
HitboxExpanderTransparency = 1
ToolHitboxExpanderTransparency = 1

-------------------------------------------------------------------------------- Player Variables

SlowDropTools = false
DropToolsInterval = 30
BangEnabled = false
Jerking = false
AnimPlaying = false
Dancing = false

-------------------------------------------------------------------------------- Movement Variables

WalkSpeed = 16
JumpPower = 50
Gravity = 196.2
AimAssistStrength = 0
FlySpeed = 50
LoopTeleportSpeed = 0.1
FloatPartTransparency = 1
CFrameFlySpeed = 50
GotoCameraTweenTime = 1
SpiderHackSpeed = 50
PulseTeleportTime = 0.5
OrbitSpeed = 0.2
OrbitDistance = 6
MaxSlopeAngle = 89
TeleportTweenTime = 0
SpinSpeed = 10
SpiderHackRadius = 3
TpWalkSpeedPercentage = 10

SpeedHackMethod = "WalkSpeed"
PartAimbotMode = "Model"
PartAimbotTarget = "Head"
ClickTeleportSound = "rbxassetid://5066021887"
FlyMethod = "BodyVelocity"

SpeedHack = false
JumpPowerEnabled = false
GravityEnabled = false
Noclip = false
InfiniteJump = false
JumpWhileTyping = false
TpWalkUsePercentage = false
Fly = false
Float = false
AntiRagdoll = false
CFrameFly = false
Swimming = false
GlobalAimbot = false
GlobalAimbotWallCheck = true
GlobalAimbotTeamCheck = true
TweenGotoCameraEnabled = false
PartAimbotWallCheck = true
PartAimbot = false
SpiderHack = false
UseFlyAlignOrientation = true
FlyFling = false
FollowPlayer = false
PathfindFollowPlayer = false
TeleportEnabled = false
OrbitEnabled = false
OrbitLookAt = false
LoopMaxSlopeAngle = false
FlyJump = false
WalkToPosEnabled = false
PathfindWalkToPosEnabled = false
Spasm = false
Spin = false
StareAt = false
ClickTeleportSoundEnabled = false
OnlyWhenSpeedLowered = false
DisableState = false
HeadSit = false
Carpet = false
TpFlyUsePercentage = false

PartAimbotFolder = nil
PlayerToFollow = nil
PlayerToOrbit = nil
PlayerToStareAt = nil
PlayerToTeleportTo = nil
PlayerToLoopTeleportTo = nil

PartAimbotSize = Vector2.new(0.1, 0.1)
GlobalAimbotSize = Vector2.new(0.1, 0.1)

StatesDisabled = {}

-------------------------------------------------------------------------------- VISUAL VARIABLES

PlayerTracersPosition = Vector2.new(Camera.ViewportSize.X * 0.5, Camera.ViewportSize.Y)
PlayerTracersTeammateColor = Color3.fromRGB(0, 255, 0)
PlayerTracersEnemyColor = Color3.fromRGB(255, 0, 0)
PlayerDrawingEspTeammateColor = Color3.fromRGB(0, 255, 0)
PlayerDrawingEspEnemyColor = Color3.fromRGB(255, 0, 0)
PlayerDrawingEspSize = Vector2.new(1000, 0)
EspTeammateTextColor = Color3.fromRGB(0, 255, 0)
EspEnemyTextColor = Color3.fromRGB(255, 0, 0)
PlayerHighlightEspTeammateOutlineColor = Color3.fromRGB(0, 255, 0)
PlayerHighlightEspTeammateFillColor = Color3.fromRGB(0, 255, 0)
PlayerHighlightEspEnemyOutlineColor = Color3.fromRGB(255, 0, 0)
PlayerHighlightEspEnemyFillColor = Color3.fromRGB(255, 0, 0)
PartEspOutlineColor = Color3.fromRGB(255, 0, 0)
PartEspFillColor = Color3.fromRGB(255, 255, 255)
ColorShiftTop = Color3.fromRGB(255, 255, 255)
ColorShiftBottom = Color3.fromRGB(255, 255, 255)
OutdoorAmbient = Color3.fromRGB(255, 255, 255)
Ambient = Color3.fromRGB(255, 255, 255)

NoShadows = false
NoFog = false
NoDepthOfField = false
NoAtmosphere = false
NoBloom = false
NoBlur = false
NoColorCorrection = false
NoSunRays = false
NoSky = false
NoColorGrading = false
ForceTimeOfDayEnabled = false
BrightnessEnabled = false
LoopTeleportEnabled = false
ClickTeleportEnabled = false
PulseTeleport = false
HealthESP = false
NameESP = false
DistanceESP = false
WalkSpeedESP = false
JumpPowerESP = false
PlayerHighlightESP = false
AutomaticEspTextColor = false
AutomaticPlayerHighlightEspOutlineColor = false
AutomaticPlayerHighlightEspFillColor = false
NoRender = false
Material2022 = false
PartESP = false
FreezeAnimations = false
PlayerDrawingEspFilled = false
PlayerDrawingESP = false
AutomaticPlayerDrawingEspColor = false
PlayerTracers = false
AutomaticPlayerTracersColor = false
Xray = false
WaterTransparencyEnabled = false
GeographicLatitudeEnabled = false
ColorShiftBottomEnabled = false
ColorShiftTopEnabled = false
OutdoorAmbientEnabled = false
AmbientEnabled = false
EnvironmentDiffuseScaleEnabled = false
EnvironmentSpecularScaleEnabled = false
ShadowSoftnessEnabled = false
ExposureCompensationEnabled = false

PartEspPath = nil
PartEspName = nil

Brightness = 3
ForceTimeOfDay = 12
PlayerEspTextSize = 10
PlayerHighlightEspFillTransparency = 1
PlayerHighlightEspOutlineTransparency = 0
PartEspFillTransparency = 1
PartEspOutlineTransparency = 0
TeleportSpeed = 0
WaterTransparency = 0.5
PlayerDrawingEspThickness = 1
PlayerTracersThickness = 1
GeographicLatitude = 0
EnvironmentDiffuseScale = 1
EnvironmentSpecularScale = 1
ShadowSoftness = 0.5
ExposureCompensation = 0

PartEspMode = "Folder"
PartEspHighlightMode = "Highlight"
TeleportEasingStyle = "Linear"
TeleportEasingDirection = "Out"

-------------------------------------------------------------------------------- OTHER VARIABLES

ViewingPlayer = false
NotificationDebounce = false
ShowGuis = false
HideGuis = false
GuiDelete = false
ViewPart = false
FreecamEnabled = false
LoopFovEnabled = false
FirstPerson = false
ThirdPerson = false
NoclipCamera = false
LoopCameraZoom = false
UnLockWorkspace = false
NoPurchasePrompts = false
InvisPartsEnabled = false
WalkFling = false
StaffDetector = false
ClickPartToSelect = false
ForceEnableShiftLock = false
VehicleNoclip = false
LoopClientBring = false
ClientBringEnabled = false
LoopHipHeight = false
LoopSit = false
LoopNoSit = false
ClickDelete = false
ClickDeleteIgnorePlayer = true
Strengthen = false
VehicleNoclip = false
InstantProximityPrompts = false
AntiFling = false
AntiVoid = false
HeadThrow = false
SpoofFunctionCheckCaller = true
SpoofCheckCaller = true

InstanceToSpoof = nil
SpoofValue = nil
PlayerToFreeze = nil
Rebinding = nil
PosToWalkTo = nil
SpoofFunctionValue = nil
SpoofFunctionSelf = nil

ValueToSpoof = ""
SpoofFunctionMethod = ""
SpoofFunctionSelfToReturn = "self"

Fov = 70
MinZoom = 0
MaxZoom = 400
StrengthenDensity = 0.7
HipHeight = 2

Connections.Storage.ShownParts = {}
Connections.Storage.SpoofFunctionArgs = {}

--------------------------------------------------------------------------------

QueueOnTeleport = (syn and syn.queue_on_teleport) or queue_on_teleport or (fluxus and fluxus.queue_on_teleport) or queueonteleport
HttpRequest = (syn and syn.request) or (http and http.request) or http_request or (fluxus and fluxus.request) or request or httprequest
SetHidden = sethiddenproperty or set_hidden_property or set_hidden_prop
GetHidden = gethiddenproperty or get_hidden_property or get_hidden_prop
SaveInstance = saveinstance
Hookmetamethod = hookmetamethod
HookFunction = hookfunction
GetNameCallMethod = getnamecallmethod
SetFPSCap = setfpscap or fpscap
SetConstant = (debug and debug.setconstant) or setconstant
GetConstants = (debug and debug.getconstants) or getconstants
Getgc = getgc or getgarbagecollection
GetConnections = getconnections or get_signal_cons
ReadFile = readfile
WriteFile = writefile
AppendFile = appendfile
LoadFile = loadfile
ListFiles = listfiles
IsFile = isfile
IsFolder = isfolder
MakeFolder = makefolder
DeleteFolder = deletefolder
DeleteFile = deletefile
ClipboardFunc = setclipboard or toclipboard or set_clipboard or (Clipboard and Clipboard.set)
GetHui = get_hidden_gui or gethui
Drawing = Drawing
GetCustomAsset = getcustomasset
MouseMoveRel = mousemoverel
Mouse1Down = mouse1down
Mouse1Up = mouse1up
Mouse1Click = mouse1click
NewCClosure = newcclosure or function(f) return f end
CheckCaller = checkcaller
GetCallingScript = getcallingscript
FireProximityPrompt = fireproximityprompt
FireClickDetector = fireclickdetector
IdentifyExecutor = identifyexecutor
function FireTouchInterest(Part, OtherPart, Bool)
    if typeof(Part) ~= "Instance" then return firetouchinterest end
    if typeof(OtherPart) ~= "Instance" then return firetouchinterest end
	if Part:IsA("BasePart") and OtherPart:IsA("BasePart") and firetouchinterest then
		if Bool == true then
            firetouchinterest(Part, OtherPart, 0)
        elseif Bool == false then
            firetouchinterest(Part, OtherPart, 1)
        elseif Bool == 1 then
            firetouchinterest(Part, OtherPart, 0)
        elseif Bool == 0 then
            firetouchinterest(Part, OtherPart, 1)
        end
	end
    return firetouchinterest
end

TidalWaveScreenGui = Instance.new("ScreenGui")
TidalWaveScreenGui.Name = "Tidal Wave v" .. CurrentVersion
TidalWaveScreenGui.IgnoreGuiInset = true
TidalWaveScreenGui.DisplayOrder = 69420
TidalWaveScreenGui.Parent = RunService:IsStudio() and Plr:FindFirstChildWhichIsA("PlayerGui") or GetHui and GetHui() or (not is_sirhurt_closure and syn and syn.protect_gui and syn.protect_gui(TidalWaveScreenGui)) or CoreGui:FindFirstChild("RobloxGui") or CoreGui or Plr:FindFirstChildWhichIsA("PlayerGui")

FramesFolder = Instance.new("Folder")
FramesFolder.Name = "Frames"
FramesFolder.Parent = TidalWaveScreenGui

CategoryHolderFrame = Instance.new("Frame")
CategoryHolderFrame.Name = "Categories"
CategoryHolderFrame.BackgroundTransparency = 1
CategoryHolderFrame.Position = UDim2.fromOffset(0, 60)
CategoryHolderFrame.Size = UDim2.fromScale(1, 1)
CategoryHolderFrame.Parent = TidalWaveScreenGui

TidalWaveUIScale = Instance.new("UIScale")
TidalWaveUIScale.Scale = 1
TidalWaveUIScale.Parent = CategoryHolderFrame

SoundsFolder = Instance.new("Folder")
SoundsFolder.Name = "Sounds"
SoundsFolder.Parent = TidalWaveScreenGui

EspFolder = Instance.new("Folder")
EspFolder.Name = "Esp"
EspFolder.Parent = TidalWaveScreenGui

DrawingFolder = Instance.new("Folder")
DrawingFolder.Name = "Drawing"
DrawingFolder.Parent = TidalWaveScreenGui

StorageFolder = Instance.new("Folder")
StorageFolder.Name = "Storage"
StorageFolder.Parent = TidalWaveScreenGui

HoverInfoFrame = Instance.new("Frame")
HoverInfoFrame.Name = "HoverInfoFrame"
HoverInfoFrame.Size = UDim2.fromScale(0.25, 0.05)
HoverInfoFrame.ZIndex = 69
HoverInfoFrame.BorderSizePixel = 0
HoverInfoFrame.Visible = false
HoverInfoFrame.BackgroundColor3 = Color3.fromRGB(15, 15, 15)
HoverInfoFrame.BackgroundTransparency = 0.08
HoverInfoFrame.Interactable = false
HoverInfoFrame.Parent = FramesFolder

HoverInfoFrameUICorner = Instance.new("UICorner")
HoverInfoFrameUICorner.CornerRadius = UDim.new(0.25, 0)
HoverInfoFrameUICorner.Parent = HoverInfoFrame

HoverInfo = Instance.new("TextLabel")
HoverInfo.TextColor3 = Color3.fromRGB(255, 255, 255)
HoverInfo.BorderSizePixel = 0
HoverInfo.Size = UDim2.fromScale(1, 0.75)
HoverInfo.Position = UDim2.fromScale(0, 0.125)
HoverInfo.Text = ""
HoverInfo.Font = TextFont
HoverInfo.Name = "HoverInfo"
HoverInfo.AutomaticSize = Enum.AutomaticSize.XY
HoverInfo.ZIndex = HoverInfoFrame.ZIndex
HoverInfo.BackgroundTransparency = 1
HoverInfo.TextScaled = true
HoverInfo.Interactable = false
HoverInfo.Parent = HoverInfoFrame

HoverInfoTextSizeConstraint = Instance.new("UITextSizeConstraint")
HoverInfoTextSizeConstraint.MinTextSize = 1
HoverInfoTextSizeConstraint.MaxTextSize = 10
HoverInfoTextSizeConstraint.Parent = HoverInfo

HackListFrame = Instance.new("Frame")
HackListFrame.Name = "HackListFrame"
HackListFrame.Position = UDim2.fromScale(0.875, 0.05)
HackListFrame.Size = UDim2.fromScale(0.1, 0.9)
HackListFrame.BorderSizePixel = 0
HackListFrame.BackgroundTransparency = 1
HackListFrame.ClipsDescendants = true
HackListFrame.Parent = FramesFolder

HackListTitleFrame = Instance.new("Frame")
HackListTitleFrame.Size = UDim2.fromScale(1, 0.05)
HackListTitleFrame.Name = "HackListTitleFrame"
HackListTitleFrame.BackgroundTransparency = 1
HackListTitleFrame.LayoutOrder = -69420
HackListTitleFrame.Parent = HackListFrame

HackListTitle = Instance.new("TextLabel")
HackListTitle.Name = "HackListTitle"
HackListTitle.BackgroundTransparency = 1
HackListTitle.Size = UDim2.fromScale(1, 0.5)
HackListTitle.Position = UDim2.fromScale(0, 0.25)
HackListTitle.TextColor3 = Color3.fromRGB(255, 255, 255)
HackListTitle.Font = BoldFont or TextFont
HackListTitle.RichText = true
HackListTitle.Text = "<font color = 'rgb(255, 215, 0)'>Tidal</font> <font color = 'rgb(20, 135, 255)'>Wave</font> v" .. CurrentVersion
HackListTitle.TextScaled = true
HackListTitle.Parent = HackListTitleFrame

NotificationFrame = Instance.new("Frame")
NotificationFrame.Name = "Notifications"
NotificationFrame.Position = UDim2.fromScale(0.85, 0)
NotificationFrame.Size = UDim2.fromScale(0.15, 1)
NotificationFrame.BorderSizePixel = 0
NotificationFrame.BackgroundTransparency = 1
NotificationFrame.Parent = FramesFolder

function CreateMenu(Properties)
    local TopBar = Instance.new("TextButton")
    TopBar.BackgroundColor3 = Color3.fromRGB(20, 135, 255)
    TopBar.Size = UDim2.fromScale(0.4, 0.05)
    TopBar.Position = UDim2.fromScale(0.3, 0.2)
    TopBar.Name = Properties.Text .. "TopBar"
    TopBar.Text = Properties.Text or ""
    TopBar.TextColor3 = Color3.fromRGB(255, 255, 255)
    TopBar.Visible = Properties.Visible or false
    TopBar.BorderSizePixel = 0
    TopBar.ZIndex = Properties.ZIndex or 3
    TopBar.Font = Enum.Font:FromName(BoldFont) or Enum.Font:FromName(TextFont)
    TopBar.TextScaled = true
    TopBar.TextStrokeTransparency = 0
    TopBar.AutoButtonColor = false
    TopBar.Modal = true
    TopBar.Parent = Properties.Parent or FramesFolder

    local TopBarUICorner = Instance.new("UICorner")
    TopBarUICorner.CornerRadius = UDim.new(0.4, 0)
    TopBarUICorner.Parent = TopBar

    local TopBarFiller = Instance.new("Frame")
    TopBarFiller.BorderSizePixel = 0
    TopBarFiller.BackgroundColor3 = TopBar.BackgroundColor3
    TopBarFiller.Size = UDim2.fromScale(1, 0.5)
    TopBarFiller.Position = UDim2.fromScale(0, 0.5)
    TopBarFiller.Name = "Filler"
    TopBarFiller.ZIndex = TopBar.ZIndex - 1
    TopBarFiller.Parent = TopBar

    local ContentFrame = Instance.new("Frame")
    ContentFrame.BackgroundColor3 = Color3.fromRGB(25, 25, 25)
    ContentFrame.BorderSizePixel = 0
    ContentFrame.Size = UDim2.fromScale(1, 13)
    ContentFrame.Position = UDim2.fromScale(0, 0)
    ContentFrame.Name = "ContentFrame"
    ContentFrame.ZIndex = TopBar.ZIndex - 2
    ContentFrame.Parent = TopBar

    local ContentFrameUICorner = Instance.new("UICorner")
    ContentFrameUICorner.CornerRadius = UDim.new(0.05, 0)
    ContentFrameUICorner.Parent = ContentFrame

    local ContentScrollingFrame = Instance.new("ScrollingFrame")
    ContentScrollingFrame.Size = UDim2.fromScale(1, 0.88)
    ContentScrollingFrame.Position = UDim2.fromScale(0, 0.08)
    ContentScrollingFrame.CanvasSize = UDim2.fromScale(1, 2)
    ContentScrollingFrame.BackgroundTransparency = 1
    ContentScrollingFrame.BorderSizePixel = 0
    ContentScrollingFrame.ScrollBarThickness = 6
    ContentScrollingFrame.AutomaticCanvasSize = Enum.AutomaticSize.Y
    ContentScrollingFrame.ScrollingDirection = Enum.ScrollingDirection.Y
    ContentScrollingFrame.ZIndex = ContentFrame.ZIndex
    ContentScrollingFrame.Parent = ContentFrame

    local ContentScrollingFrameUIListLayout = Instance.new("UIListLayout")
    ContentScrollingFrameUIListLayout.FillDirection = Enum.FillDirection.Horizontal
    ContentScrollingFrameUIListLayout.HorizontalAlignment = Enum.HorizontalAlignment.Center
    ContentScrollingFrameUIListLayout.Wraps = true
    ContentScrollingFrameUIListLayout.Padding = UDim.new(0, 3)
    ContentScrollingFrameUIListLayout.SortOrder = Enum.SortOrder.LayoutOrder
    ContentScrollingFrameUIListLayout.Parent = ContentScrollingFrame

    local CloseMenu = Instance.new("TextButton")
    CloseMenu.BackgroundTransparency = 1
    CloseMenu.Size = UDim2.fromScale(0.05, 1)
    CloseMenu.Position = UDim2.fromScale(0.95, 0)
    CloseMenu.Text = "X"
    CloseMenu.Font = Enum.Font.FredokaOne
    CloseMenu.TextColor3 = Color3.fromRGB(255, 255, 255)
    CloseMenu.ZIndex = TopBar.ZIndex
    CloseMenu.TextScaled = true
    CloseMenu.Name = "Close"
    CloseMenu.Parent = TopBar
    CloseMenu.MouseButton1Click:Connect(function()
        TopBar.Visible = false
        if Properties.OnClose then
            Properties.OnClose()
        elseif Properties.Closed then
            Properties.Closed()
        end
    end)

    local CloseMenuInfoUIStroke = Instance.new("UIStroke")
    CloseMenuInfoUIStroke.Parent = CloseMenu

    local Refs = {
        TopBar = TopBar,
        MainFrame = TopBar,
        TopBarUICorner = TopBarUICorner,
        UICorner = TopBarUICorner,
        TopBarFiller = TopBarFiller,
        Filler = TopBarFiller,
        ContentFrame = ContentFrame,
        Frame = ContentFrame,
        ContentScrollingFrame = ContentScrollingFrame,
        ScrollingFrame = ContentScrollingFrame,
        ContentScrollingFrameUIListLayout = ContentScrollingFrameUIListLayout,
        UIListLayout = ContentScrollingFrameUIListLayout,
        CloseMenu = CloseMenu,
        Exit = CloseMenu,
    }

    return Refs
end

ServerInfoTopBar = Instance.new("TextButton")
ServerInfoTopBar.BackgroundColor3 = Color3.fromRGB(20, 135, 255)
ServerInfoTopBar.Size = UDim2.fromScale(0.4, 0.05)
ServerInfoTopBar.Position = UDim2.fromScale(0.3, 0.2)
ServerInfoTopBar.Name = "ServerInfoTopBar"
ServerInfoTopBar.Text = ""
ServerInfoTopBar.Visible = false
ServerInfoTopBar.BorderSizePixel = 0
ServerInfoTopBar.ZIndex = 2
ServerInfoTopBar.Parent = FramesFolder

ServerInfoTopBarFiller = Instance.new("Frame")
ServerInfoTopBarFiller.BorderSizePixel = 0
ServerInfoTopBarFiller.BackgroundColor3 = ServerInfoTopBar.BackgroundColor3
ServerInfoTopBarFiller.Size = UDim2.fromScale(1, 0.5)
ServerInfoTopBarFiller.Position = UDim2.fromScale(0, 0.5)
ServerInfoTopBarFiller.Name = "Filler"
ServerInfoTopBarFiller.ZIndex = 2
ServerInfoTopBarFiller.Parent = ServerInfoTopBar

ServerInfoTopBarUICorner = Instance.new("UICorner")
ServerInfoTopBarUICorner.CornerRadius = UDim.new(0.4, 0)
ServerInfoTopBarUICorner.Parent = ServerInfoTopBar

ServerInfoUIDragDetector = Instance.new("UIDragDetector")
ServerInfoUIDragDetector.Parent = ServerInfoTopBar

ServerInfoFrame = Instance.new("Frame")
ServerInfoFrame.BackgroundColor3 = Color3.fromRGB(25, 25, 25)
ServerInfoFrame.BorderSizePixel = 0
ServerInfoFrame.Size = UDim2.fromScale(1, 10)
ServerInfoFrame.Position = UDim2.fromScale(0, 0)
ServerInfoFrame.Name = "ServerInfoFrame"
ServerInfoFrame.Parent = ServerInfoTopBar

ServerInfoFrameUICorner = Instance.new("UICorner")
ServerInfoFrameUICorner.CornerRadius = UDim.new(0.05, 0)
ServerInfoFrameUICorner.Parent = ServerInfoFrame

ServerInfoScrollingFrame = Instance.new("ScrollingFrame")
ServerInfoScrollingFrame.Size = UDim2.fromScale(1, 0.875)
ServerInfoScrollingFrame.CanvasSize = UDim2.fromScale(1, 2.25)
ServerInfoScrollingFrame.Position = UDim2.fromScale(0, 0.1)
ServerInfoScrollingFrame.BackgroundTransparency = 1
ServerInfoScrollingFrame.BorderSizePixel = 0
ServerInfoScrollingFrame.ScrollBarThickness = 6
ServerInfoScrollingFrame.AutomaticCanvasSize = Enum.AutomaticSize.Y
ServerInfoScrollingFrame.ScrollingDirection = Enum.ScrollingDirection.Y
ServerInfoScrollingFrame.Parent = ServerInfoFrame

ServerInfoScrollingFrameUIPadding = Instance.new("UIPadding")
ServerInfoScrollingFrameUIPadding.PaddingTop = UDim.new(0.01, 0)
ServerInfoScrollingFrameUIPadding.Parent = ServerInfoScrollingFrame

ServerInfoServerMainFrame = Instance.new("Frame")
ServerInfoServerMainFrame.BackgroundColor3 = Color3.fromRGB(18, 18, 18)
ServerInfoServerMainFrame.BorderSizePixel = 0
ServerInfoServerMainFrame.Name = "MainServerFrame"
ServerInfoServerMainFrame.Size = UDim2.fromScale(0.95, 1)
ServerInfoServerMainFrame.Parent = ServerInfoScrollingFrame

ServerInfoServerFrameUICorner = Instance.new("UICorner")
ServerInfoServerFrameUICorner.CornerRadius = UDim.new(0.05, 0)
ServerInfoServerFrameUICorner.Parent = ServerInfoServerMainFrame

ServerInfoServerFrame = Instance.new("Frame")
ServerInfoServerFrame.BackgroundTransparency = 1
ServerInfoServerFrame.BorderSizePixel = 0
ServerInfoServerFrame.Name = "ServerFrame"
ServerInfoServerFrame.LayoutOrder = 0
ServerInfoServerFrame.Size = UDim2.fromScale(1, 0.85)
ServerInfoServerFrame.Position = UDim2.fromScale(0, 0.15)
ServerInfoServerFrame.Parent = ServerInfoServerMainFrame

ServerInfoServerTextLabelFrame = Instance.new("Frame")
ServerInfoServerTextLabelFrame.BackgroundTransparency = 1
ServerInfoServerTextLabelFrame.Position = UDim2.fromScale(0.05, 0.0125)
ServerInfoServerTextLabelFrame.Size = UDim2.fromScale(0.9, 0.125)
ServerInfoServerTextLabelFrame.Name = "ServerInfoServerTextLabelFrame"
ServerInfoServerTextLabelFrame.Parent = ServerInfoServerMainFrame

ServerInfoServerTextLabel = Instance.new("TextLabel")
ServerInfoServerTextLabel.Position = UDim2.fromScale(0.05, 0.125)
ServerInfoServerTextLabel.Size = UDim2.fromScale(0.9, 0.75)
ServerInfoServerTextLabel.Name = "ServerInfoServerTextLabel"
ServerInfoServerTextLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
ServerInfoServerTextLabel.Font = BoldFont
ServerInfoServerTextLabel.BackgroundTransparency = 1
ServerInfoServerTextLabel.Text = "Server"
ServerInfoServerTextLabel.TextScaled = true
ServerInfoServerTextLabel.Parent = ServerInfoServerTextLabelFrame

ServerInfoServerFrameUIGridLayout = Instance.new("UIGridLayout")
ServerInfoServerFrameUIGridLayout.HorizontalAlignment = Enum.HorizontalAlignment.Center
ServerInfoServerFrameUIGridLayout.CellSize = UDim2.fromScale(0.45, 0.075)
ServerInfoServerFrameUIGridLayout.Parent = ServerInfoServerFrame

ServerInfoClientMainFrame = Instance.new("Frame")
ServerInfoClientMainFrame.BackgroundColor3 = Color3.fromRGB(18, 18, 18)
ServerInfoClientMainFrame.BorderSizePixel = 0
ServerInfoClientMainFrame.Name = "MainServerFrame"
ServerInfoClientMainFrame.Size = UDim2.fromScale(0.95, 1.5)
ServerInfoClientMainFrame.Parent = ServerInfoScrollingFrame

ServerInfoClientFrameUICorner = Instance.new("UICorner")
ServerInfoClientFrameUICorner.CornerRadius = UDim.new(0.05, 0)
ServerInfoClientFrameUICorner.Parent = ServerInfoClientMainFrame

ServerInfoClientFrame = Instance.new("Frame")
ServerInfoClientFrame.BackgroundTransparency = 1
ServerInfoClientFrame.BorderSizePixel = 0
ServerInfoClientFrame.Name = "Server"
ServerInfoClientFrame.LayoutOrder = 1
ServerInfoClientFrame.Size = UDim2.fromScale(1, 0.85)
ServerInfoClientFrame.Position = UDim2.fromScale(0, 0.1)
ServerInfoClientFrame.Parent = ServerInfoClientMainFrame

ServerInfoClientTextLabelFrame = Instance.new("Frame")
ServerInfoClientTextLabelFrame.BackgroundTransparency = 1
ServerInfoClientTextLabelFrame.Position = UDim2.fromScale(0.05, 0.0125)
ServerInfoClientTextLabelFrame.Size = UDim2.fromScale(0.9, 0.083)
ServerInfoClientTextLabelFrame.Name = "ServerInfoClientTextLabelFrame"
ServerInfoClientTextLabelFrame.Parent = ServerInfoClientMainFrame

ServerInfoClientTextLabel = Instance.new("TextLabel")
ServerInfoClientTextLabel.BackgroundColor3 = Color3.fromRGB(20, 20, 20)
ServerInfoClientTextLabel.BorderSizePixel = 0
ServerInfoClientTextLabel.Position = UDim2.fromScale(0.05, 0.125)
ServerInfoClientTextLabel.Size = UDim2.fromScale(0.9, 0.75)
ServerInfoClientTextLabel.Name = "ServerInfClientTextLabel"
ServerInfoClientTextLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
ServerInfoClientTextLabel.Font = BoldFont
ServerInfoClientTextLabel.BackgroundTransparency = 1
ServerInfoClientTextLabel.Text = "Client"
ServerInfoClientTextLabel.TextScaled = true
ServerInfoClientTextLabel.Parent = ServerInfoClientTextLabelFrame

ServerInfoClientTextLabelUICorner = Instance.new("UICorner")
ServerInfoClientTextLabelUICorner.CornerRadius = UDim.new(0.25, 0)
ServerInfoClientTextLabelUICorner.Parent = ServerInfoClientTextLabel

ServerInfoClientFrameUIGridLayout = Instance.new("UIGridLayout")
ServerInfoClientFrameUIGridLayout.HorizontalAlignment = Enum.HorizontalAlignment.Center
ServerInfoClientFrameUIGridLayout.CellSize = UDim2.fromScale(0.45, 0.05)
ServerInfoClientFrameUIGridLayout.Parent = ServerInfoClientFrame

ServerInfoFrameUiGridLayout = Instance.new("UIListLayout")
ServerInfoFrameUiGridLayout.Padding = UDim.new(0.05, 0)
ServerInfoFrameUiGridLayout.HorizontalAlignment = Enum.HorizontalAlignment.Center
ServerInfoFrameUiGridLayout.Name = "ServerInfoFrameUiGridLayout"
ServerInfoFrameUiGridLayout.Parent = ServerInfoScrollingFrame

CloseServerInfo = Instance.new("TextButton")
CloseServerInfo.BackgroundTransparency = 1
CloseServerInfo.Size = UDim2.fromScale(0.05, 1)
CloseServerInfo.Position = UDim2.fromScale(0.95, 0)
CloseServerInfo.Text = "X"
CloseServerInfo.Font = Enum.Font.FredokaOne
CloseServerInfo.TextColor3 = Color3.fromRGB(255, 255, 255)
CloseServerInfo.ZIndex = 2
CloseServerInfo.TextScaled = true
CloseServerInfo.Name = "Close"
CloseServerInfo.Parent = ServerInfoTopBar
CloseServerInfo.MouseButton1Click:Connect(function()
	ServerInfoTopBar.Visible = false
	ToggleButtonColor(ToggleServerInfo, false)
end)

CloseServerInfoUIStroke = Instance.new("UIStroke")
CloseServerInfoUIStroke.Parent = CloseServerInfo

ServerInfoSearch = Instance.new("TextBox")
ServerInfoSearch.Text = ""
ServerInfoSearch.PlaceholderText = "Search"
ServerInfoSearch.TextColor3 = Color3.fromRGB(255, 255, 255)
ServerInfoSearch.BackgroundColor3 = Color3.fromRGB(15, 15, 15)
ServerInfoSearch.BackgroundTransparency = 0.4
ServerInfoSearch.Size = UDim2.fromScale(0.5, 0.075)
ServerInfoSearch.Position = UDim2.fromScale(0.25, 0.0125)
ServerInfoSearch.BorderSizePixel = 0
ServerInfoSearch.ZIndex = 2
ServerInfoSearch.TextScaled = true
ServerInfoSearch.Name = "Search"
ServerInfoSearch.Parent = ServerInfoFrame
ServerInfoSearch.Focused:Connect(function()
	TidalWaveFocused = true
end)
ServerInfoSearch.FocusLost:Connect(function()
	TidalWaveFocused = false
end)

ServerInfoSearchUICorner = Instance.new("UICorner")
ServerInfoSearchUICorner.CornerRadius = UDim.new(0.25, 0)
ServerInfoSearchUICorner.Parent = ServerInfoSearch

ServerInfoSearch:GetPropertyChangedSignal("Text"):Connect(function()
	ServerInfoServerFrame.Visible = false
	for i, v in pairs(ServerInfoServerFrame:GetChildren()) do
		if v:IsA("UIGridLayout") then continue end
		if v:IsA("UIListLayout") then continue end
		if ServerInfoSearch.Text == "" then
			v.Visible = true
		else
			if string.find(string.lower(v.Name), string.lower(ServerInfoSearch.Text)) or string.find(string.lower(v.Button.Text), string.lower(ServerInfoSearch.Text)) then
				v.Visible = true
			else
				v.Visible = false
			end
		end
		if v.Visible then
			ServerInfoServerFrame.Visible = true
		end
	end
	for i, v in pairs(ServerInfoClientFrame:GetChildren()) do
		if v:IsA("UIGridLayout") then continue end
		if v:IsA("UIListLayout") then continue end
		if ServerInfoSearch.Text == "" then
			v.Visible = true
		else
			if string.find(string.lower(v.Name), string.lower(ServerInfoSearch.Text)) or string.find(string.lower(v.Button.Text), string.lower(ServerInfoSearch.Text)) then
				v.Visible = true
			else
				v.Visible = false
			end
		end
		if v.Visible then
			ServerInfoClientFrame.Visible = true
		end
	end
end)

ProfileMenu = CreateMenu({
    Text = "Profiles",
})

SettingsMenu = CreateMenu({
    Text = "Settings",
})

------------------------------------------------------------------------------------------- Functions

function ShowHoverInfo(Text)
    if Text == nil then return end
    Text = tostring(Text)
    HoverInfo.Text = Text
	HoverInfoFrame.Position = UDim2.fromOffset(Mouse.X + 7, Mouse.Y + GuiService:GetGuiInset().Y - HoverInfoFrame.AbsoluteSize.Y)
	HoverInfoFrame.Visible = true
	if Connections.Other.HoverInfoMouseMove then
		Connections.Other.HoverInfoMouseMove:Disconnect()
		Connections.Other.HoverInfoMouseMove = nil
	end
	Connections.Other.HoverInfoMouseMove = Mouse.Move:Connect(function()
		HoverInfoFrame.Position = UDim2.fromOffset(Mouse.X + 7, Mouse.Y + GuiService:GetGuiInset().Y - HoverInfoFrame.AbsoluteSize.Y)
	end)
end

function HideHoverInfo()
	HoverInfoFrame.Visible = false
	if Connections.Other.HoverInfoMouseMove then
		Connections.Other.HoverInfoMouseMove:Disconnect()
		Connections.Other.HoverInfoMouseMove = nil
	end
end

function CreateCategory(Properties)
	local CategoryTopBar = Instance.new("TextButton")
	CategoryTopBar.BackgroundColor3 = GuiColors.CategoryTopBar
	CategoryTopBar.Size = (Properties.Size and UDim2.fromScale(0.09 * Properties.Size.X.Scale, 0.03)) or UDim2.fromScale(0.1, 0.03)
	CategoryTopBar.Position = Properties.ClosedPos or UDim2.fromScale(0.005, 0.1)
	CategoryTopBar.Text = ""
	CategoryTopBar.Name = Properties.Name or "Category"
	CategoryTopBar.BorderSizePixel = 0
	CategoryTopBar.ZIndex = #CategoryHolderFrame:GetChildren() + 1
	CategoryTopBar.Visible = false
    CategoryTopBar.Modal = true
    CategoryTopBar.Parent = CategoryHolderFrame
	
	local CategoryTopBarUICorner = Instance.new("UICorner")
	CategoryTopBarUICorner.CornerRadius = UDim.new(0.3, 0)
    CategoryTopBarUICorner.Parent = CategoryTopBar

	local FillerFrame = Instance.new("Frame")
	FillerFrame.BackgroundColor3 = Color3.fromRGB(20, 135, 255)
	FillerFrame.Size = UDim2.fromScale(1, 0.5)
	FillerFrame.Position = UDim2.fromScale(0, 0.5)
	FillerFrame.BorderSizePixel = 0
	FillerFrame.ZIndex = CategoryTopBar.ZIndex
	FillerFrame.Name = "FillerFrame"
    FillerFrame.Parent = CategoryTopBar

	local HideCategory = Instance.new("TextButton")
	HideCategory.BackgroundTransparency = 1
	HideCategory.ZIndex = CategoryTopBar.ZIndex
	HideCategory.Name = "HideCategory"
	HideCategory.Size = UDim2.fromScale(0.2, 1)
	HideCategory.Font = BoldFont
	HideCategory.TextColor3 = Color3.fromRGB(255, 255, 255)
	HideCategory.Text = "-"
	HideCategory.TextScaled = true
    HideCategory.Parent = CategoryTopBar
	
	local HideCategoryUIStroke = Instance.new("UIStroke")
    HideCategoryUIStroke.Parent = HideCategory

    local CategoryName = Instance.new("TextLabel")
    CategoryName.BackgroundTransparency = 1
    CategoryName.Size = UDim2.fromScale(0.95, 0.8)
    CategoryName.Position = UDim2.fromScale(0.025, 0.1)
    CategoryName.TextColor3 = Color3.fromRGB(255, 255, 255)
    CategoryName.Text = Properties.Name or "nil"
    CategoryName.Name = "CategoryName"
    CategoryName.ZIndex = CategoryTopBar.ZIndex
    CategoryName.TextScaled = true
    CategoryName.Parent = CategoryTopBar
	
	local CategoryNameUIStroke = Instance.new("UIStroke")
	CategoryNameUIStroke.Parent = CategoryName

	local ContentFrame = Instance.new("Frame")
	ContentFrame.Name = "ContentFrame"
	ContentFrame.BackgroundColor3 = GuiColors.CategoryBackground
	ContentFrame.Position = UDim2.fromScale(0, 1)
	ContentFrame.Size = Properties.Size and UDim2.fromScale(1, Properties.Size.Y.Scale * 25) or UDim2.fromScale(1, 25)
	ContentFrame.BorderSizePixel = 0
	ContentFrame.ClipsDescendants = true
	ContentFrame.ZIndex = CategoryTopBar.ZIndex
    ContentFrame.Parent = CategoryTopBar
	
	local ContentFrameUICorner = Instance.new("UICorner")
	ContentFrameUICorner.CornerRadius = UDim.new(0.065, 0)
    ContentFrameUICorner.Parent = ContentFrame

	local FillerFrame2 = Instance.new("Frame")
	FillerFrame2.BackgroundColor3 = GuiColors.CategoryBackground
	FillerFrame2.Size = UDim2.fromScale(1, 1)
	FillerFrame2.Position = UDim2.fromScale(0, 1)
	FillerFrame2.BorderSizePixel = 0
	FillerFrame2.ZIndex = CategoryTopBar.ZIndex - 1
	FillerFrame2.Name = "FillerFrame2"
    FillerFrame2.Parent = CategoryTopBar

	local ContentScrollingFrame = Instance.new("ScrollingFrame")
	ContentScrollingFrame.Name = "ContentScrollingFrame"
	ContentScrollingFrame.BackgroundTransparency = 1
	ContentScrollingFrame.AutomaticCanvasSize = Enum.AutomaticSize.Y
	ContentScrollingFrame.Size = UDim2.fromScale(1, 0.98)
	ContentScrollingFrame.Position = UDim2.new(0, 0, 0, 3)
	ContentScrollingFrame.ScrollBarThickness = 0
	ContentScrollingFrame.CanvasSize = UDim2.fromScale(1, 1)
	ContentScrollingFrame.ZIndex = CategoryTopBar.ZIndex
	ContentScrollingFrame.BorderSizePixel = 0
    ContentScrollingFrame.Parent = ContentFrame
	
	local ResizeButton = Instance.new("TextButton")
	ResizeButton.Size = UDim2.fromScale(0.9, 0.15)
	ResizeButton.Position = UDim2.fromScale(0.05, ContentFrame.Size.Y.Scale + 1.1 or 25)
	ResizeButton.Text = ""
	ResizeButton.BorderSizePixel = 0
	ResizeButton.AutoButtonColor = false
	ResizeButton.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
	ResizeButton.Name = "ResizeButton"
	ResizeButton.Transparency = 0.8
    ResizeButton.Parent = CategoryTopBar
	ResizeButton.MouseEnter:Connect(function()
		TweenService:Create(ResizeButton, TweenInfo.new(0.25, Enum.EasingStyle.Quad), {Transparency = 0.4}):Play()
	end)
	ResizeButton.MouseLeave:Connect(function()
		TweenService:Create(ResizeButton, TweenInfo.new(0.25, Enum.EasingStyle.Quad), {Transparency = 0.8}):Play()
	end)
	
	local ResizeButtonUICorner = Instance.new("UICorner")
	ResizeButtonUICorner.CornerRadius = UDim.new(1, 0)
    ResizeButtonUICorner.Parent = ResizeButton

	local PrevSize = ContentFrame.Size

	local ResizeButtonUIDragDetector = Instance.new("UIDragDetector")
	ResizeButtonUIDragDetector.CursorIcon = "http://www.roblox.com/asset/?id=73330868899359"
	ResizeButtonUIDragDetector.ActivatedCursorIcon = "http://www.roblox.com/asset/?id=73330868899359"
	ResizeButtonUIDragDetector.DragStyle = Enum.UIDragDetectorDragStyle.TranslateLine
	ResizeButtonUIDragDetector.DragAxis = Vector2.new(0, 1)
	ResizeButtonUIDragDetector.ResponseStyle = Enum.UIDragDetectorResponseStyle.Scale
    ResizeButtonUIDragDetector.Parent = ResizeButton
	ResizeButtonUIDragDetector.DragContinue:Connect(function()
		ResizeButton.Position = UDim2.fromScale(ResizeButton.Position.X.Scale, math.clamp(ResizeButton.Position.Y.Scale, 3, 100))
		ContentFrame.Size = UDim2.fromScale(1, ResizeButton.Position.Y.Scale - ContentFrame.Position.Y.Scale)
		PrevSize = ContentFrame.Size
	end)

	local ContentScrollingFrameUIListLayout = Instance.new("UIListLayout")
	ContentScrollingFrameUIListLayout.Padding = UDim.new(0, 3)
	ContentScrollingFrameUIListLayout.SortOrder = Enum.SortOrder.LayoutOrder
	ContentScrollingFrameUIListLayout.HorizontalAlignment = Enum.HorizontalAlignment.Center
    ContentScrollingFrameUIListLayout.Parent = ContentScrollingFrame

	CategoryTopBar:GetPropertyChangedSignal("AbsoluteSize"):Connect(function()
		ResizeButton.Position = UDim2.fromScale(ResizeButton.Position.X.Scale, math.clamp(ResizeButton.Position.Y.Scale, 3, 100))
	end)
	
	local DB = false
	local PrevPos = UDim2.new(Properties.Pos.X.Scale, Properties.Pos.X.Offset, Properties.Pos.Y.Scale, Properties.Pos.Y.Offset) or CategoryTopBar.Position

	local UIDragDetector = Instance.new("UIDragDetector")
    UIDragDetector.Parent = CategoryTopBar
	UIDragDetector.DragContinue:Connect(function()
		PrevPos = CategoryTopBar.Position
	end)
	
	HideCategory.MouseButton1Click:Connect(function()
		if DB then return end
		DB = true
		if AnimateCategories then
			if ContentFrame.Visible then
				local CloseTween = TweenService:Create(ContentFrame, TweenInfo.new(CategoryCloseSpeed, Enum.EasingStyle.Quad), {Size = UDim2.fromScale(ContentFrame.Size.X.Scale, 0)})
				local ResizeButtonTween = TweenService:Create(ResizeButton, TweenInfo.new(CategoryCloseSpeed, Enum.EasingStyle.Quad), {Position = UDim2.fromScale(0.05, 1)})
				local FillerFrame2Tween = TweenService:Create(FillerFrame2, TweenInfo.new(CategoryCloseSpeed, Enum.EasingStyle.Quad), {Position = UDim2.fromScale(0, 0.5), Size = UDim2.fromScale(1, 0.5)})
				ResizeButtonTween:Play()
				CloseTween:Play()
				HideCategory.Text = "+"
				FillerFrame2Tween:Play()
				CloseTween.Completed:Wait()
				ResizeButton.Visible = false
				ContentFrame.Visible = false
				FillerFrame.Visible = false
				FillerFrame2.Visible = false
				DB = false
			else
				ContentFrame.Visible = true
				ResizeButton.Visible = true
				FillerFrame.Visible = true
				FillerFrame2.Visible = true
				local OpenTween = TweenService:Create(ContentFrame, TweenInfo.new(CategoryCloseSpeed, Enum.EasingStyle.Quad), {Size = UDim2.fromScale(ContentFrame.Size.X.Scale, PrevSize.Y.Scale)})
				local ResizeButtonTween = TweenService:Create(ResizeButton, TweenInfo.new(CategoryCloseSpeed, Enum.EasingStyle.Quad), {Position = UDim2.fromScale(0.05, PrevSize.Y.Scale + 1)})
				local FillerFrame2Tween = TweenService:Create(FillerFrame2, TweenInfo.new(CategoryCloseSpeed, Enum.EasingStyle.Quad), {Position = UDim2.fromScale(0, 1), Size = UDim2.fromScale(1, 1)})
				ResizeButtonTween:Play()
				OpenTween:Play()
				HideCategory.Text = "-"
				FillerFrame2Tween:Play()
				OpenTween.Completed:Wait()
				DB = false
			end
		else
			if ContentFrame.Visible then
				ContentFrame.Visible = false
				ResizeButton.Visible = false
				FillerFrame.Visible = false
				FillerFrame2.Visible = false
				HideCategory.Text = "+"
			else
				ContentFrame.Visible = true
				ResizeButton.Visible = true
				FillerFrame.Visible = true
				FillerFrame2.Visible = true
				HideCategory.Text = "-"
			end
			DB = false
		end
	end)
	
	local MenuToggleDB = false
	local Buffer = false
	local Toggleable = true
	
	Connections.TidalWave["Toggle" .. CategoryName.Text .. "CategoryInputBeganConnection"] = UIS.InputBegan:Connect(function(Input)
		if ChatboxFocused() or TidalWaveFocused or not Toggleable then return end
		if Input.KeyCode.Name == MenuKeybind and not Rebinding and not SettingsMenu.TopBar.Visible and not ProfileMenu.TopBar.Visible then
			Buffer = true
			if MenuToggleDB then return end
			if AnimateWindows then
				MenuToggleDB = true
				if CategoryTopBar.Visible then
					HideHoverInfo()
					Buffer = false
					local MenuCloseTween = TweenService:Create(CategoryTopBar, TweenInfo.new(MenuOpenSpeed, Enum.EasingStyle:FromName(MenuEasingStyle), Enum.EasingDirection:FromName(MenuCloseEasingDirection)), {Position = Properties.ClosedPos or UDim2.fromScale(-0.25, -1)})
					MenuCloseTween:Play()
					MenuCloseTween.Completed:Wait()
					CategoryTopBar.Visible = false
					MenuToggleDB = false
					if Buffer then
						Buffer = false
						CategoryTopBar.Visible = true
						MenuToggleDB = true
						local MenuOpenTween = TweenService:Create(CategoryTopBar, TweenInfo.new(MenuOpenSpeed, Enum.EasingStyle:FromName(MenuEasingStyle), Enum.EasingDirection:FromName(MenuOpenEasingDirection)), {Position = PrevPos})
						MenuOpenTween:Play()
						MenuOpenTween.Completed:Wait()
						MenuToggleDB = false
					end
				else
					CategoryTopBar.Visible = true
					Buffer = false
					MenuToggleDB = true
					local MenuOpenTween = TweenService:Create(CategoryTopBar, TweenInfo.new(MenuOpenSpeed, Enum.EasingStyle:FromName(MenuEasingStyle), Enum.EasingDirection:FromName(MenuOpenEasingDirection)), {Position = PrevPos})
					MenuOpenTween:Play()
					MenuOpenTween.Completed:Wait()
					MenuToggleDB = false
					if Buffer then
						Buffer = false
						HideHoverInfo()
						MenuToggleDB = true
						local MenuCloseTween = TweenService:Create(CategoryTopBar, TweenInfo.new(MenuOpenSpeed, Enum.EasingStyle:FromName(MenuEasingStyle), Enum.EasingDirection:FromName(MenuCloseEasingDirection)), {Position = Properties.ClosedPos or UDim2.fromScale(-0.25, -1)})
						MenuCloseTween:Play()
						MenuCloseTween.Completed:Wait()
						CategoryTopBar.Visible = false
						MenuToggleDB = false
					end
				end
			else
				if CategoryTopBar.Visible then
					CategoryTopBar.Position = Properties.ClosedPos or UDim2.fromScale(-0.25, -1)
					CategoryTopBar.Visible = false
				else
					CategoryTopBar.Position = PrevPos
					CategoryTopBar.Visible = false
				end
			end
		elseif Input.KeyCode.Name == MenuKeybind and not Rebinding then
			if SettingsMenu.TopBar.Visible then
				SettingsMenu.TopBar.Visible = false
				CategoryTopBar.Visible = true
			elseif ProfileMenu.TopBar.Visible then
				ProfileMenu.TopBar.Visible = false
				CategoryTopBar.Visible = true
			end
		end
	end)
	
	Connections.TidalWave["Toggle" .. CategoryName.Text .. "CategoryInputEndedConnection"] = UIS.InputEnded:Connect(function(Input)
		if Input.KeyCode.Name == MenuKeybind then
			Buffer = false
		end
	end)

	SettingsMenu.TopBar:GetPropertyChangedSignal("Visible"):Connect(function()
        CategoryTopBar.Visible = not SettingsMenu.TopBar.Visible
	end)

	ProfileMenu.TopBar:GetPropertyChangedSignal("Visible"):Connect(function()
        CategoryTopBar.Visible = not ProfileMenu.TopBar.Visible
	end)

	local Functions = {
		ContentFrame = ContentScrollingFrame,
	}
	
	function Functions:CreateButton(BtnProperties)
		local Button = CreateButton({
			Text = BtnProperties.Text or "",
			Name = BtnProperties.Name or nil,
			Info = BtnProperties.Info,
			Parent = ContentScrollingFrame,
			Tags = BtnProperties.Tags,
			ZIndex = ContentScrollingFrame.ZIndex,
			Size = UDim2.new(0.975, 0, 0, 15 * (BtnProperties.SizeMulti or 1)),
			Function = function()
				if BtnProperties.Function then
					BtnProperties.Function({NoNotify = false})
				elseif BtnProperties.MouseButton1Click then
					BtnProperties.MouseButton1Click({NoNotify = false})
				end
			end,
			Function2 = (BtnProperties.Function2 or BtnProperties.MouseButton2Click) and function()
				if BtnProperties.Function2 then
					BtnProperties.Function2({NoNotify = false})
				elseif BtnProperties.MouseButton2Click then
					BtnProperties.MouseButton2Click({NoNotify = false})
				end
			end or nil,
		})

		return Button
	end

	function Functions:CreateToggle(BtnProperties)
		local Button = CreateToggle({
			Text = BtnProperties.Text or "",
			Info = BtnProperties.Info or "",
			Parent = ContentScrollingFrame,
			ZIndex = ContentScrollingFrame.ZIndex,
			Size = UDim2.new(0.975, 0, 0, 15 * (BtnProperties.SizeMulti or 1)),
			Tags = BtnProperties.Tags,
			EnabledIndicatorDefault = BtnProperties.EnabledIndicatorDefault or BtnProperties.IndicatorDefault or BtnProperties.EnabledDefault or BtnProperties.Default,
			Function = function(Args)
				if BtnProperties.Function then
					BtnProperties.Function(Args or {})
				elseif BtnProperties.MouseButton1Click then
					BtnProperties.MouseButton1Click(Args or {})
				end
			end,
			Function2 = (BtnProperties.Function2 or BtnProperties.MouseButton2Click) and function(Args)
				if BtnProperties.Function2 then
					BtnProperties.Function2(Args or {})
				elseif BtnProperties.MouseButton2Click then
					BtnProperties.MouseButton2Click(Args or {})
				end
			end or nil,
		})

		return Button
	end
	
	function Functions:CreateTextbox(BtnProperties)
		local Textbox = CreateTextbox({
			Text = BtnProperties.Text or BtnProperties.TextboxText,
			ButtonText = BtnProperties.ButtonText or BtnProperties.TextLabelText or BtnProperties.LabelText,
			PlaceholderText = BtnProperties.PlaceholderText,
			Info = BtnProperties.Info or "",
			ZIndex = ContentScrollingFrame.ZIndex,
			Size = UDim2.new(0.975, 0, 0, 15 * (BtnProperties.SizeMulti or 1)),
			Parent = ContentScrollingFrame,
			NoButton = BtnProperties.NoButton,
			EnabledIndicator = BtnProperties.EnabledIndicator,
			Tags = BtnProperties.Tags,
			Name = BtnProperties.Name,
			Focused = function(Args)
				if BtnProperties.Focused then
					BtnProperties.Focused(Args)
				end
			end,
			FocusLost = function(Args)
				if BtnProperties.FocusLost then
					BtnProperties.FocusLost(Args)
				end
			end,
			MouseButton1Click = function(Args)
				if BtnProperties.MouseButton1Click then
					BtnProperties.MouseButton1Click(Args)
				elseif BtnProperties.Function then
					BtnProperties.Function(Args)
				end
			end,
			MouseButton2Click = function(Args)
				if BtnProperties.MouseButton2Click then
					BtnProperties.MouseButton2Click(Args)
				elseif BtnProperties.Function2 then
					BtnProperties.Function2(Args)
				end
			end,
		})

		return Textbox
	end
	
	function Functions:Toggle(Instant)
		task.spawn(function()
			if MenuToggleDB then return end
			if AnimateWindows and not Instant then
				MenuToggleDB = true
				if CategoryTopBar.Visible then
					HideHoverInfo()
					local MenuCloseTween = TweenService:Create(CategoryTopBar, TweenInfo.new(MenuOpenSpeed, Enum.EasingStyle:FromName(MenuEasingStyle), Enum.EasingDirection:FromName(MenuCloseEasingDirection)), {Position = Properties["ClosedPos"] or UDim2.fromScale(-0.25, -1)})
					MenuCloseTween:Play()
					MenuCloseTween.Completed:Wait()
					CategoryTopBar.Visible = false
					MenuToggleDB = false
				else
					CategoryTopBar.Visible = true
					MenuToggleDB = true
					local MenuOpenTween = TweenService:Create(CategoryTopBar, TweenInfo.new(MenuOpenSpeed, Enum.EasingStyle:FromName(MenuEasingStyle), Enum.EasingDirection:FromName(MenuOpenEasingDirection)), {Position = PrevPos})
					MenuOpenTween:Play()
					MenuOpenTween.Completed:Wait()
					MenuToggleDB = false
				end
			else
				if CategoryTopBar.Visible then
					CategoryTopBar.Position = Properties.ClosedPos or UDim2.fromScale(-0.25, -1)
					CategoryTopBar.Visible = false
				else
					CategoryTopBar.Position = PrevPos
					CategoryTopBar.Visible = false
				end
			end
		end)
	end

	function Functions:Show(Instant)
		task.spawn(function()
			if MenuToggleDB then return end
			if Instant then
				if CategoryTopBar.Visible then
					CategoryTopBar.Position = Properties.ClosedPos or UDim2.fromScale(-0.25, -1)
					CategoryTopBar.Visible = false
				else
					CategoryTopBar.Position = PrevPos
					CategoryTopBar.Visible = true
				end
			else
				if not CategoryTopBar.Visible then
					CategoryTopBar.Visible = true
					MenuToggleDB = true
					local MenuOpenTween = TweenService:Create(CategoryTopBar, TweenInfo.new(MenuOpenSpeed, Enum.EasingStyle:FromName(MenuEasingStyle), Enum.EasingDirection:FromName(MenuOpenEasingDirection)), {Position = PrevPos})
					MenuOpenTween:Play()
					MenuOpenTween.Completed:Wait()
					MenuToggleDB = false
				end
			end
		end)
	end

	function Functions:Hide(Instant)
		task.spawn(function()
			if MenuToggleDB then return end
			if Instant then
				if CategoryTopBar.Visible then
					CategoryTopBar.Position = Properties.ClosedPos or UDim2.fromScale(-0.25, -1)
					CategoryTopBar.Visible = false
				else
					CategoryTopBar.Position = PrevPos
					CategoryTopBar.Visible = false
				end
			else
				if CategoryTopBar.Visible then
					HideHoverInfo()
					local MenuCloseTween = TweenService:Create(CategoryTopBar, TweenInfo.new(MenuOpenSpeed, Enum.EasingStyle:FromName(MenuEasingStyle), Enum.EasingDirection:FromName(MenuCloseEasingDirection)), {Position = Properties["ClosedPos"] or UDim2.fromScale(-0.25, -1)})
					MenuCloseTween:Play()
					MenuCloseTween.Completed:Wait()
					CategoryTopBar.Visible = false
					MenuToggleDB = false
				end
			end
		end)
	end

	function Functions:IsVisible()
		return CategoryTopBar.Visible
	end

	function Functions:MakeToggleable(Bool)
		if Bool ~= nil and typeof(Bool) == "boolean" then
			Toggleable = Bool
		end
	end

	return Functions
end

Signal = {}

do
	local Connection = {}
	Connection.__index = Connection
	Signal.__index = Signal
	local freeRunnerThread = nil
	local function acquireRunnerThreadAndCallEventHandler(fn, ...)
		local acquiredRunnerThread = freeRunnerThread
		freeRunnerThread = nil
		fn(...)
		freeRunnerThread = acquiredRunnerThread
	end
	local function runEventHandlerInFreeThread()
		while true do
			acquireRunnerThreadAndCallEventHandler(coroutine.yield())
		end
	end
	function Connection.new(signal, fn)
		return setmetatable({
			_connected = true,
			_signal = signal,
			_fn = fn,
			_next = false,
		}, Connection)
	end
	function Connection:Disconnect()
		self._connected = false
		if self._signal._handlerListHead == self then
			self._signal._handlerListHead = self._next
		else
			local prev = self._signal._handlerListHead
			while prev and prev._next ~= self do
				prev = prev._next
			end
			if prev then
				prev._next = self._next
			end
		end
	end
	setmetatable(Connection, {
		__index = function(tb, key)
			error(("Attempt to get Connection::%s (not a valid member)"):format(tostring(key)), 2)
		end,
		__newindex = function(tb, key, value)
			error(("Attempt to set Connection::%s (not a valid member)"):format(tostring(key)), 2)
		end
	})
	function Signal.new()
		return setmetatable({
			_handlerListHead = false,
		}, Signal)
	end
	function Signal:Connect(fn)
		local connection = Connection.new(self, fn)
		if self._handlerListHead then
			connection._next = self._handlerListHead
			self._handlerListHead = connection
		else
			self._handlerListHead = connection
		end
		return connection
	end
	function Signal:DisconnectAll()
		self._handlerListHead = false
	end
	function Signal:Fire(...)
		local item = self._handlerListHead
		while item do
			if item._connected then
				if not freeRunnerThread then
					freeRunnerThread = coroutine.create(runEventHandlerInFreeThread)
					-- Get the freeRunnerThread to the first yield
					coroutine.resume(freeRunnerThread)
				end
				task.spawn(freeRunnerThread, item._fn, ...)
			end
			item = item._next
		end
	end
	function Signal:Wait()
		local waitingCoroutine = coroutine.running()
		local cn;
		cn = self:Connect(function(...)
			cn:Disconnect()
			task.spawn(waitingCoroutine, ...)
		end)
		return coroutine.yield()
	end
	function Signal:Once(fn)
		local cn;
		cn = self:Connect(function(...)
			if cn._connected then
				cn:Disconnect()
			end
			fn(...)
		end)
		return cn
	end
	setmetatable(Signal, {
		__index = function(tb, key)
			error(("Attempt to get Signal::%s (not a valid member)"):format(tostring(key)), 2)
		end,
		__newindex = function(tb, key, value)
			error(("Attempt to set Signal::%s (not a valid member)"):format(tostring(key)), 2)
		end
	})
end

do
	local Notifications = {}
	local MovingNotifications = {}
	local NotificationSignal = Signal.new()

	local function UpdateLayout()
		for i, v in ipairs(Notifications) do
			if v.Position.X.Scale == 1 then
				v.Position = UDim2.fromScale(v.Position.X.Scale, 0.96 - (i * 0.11))
			end
            table.insert(MovingNotifications, v)
            local Info = TweenInfo.new(0.2, Enum.EasingStyle.Quad, Enum.EasingDirection.Out)
            local Goal = {Position = UDim2.fromScale(0, 0.96 - (i * 0.11))}
            local OpenTween = TweenService:Create(v, Info, Goal)
            OpenTween:Play()
            OpenTween.Completed:Once(function()
                table.remove(MovingNotifications, table.find(MovingNotifications, v))
                NotificationSignal:Fire({
                    Event = "StoppedMoving",
                    Frame = v,
                })
            end)
		end
	end
    
	function Notify(Properties)
		task.spawn(function()
			if not NotifyOn then return end
			while NotificationDebounce and not StopScript do
				local Args = NotificationSignal:Wait()
				if Args.Event == "DebounceFinished" then
					break
				end
			end
			NotificationDebounce = true
            
			local Frame = Instance.new("Frame")
			Frame.Size = UDim2.fromScale(1, 0.1)
			Frame.BackgroundColor3 = Color3.fromRGB(25, 25, 25)
			Frame.BorderSizePixel = 0
			Frame.Name = Properties.Title or "Notification"
			table.insert(Notifications, Frame)
			Frame.Position = UDim2.fromScale(1, 0.96 - (table.find(Notifications, Frame) * 0.11))
			Frame.Parent = NotificationFrame

			local FrameUICorner = Instance.new("UICorner")
			FrameUICorner.CornerRadius = UDim.new(0.1, 0)
			FrameUICorner.Parent = Frame

			local TitleLabel = Instance.new("TextLabel")
			TitleLabel.Size = UDim2.fromScale(1, 0.3)
			TitleLabel.Position = UDim2.fromScale(0, 0)
			TitleLabel.BackgroundTransparency = 1
			TitleLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
			TitleLabel.Name = "Title"
			TitleLabel.Text = Properties.Title or "<font color = 'rgb(255, 215, 0)'>Tidal</font> <font color = 'rgb(20, 135, 255)'>Wave</font>"
			TitleLabel.Font = BoldFont
			TitleLabel.TextScaled = true
			TitleLabel.RichText = TitleLabel.Text ~= Properties.Title
			TitleLabel.Parent = Frame

			local TextLabel = Instance.new("TextLabel")
			TextLabel.Size = UDim2.fromScale(0.95, 0.6)
			TextLabel.Position = UDim2.fromScale(0.025, 0.3)
			TextLabel.BackgroundTransparency = 1
			TextLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
			TextLabel.Name = "Text"
			TextLabel.Font = Enum.Font:FromName(TextFont)
			TextLabel.Text = Properties.Text or ""
			TextLabel.TextScaled = true
			if Properties.Text and string.find(Properties.Text , "<") or string.find(Properties.Text , ">") then
				TextLabel.RichText = true
			end
			TextLabel.Parent = Frame

			local TextSizeConstraint = Instance.new("UITextSizeConstraint")
			TextSizeConstraint.MaxTextSize = Camera.ViewportSize.Y / 55
			local CameraChangedSignal = Camera:GetPropertyChangedSignal("ViewportSize"):Connect(function()
				TextSizeConstraint.MaxTextSize = Camera.ViewportSize.Y / 55
			end)
			TextSizeConstraint.Parent = TextLabel

			local ProgressFrame = Instance.new("Frame")
			ProgressFrame.Name = "DurationBar"
			ProgressFrame.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
			ProgressFrame.BorderSizePixel = 0
			ProgressFrame.Size = UDim2.fromScale(1, 0.05)
			ProgressFrame.Position = UDim2.fromScale(0, 0.95)
			ProgressFrame.Parent = Frame

            local SoundID = Properties.SoundID or Properties.SoundId

			local Sound = Instance.new("Sound")
			if typeof(SoundID) == "number" then
				Sound.SoundId = "rbxassetid://" .. tostring(SoundID)
			elseif typeof(SoundID) == "string" then
				Sound.SoundId = SoundID
			end
			Sound.Volume = Properties.Volume or 0.5
			Sound.Name = "NotificationSound"
			Sound.Parent = Sound.SoundId ~= "" and SoundsFolder or nil
			Sound:Play()
			if Properties.SoundDuration then
				Debris:AddItem(Sound, Properties.SoundDuration)
            elseif Sound.SoundId ~= "" then
				Sound.Ended:Once(function()
					Sound:Destroy()
				end)
			end

			RunService.RenderStepped:Wait()

			UpdateLayout(Frame)

			task.wait(0.2)

			NotificationDebounce = false
			NotificationSignal:Fire({
				Event = "DebounceFinished"
			})

			local ProgressBarTween = TweenService:Create(Frame.DurationBar, TweenInfo.new(Properties.Duration or 3, Enum.EasingStyle.Linear, Enum.EasingDirection.Out), {Size = UDim2.fromScale(0, 0.05)})
			ProgressBarTween:Play()
			ProgressBarTween.Completed:Wait()
			
			table.remove(Notifications, table.find(Notifications, Frame))
			UpdateLayout()

            while MovingNotifications[Frame] and not StopScript do
                local Args = NotificationSignal:Wait()
                if Args.Event == "StoppedMoving" and Args.Frame == Frame then
                    break
                end
            end

			local CloseTween = TweenService:Create(Frame, TweenInfo.new(0.2, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {Position = UDim2.fromScale(1, Frame.Position.Y.Scale)})
			CloseTween:Play()
			CloseTween.Completed:Wait()

			Frame:Destroy()
			CameraChangedSignal:Disconnect()
			CameraChangedSignal = nil
		end)
	end
end

function CreateDropdown(Properties)
	local SelectorMainFrame = Instance.new("Frame")
	SelectorMainFrame.BackgroundColor3 = Color3.fromRGB(20, 20, 20)
	SelectorMainFrame.BorderSizePixel = 0
	SelectorMainFrame.Size = Properties.Size or UDim2.fromScale(0.85, 0.1)
	SelectorMainFrame.Position = UDim2.fromScale(0, 0)
	SelectorMainFrame.Name = "SelectorMainFrame"
	SelectorMainFrame.ZIndex = Properties.ZIndex or 3
    SelectorMainFrame.LayoutOrder = Properties.LayoutOrder or 1
    SelectorMainFrame.Parent = Properties.Parent or SettingsMenu.ScrollingFrame
	
	local SelectorMainFrameUICorner = Instance.new("UICorner")
	SelectorMainFrameUICorner.CornerRadius = UDim.new(0.25, 0)
    SelectorMainFrameUICorner.Parent = SelectorMainFrame
	
	local SelectorTextLabel = Instance.new("TextLabel")
	SelectorTextLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
	SelectorTextLabel.Font = TextFont
	SelectorTextLabel.Size = UDim2.fromScale(0.5, 0.6)
	SelectorTextLabel.Position = UDim2.fromScale(0.5, 0.2)
	SelectorTextLabel.ZIndex = SelectorMainFrame.ZIndex
	SelectorTextLabel.BackgroundTransparency = 1
	SelectorTextLabel.Text = Properties.Text
	SelectorTextLabel.TextScaled = true
    SelectorTextLabel.Parent = SelectorMainFrame
	
	local Filler = Instance.new("Frame")
	Filler.BackgroundColor3 = Color3.fromRGB(20, 20, 20)
	Filler.Size = UDim2.fromScale(0.1, 1)
	Filler.Position = UDim2.fromScale(0.45, 0)
	Filler.BorderSizePixel = 0
	Filler.ZIndex = SelectorMainFrame.ZIndex - 1
    Filler.Parent = SelectorMainFrame
	
	local OpenSelector = Instance.new("ImageButton")
	OpenSelector.BackgroundColor3 = Color3.fromRGB(20, 20, 20)
	OpenSelector.BorderSizePixel = 0
	OpenSelector.Size = UDim2.fromScale(0.5, 1)
	OpenSelector.Position = UDim2.fromScale(0, 0)
	OpenSelector.Name = "OpenDropdown"
	OpenSelector.ZIndex = SelectorMainFrame.ZIndex
	OpenSelector.AutoButtonColor = false
    OpenSelector.Parent = SelectorMainFrame
	
	local OpenSelectorUICorner = Instance.new("UICorner")
	OpenSelectorUICorner.CornerRadius = UDim.new(0.25, 0)
    OpenSelectorUICorner.Parent = OpenSelector

	local OpenSelectorTextLabel = Instance.new("TextLabel")
	OpenSelectorTextLabel.Size = UDim2.fromScale(0.9, 0.6)
	OpenSelectorTextLabel.Position = UDim2.fromScale(0.05, 0.2)
	OpenSelectorTextLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
	OpenSelectorTextLabel.Font = TextFont
	OpenSelectorTextLabel.Name = "OpenDropdownText"
	OpenSelectorTextLabel.BackgroundTransparency = 1
	OpenSelectorTextLabel.Text = Properties.Default or ""
	OpenSelectorTextLabel.TextScaled = true
	OpenSelectorTextLabel.ZIndex = SelectorMainFrame.ZIndex
    OpenSelectorTextLabel.Parent = OpenSelector
	
	OpenSelector.MouseEnter:Connect(function()
		TweenService:Create(OpenSelector, TweenInfo.new(0.25,  Enum.EasingStyle.Quad), {BackgroundColor3 = Color3.fromRGB(40, 40, 40)}):Play()
	end)
	OpenSelector.MouseLeave:Connect(function()
		TweenService:Create(OpenSelector, TweenInfo.new(0.25,  Enum.EasingStyle.Quad), {BackgroundColor3 = Color3.fromRGB(20, 20, 20)}):Play()
	end)
	
	OpenSelector.MouseButton1Down:Connect(function()
		TweenService:Create(OpenSelector, TweenInfo.new(0.1, Enum.EasingStyle.Quad), {BackgroundColor3 = Color3.fromRGB(20, 20, 20)}):Play()
	end)
	OpenSelector.MouseButton1Up:Connect(function()
		TweenService:Create(OpenSelector, TweenInfo.new(0.1, Enum.EasingStyle.Quad), {BackgroundColor3 = Color3.fromRGB(40, 40, 40)}):Play()
	end)
	
	local ContentFrame = Instance.new("Frame")
	ContentFrame.Size = UDim2.fromScale(1, 8)
	ContentFrame.Position = UDim2.fromScale(0, 1)
	ContentFrame.BackgroundColor3 = Color3.fromRGB(30, 30, 30)
	ContentFrame.BorderSizePixel = 0
	ContentFrame.Name = "ContentFrame"
	ContentFrame.Visible = false
	ContentFrame.Active = true
	ContentFrame.ZIndex = SelectorMainFrame.ZIndex + 1
	ContentFrame.Parent = OpenSelector

	local ContentFrameUICorner = Instance.new("UICorner")
	ContentFrameUICorner.CornerRadius = UDim.new(0, ContentFrame.AbsoluteSize.Y * 0.04)
    ContentFrameUICorner.Parent = ContentFrame
	
	local ContentFrameUIStroke = Instance.new("UIStroke")
	ContentFrameUIStroke.Thickness = 1
    ContentFrameUIStroke.Parent = ContentFrame
	
	local ArrowButton = Instance.new("TextButton")
	ArrowButton.Size = UDim2.fromScale(0.1, 1)
	ArrowButton.Position = UDim2.fromScale(0.9, 0)
	ArrowButton.BackgroundTransparency = 1
	ArrowButton.BorderSizePixel = 0
	ArrowButton.Name = "ArrowButton"
	ArrowButton.ZIndex = SelectorMainFrame.ZIndex
	ArrowButton.Text = ">"
	ArrowButton.TextColor3 = Color3.fromRGB(255, 255, 255)
	ArrowButton.Interactable = false
	ArrowButton.Selectable = false
	ArrowButton.TextSize = 12
    ArrowButton.Parent = OpenSelector
	
	local ContentScrollingFrame = Instance.new("ScrollingFrame")
	ContentScrollingFrame.Size = UDim2.fromScale(0.975, 0.95)
	ContentScrollingFrame.Position = UDim2.fromScale(0.0125, 0.025)
	ContentScrollingFrame.BackgroundTransparency = 1
	ContentScrollingFrame.BorderSizePixel = 0
	ContentScrollingFrame.Name = "ContentScrollingFrame"
	ContentScrollingFrame.ScrollBarThickness = 5
	ContentScrollingFrame.AutomaticCanvasSize = Enum.AutomaticSize.Y
	ContentScrollingFrame.ZIndex = ContentFrame.ZIndex
    ContentScrollingFrame.Parent = ContentFrame

	local ContentScrollingFrameUIGridLayout = Instance.new("UIGridLayout")
	ContentScrollingFrameUIGridLayout.CellSize = UDim2.new(0.95, 0, 0, ContentFrame.AbsoluteSize.Y * 0.1)
	ContentScrollingFrameUIGridLayout.HorizontalAlignment = Enum.HorizontalAlignment.Center
    ContentScrollingFrameUIGridLayout.Parent = ContentScrollingFrame
	ContentFrame.Size = UDim2.fromScale(1, 0)
	
	local OpenSelectorDB = false
	
	OpenSelector.MouseButton1Click:Connect(function()
		if OpenSelectorDB then return end
		OpenSelectorDB = true
		if ContentFrame.Visible then
			ContentScrollingFrameUIGridLayout.CellSize = UDim2.new(0.95, 0, 0, ContentFrame.AbsoluteSize.Y * 0.1)
			local Tween = TweenService:Create(ContentFrame, TweenInfo.new(0.25, Enum.EasingStyle.Quad), {Size = UDim2.fromScale(1, 0)})
			local RotateTween = TweenService:Create(ArrowButton, TweenInfo.new(0.25, Enum.EasingStyle.Quad), {Rotation = 0})
			Tween:Play()
			RotateTween:Play()
			Tween.Completed:Wait()
			ContentFrame.Visible = false
			OpenSelectorDB = false
		else
			ContentFrame.Visible = true
			local Tween = TweenService:Create(ContentFrame, TweenInfo.new(0.25, Enum.EasingStyle.Quad), {Size = UDim2.fromScale(1, 8)})
			local RotateTween = TweenService:Create(ArrowButton, TweenInfo.new(0.25, Enum.EasingStyle.Quad), {Rotation = 90})
			Tween:Play()
			RotateTween:Play()
			Tween.Completed:Wait()
			ContentScrollingFrameUIGridLayout.CellSize = UDim2.new(0.95, 0, 0.1, 0)
			OpenSelectorDB = false
		end
	end)
	
	local Functions = {
		AddButton = function(BtnProperties, Func)
			local Button = nil
			Button = CreateButton({
				Text = BtnProperties.Text and tostring(BtnProperties.Text) or "",
				Parent = ContentScrollingFrame,
				Info = BtnProperties.Info and tostring(BtnProperties.Info) or "",
				ZIndex = ContentFrame.ZIndex,
				Function = function()
					if Func then
						Func()
					end
					if Properties.AutoUpdateText or Properties.AutoUpdate then
						OpenSelectorTextLabel.Text = BtnProperties.Text and tostring(BtnProperties.Text)
					end
				end,
			})
			
			Button.MainFrame.MouseEnter:Connect(function()
				TweenService:Create(Button.Btn, TweenInfo.new(0.25,  Enum.EasingStyle.Quad), {BackgroundColor3 = Color3.fromRGB(69, 69, 69)}):Play()
			end)
			Button.MainFrame.MouseLeave:Connect(function()
				TweenService:Create(Button.Btn, TweenInfo.new(0.25,  Enum.EasingStyle.Quad), {BackgroundColor3 = Color3.fromRGB(20, 20, 20)}):Play()
			end)
			
			Button.MainFrame.MouseButton1Down:Connect(function()
				TweenService:Create(Button.Btn, TweenInfo.new(0.1, Enum.EasingStyle.Quad), {BackgroundColor3 = Color3.fromRGB(20, 20, 20)}):Play()
			end)
			Button.MainFrame.MouseButton1Up:Connect(function()
				TweenService:Create(Button.Btn, TweenInfo.new(0.1, Enum.EasingStyle.Quad), {BackgroundColor3 = Color3.fromRGB(69, 69, 69)}):Play()
			end)
		end,
		OpenBtn = OpenSelector,
		DropdownScrollingFrame = ContentScrollingFrame,
		MainFrame = SelectorMainFrame,
	}
	
	function Functions:CreateButton(BtnProperties)
		local BtnFunctions = {}
		if (BtnProperties.On or BtnProperties.OnFunction or BtnProperties.OnFunc) and (BtnProperties.Off or BtnProperties.OffFunc or BtnProperties.OffFunction) then
			local AddButton = nil
			
			local Button = CreateButton({
				Text = tostring(BtnProperties.Text) or "",
				Parent = ContentScrollingFrame,
				Info = BtnProperties.Info or "",
				ZIndex = ContentFrame.ZIndex,
				Function = function()
					if AddButton.ContentText == "+" then
						if BtnProperties.On then
							BtnProperties.On()
						elseif BtnProperties.OnFunction then
							BtnProperties.OnFunction()
						elseif BtnProperties.OnFunc then
							BtnProperties.OnFunc()
						end
						AddButton.Text = "<font color = 'rgb(255, 0, 0)'>-</font>"
					else
						if BtnProperties.Off then
							BtnProperties.Off()
						elseif BtnProperties.OffFunction then
							BtnProperties.OffFunction()
						elseif BtnProperties.OffFunc then
							BtnProperties.OfFunc()
						end
						AddButton.Text = "<font color = 'rgb(0, 255, 0)'>+</font>"
					end
				end,
			})
			
			Button.MainFrame.MouseEnter:Connect(function()
				TweenService:Create(Button.MainFrame, TweenInfo.new(0.25,  Enum.EasingStyle.Quad), {BackgroundColor3 = Color3.fromRGB(69, 69, 69)}):Play()
			end)
			Button.MainFrame.MouseLeave:Connect(function()
				TweenService:Create(Button.MainFrame, TweenInfo.new(0.25,  Enum.EasingStyle.Quad), {BackgroundColor3 = Color3.fromRGB(20, 20, 20)}):Play()
			end)
			
			Button.MainFrame.MouseButton1Down:Connect(function()
				TweenService:Create(Button.MainFrame, TweenInfo.new(0.1, Enum.EasingStyle.Quad), {BackgroundColor3 = Color3.fromRGB(20, 20, 20)}):Play()
			end)
			Button.MainFrame.MouseButton1Up:Connect(function()
				TweenService:Create(Button.MainFrame, TweenInfo.new(0.1, Enum.EasingStyle.Quad), {BackgroundColor3 = Color3.fromRGB(69, 69, 69)}):Play()
			end)
			
			AddButton = Instance.new("TextButton")
			AddButton.BackgroundTransparency = 1
			AddButton.ZIndex = Button.Btn.ZIndex
			AddButton.TextColor3 = Color3.fromRGB(255, 255, 255)
			AddButton.Font = BoldFont
			AddButton.Size = UDim2.fromScale(0.25, 1)
			AddButton.Position = UDim2.fromScale(0.75, 0)
			AddButton.RichText = true
			AddButton.Active = false
			AddButton.Interactable = false
			AddButton.Selectable = false
			AddButton.Text = "<font color = 'rgb(0, 255, 0)'>+</font>"
			AddButton.TextScaled = true
            AddButton.Parent = Button.Btn
		else
			local Button = nil
			Button = CreateButton({
				Text = tostring(BtnProperties.Text) or "",
				Parent = ContentScrollingFrame,
				Info = BtnProperties.Info or "",
				ZIndex = OpenSelector.ZIndex + 1,
				Function = function()
					if BtnProperties.Function then
						BtnProperties.Function()
					elseif BtnProperties.MouseButton1Click then
						BtnProperties.MouseButton1Click()
					end
					if Properties.AutoUpdateText or Properties.AutoUpdate then
						OpenSelectorTextLabel.Text = Button.Btn.Text
					end
				end,
			})
			
			Button.MainFrame.MouseEnter:Connect(function()
				TweenService:Create(Button.MainFrame, TweenInfo.new(0.25,  Enum.EasingStyle.Quad), {BackgroundColor3 = Color3.fromRGB(69, 69, 69)}):Play()
			end)
			Button.MainFrame.MouseLeave:Connect(function()
				TweenService:Create(Button.MainFrame, TweenInfo.new(0.25,  Enum.EasingStyle.Quad), {BackgroundColor3 = Color3.fromRGB(20, 20, 20)}):Play()
			end)
			
			Button.MainFrame.MouseButton1Down:Connect(function()
				TweenService:Create(Button.MainFrame, TweenInfo.new(0.1, Enum.EasingStyle.Quad), {BackgroundColor3 = Color3.fromRGB(20, 20, 20)}):Play()
			end)
			Button.MainFrame.MouseButton1Up:Connect(function()
				TweenService:Create(Button.MainFrame, TweenInfo.new(0.1, Enum.EasingStyle.Quad), {BackgroundColor3 = Color3.fromRGB(69, 69, 69)}):Play()
			end)
		end
        
		return BtnFunctions
	end
	
	function Functions:UpdateText(Str)
		OpenSelector.Text = Str and tostring(Str) or ""
	end
	
	return Functions
end

do
    local MovingLabels = {}
    local function GetLowestLayoutOrder(Children)
        local LowestLayoutOrderObj
        local LowestLayoutOrder = math.huge
        for i, v in ipairs(Children) do
            if v.LayoutOrder < LowestLayoutOrder then
                LowestLayoutOrder = v.LayoutOrder
                LowestLayoutOrderObj = v
            end
        end
        return LowestLayoutOrderObj, LowestLayoutOrder
    end

    local function ClearDuplicates()
        local Children = {}
        for i, v in ipairs(HackListFrame:GetChildren()) do
            if table.find(Children, v.Name) then
                v:Destroy()
            else
                table.insert(Children, v.Name)
            end
        end
    end
    
    local function UpdateLayout()
        ClearDuplicates()
        local OrderedFrames = {}
        local Children = HackListFrame:GetChildren()
        table.remove(Children, table.find(Children, HackListTitleFrame))
        for i = 1, #Children do
            local LowestLayoutOrderObj, LowestLayoutOrder = GetLowestLayoutOrder(Children)
            table.remove(Children, table.find(Children, LowestLayoutOrderObj))
            if not MovingLabels[LowestLayoutOrderObj] then
                table.insert(OrderedFrames, LowestLayoutOrderObj)
            end
        end
        for i, v in ipairs(OrderedFrames) do
            if v.Position.X.Scale == 1 then
                v.Position = UDim2.fromScale(v.Position.X.Scale, (0.02 * i) + 0.03)
            end
            local Info = TweenInfo.new(0.5, Enum.EasingStyle.Quad, Enum.EasingDirection.Out)
            local Goal = {Position = UDim2.fromScale(0, (0.02 * i) + 0.03)}
            local Tween = TweenService:Create(v, Info, Goal)
            Tween:Play()
            Tween.Completed:Once(function()
                MovingLabels[v] = nil
            end)
            MovingLabels[v] = true
        end
    end
    
    function AddHackToList(Name)
        task.spawn(function()
            Name = tostring(Name)
            if not Name then return end
            local FoundHackListFrame = HackListFrame:FindFirstChild(Name .. "Frame")
            if FoundHackListFrame and not MovingLabels[FoundHackListFrame] then return end
            local HackFrame = Instance.new("Frame")
            HackFrame.BackgroundTransparency = 1
            HackFrame.Name = Name .. "Frame"
            HackFrame.Size = UDim2.fromScale(1, 0.02)
            HackFrame.Position = UDim2.fromScale(1, 0.05)
            HackFrame.Parent = HackListFrame

            local HackLabel = Instance.new("TextLabel")
            HackLabel.Size = UDim2.fromScale(0.9, 0.75)
            HackLabel.Position = UDim2.fromScale(0.05, 0.125)
            HackLabel.BackgroundTransparency = 1
            HackLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
            HackLabel.Name = "HackLabel"
            HackLabel.TextXAlignment = Enum.TextXAlignment.Right
            HackLabel.Font = BoldFont or TextFont
            HackLabel.Text = Name
            HackLabel.TextScaled = true
            HackLabel.Parent = HackFrame
            HackFrame.LayoutOrder = HackLabel.TextBounds.X * -1

            local UIGradient = Instance.new("UIGradient")
            UIGradient.Color = ColorSequence.new({
                ColorSequenceKeypoint.new(0, Color3.fromRGB(255, 0, 0)),
                ColorSequenceKeypoint.new(0.166, Color3.fromRGB(255, 255, 0)),
                ColorSequenceKeypoint.new(0.322, Color3.fromRGB(0, 255, 0)),
                ColorSequenceKeypoint.new(0.498, Color3.fromRGB(0, 255, 255)),
                ColorSequenceKeypoint.new(0.664, Color3.fromRGB(0, 0, 255)),
                ColorSequenceKeypoint.new(0.833, Color3.fromRGB(255, 0, 255)),
                ColorSequenceKeypoint.new(1, Color3.fromRGB(255, 0, 0)),
            })
            UIGradient.Parent = HackLabel

            UpdateLayout()

            while HackListRGBText and not StopScript do
                local Tween = TweenService:Create(UIGradient, TweenInfo.new(3, Enum.EasingStyle.Linear), {Offset = Vector2.new(1, 0)})
                Tween:Play()
                Tween.Completed:Wait()
                UIGradient.Offset = Vector2.new(HackLabel.Size.X.Scale * -1, 0)
            end
        end)
    end

    function RemoveHackFromList(Name)
        task.spawn(function()
            Name = tostring(Name)
            if not Name then return end

            local HackFrame = HackListFrame:FindFirstChild(Name .. "Frame")
            if not HackFrame then return end

            MovingLabels[HackFrame] = true

            local Info = TweenInfo.new(0.5, Enum.EasingStyle.Quad, Enum.EasingDirection.In)
            local Goal = {Position = UDim2.fromScale(1, HackFrame.Position.Y.Scale)}
            local Tween = TweenService:Create(HackFrame, Info, Goal)
            Tween:Play()
            UpdateLayout()
            Tween.Completed:Wait()

            MovingLabels[HackFrame] = nil
            HackFrame:Destroy()
        end)
    end
end

function CreateButton(Properties)
	local Button = Instance.new("TextButton")
	Button.BackgroundColor3 = Properties.BackgroundColor or Color3.fromRGB(20, 20, 20)
	Button.Name = Properties.Name or "Button"
	Button.ZIndex = Properties.ZIndex or 1
	Button.Size = Properties.Size or UDim2.fromScale(0.85, 0.1)
	Button.BorderSizePixel = 0
    Button.AutoButtonColor = false
    Button.TextColor3 = Color3.fromRGB(255, 255, 255)
    Button.Text = Properties.Text or "nil"
    Button.Font = Enum.Font:FromName(TextFont) or Enum.Font.SourceSansPro
    Button.TextXAlignment = Enum.TextXAlignment.Left
    Button.TextScaled = true
    Button.Parent = Properties.Parent or SettingsMenu.ScrollingFrame

    local ButtonUIPadding = Instance.new("UIPadding")
    ButtonUIPadding.PaddingTop = UDim.new(0.2, 0)
    ButtonUIPadding.PaddingBottom = UDim.new(0.2, 0)
    ButtonUIPadding.PaddingLeft = UDim.new(0.025, 0)
    ButtonUIPadding.PaddingRight = UDim.new(0.025, 0)
    ButtonUIPadding.Parent = Button

	Button:SetAttribute("Button", true)
	Button:SetAttribute("Tags", Properties.Tags or "")

	local ButtonUICorner = Instance.new("UICorner")
	ButtonUICorner.CornerRadius = UDim.new(0.25, 0)
    ButtonUICorner.Parent = Button

	local MouseTouching = false

	Button.MouseEnter:Connect(function()
		MouseTouching = true
		TweenService:Create(Button, TweenInfo.new(0.25, Enum.EasingStyle.Quad), {BackgroundColor3 = Properties.HoverColor or Color3.fromRGB(40, 40, 40)}):Play()
		task.delay(Properties.InfoHoverTime or 0.25, function()
			if not MouseTouching or not Properties or not Properties.Info or Properties.Info == "" or not HasAZ(Properties.Info) then return end

			ShowHoverInfo(Properties.Info)
		end)
	end)
	
	local PrevBackgroundColor = Button.BackgroundColor3

	Button.MouseLeave:Connect(function()
		MouseTouching = false
		TweenService:Create(Button, TweenInfo.new(0.25, Enum.EasingStyle.Quad), {BackgroundColor3 = PrevBackgroundColor}):Play()
		
		HideHoverInfo()
	end)

	Button.MouseButton1Down:Connect(function()
		TweenService:Create(Button, TweenInfo.new(0.1, Enum.EasingStyle.Quad), {BackgroundColor3 = PrevBackgroundColor}):Play()
	end)

	Button.MouseButton1Up:Connect(function()
		TweenService:Create(Button, TweenInfo.new(0.1, Enum.EasingStyle.Quad), {BackgroundColor3 = Properties.HoverColor or Color3.fromRGB(40, 40, 40)}):Play()
	end)

	local Args = {
		MainFrame = Button,
		Frame = Button,
		Button = Button,
        Btn = Button,
	}

	Button.MouseButton1Click:Connect(function()
		local ClickSFX = Instance.new("Sound")
		ClickSFX.Volume = 0.5
		ClickSFX.SoundId = "rbxassetid://552900451"
        ClickSFX.Parent = SoundsFolder
		ClickSFX:Play()
		ClickSFX.Ended:Once(function()
			ClickSFX:Destroy()
		end)
		if Properties.Function then
			Properties.Function(Args)
		elseif Properties.MouseButton1Click then
			Properties.MouseButton1Click(Args)
		end
	end)
	
	Button.MouseButton2Click:Connect(function()
		if Properties.Function2 then
			ClearSettings()
			SettingsMenu.TopBar.Text = Properties.Text
			Properties.Function2()
			SettingsMenu.TopBar.Visible = not SettingsMenu.TopBar.Visible
        elseif Properties.MouseButton2Click then
            ClearSettings()
			SettingsMenu.TopBar.Text = Properties.Text
			Properties.MouseButton2Click()
			SettingsMenu.TopBar.Visible = not SettingsMenu.TopBar.Visible
		end
	end)

	local Functions = {
		Btn = Button,
		MainFrame = Button,
		Button = Button,
        TextButton = Button,
		Frame = Button,
	}

    ToggleFunctions[Properties.Text] = Properties.Function or Properties.MuseButton1Click
	
	function Functions:Toggle(Args)
		if Properties.Function then
			Properties.Function(Args)
        elseif Properties.MouseButton1Click then
            Properties.MouseButton1Click(Args)
		end
	end

	function Functions:Toggle2(Args)
		if Properties.Function2 then
			Properties.Function2(Args)
        elseif Properties.MouseButton1Click then
            Properties.MouseButton1Click(Args)
		end
	end

	return Functions
end

function CreateToggle(Properties)
	local Button = Instance.new("TextButton")
	Button.BackgroundColor3 = Properties.BackgroundColor or Color3.fromRGB(20, 20, 20)
	Button.Name = Properties.Name or "Button"
	Button.Size = Properties.Size or UDim2.fromScale(0.85, 0.1)
	Button.BorderSizePixel = 0
    Button.AutoButtonColor = false
    Button.ZIndex = Properties.ZIndex or (Properties.Parent and Properties.Parent.ZIndex) or SettingsMenu.ScrollingFrame.ZIndex
    Button.TextColor3 = Properties.TextColor or Color3.fromRGB(255, 255, 255)
	Button.Text = Properties.Text or "nil"
	Button.Font = Enum.Font:FromName(TextFont) or Enum.Font.SourceSansPro
    Button.LayoutOrder = Properties.LayoutOrder or 0
    Button.TextXAlignment = Enum.TextXAlignment.Left
    Button.TextScaled = true
    Button.Parent = Properties.Parent or SettingsMenu.ScrollingFrame
    
	Button:SetAttribute("Toggle", true)
	Button:SetAttribute("Tags", Properties.Tags or "")

    local ButtonUIPadding = Instance.new("UIPadding")
    ButtonUIPadding.PaddingTop = UDim.new(0.2, 0)
    ButtonUIPadding.PaddingBottom = UDim.new(0.2, 0)
    ButtonUIPadding.PaddingLeft = UDim.new(0.025, 0)
    ButtonUIPadding.PaddingRight = UDim.new(0.025, 0)
    ButtonUIPadding.Parent = Button

	local ButtonUICorner = Instance.new("UICorner")
	ButtonUICorner.CornerRadius = UDim.new(0.25, 0)
    ButtonUICorner.Parent = Button

	local ButtonEnabledIndicator = Instance.new("Frame")
	if Properties.EnabledIndicatorDefault or Properties.IndicatorDefault or Properties.Default or Properties.EnabledDefault then
		ButtonEnabledIndicator.BackgroundColor3 = GuiColors.EnabledIndicatorOn
	else
		ButtonEnabledIndicator.BackgroundColor3 = GuiColors.EnabledIndicatorOff
	end
	ButtonEnabledIndicator.Size = UDim2.fromScale(0.015, 1.2)
	ButtonEnabledIndicator.Position = UDim2.fromScale(1, -0.1)
	ButtonEnabledIndicator.Name = "ButtonEnabledIndicator"
	ButtonEnabledIndicator.BorderSizePixel = 0
	ButtonEnabledIndicator.ZIndex = Button.ZIndex
    ButtonEnabledIndicator.Parent = Button

	local ButtonEnabledIndicatorUICorner = Instance.new("UICorner")
	ButtonEnabledIndicatorUICorner.CornerRadius = UDim.new(1, 0)
    ButtonEnabledIndicatorUICorner.Parent = ButtonEnabledIndicator

	local MouseTouching = false

	Button.MouseEnter:Connect(function()
		MouseTouching = true
		TweenService:Create(Button, TweenInfo.new(0.25, Enum.EasingStyle.Quad), {BackgroundColor3 = GuiColors.ButtonHover}):Play()
		task.delay(Properties.InfoHoverTime or 0.25, function()
			if not MouseTouching or not Properties or Properties.Info == "" or not HasAZ(Properties.Info) then return end

			ShowHoverInfo(Properties.Info)
		end)
	end)
	Button.MouseLeave:Connect(function()
		MouseTouching = false
		TweenService:Create(Button, TweenInfo.new(0.25, Enum.EasingStyle.Quad), {BackgroundColor3 = GuiColors.Button}):Play()

		HideHoverInfo()
	end)
	Button.MouseButton1Click:Connect(function()
		local ClickSFX = Instance.new("Sound")
		ClickSFX.Volume = 0.5
		ClickSFX.SoundId = "rbxassetid://552900451"
        ClickSFX.Parent = SoundsFolder
		ClickSFX:Play()
		ClickSFX.Ended:Once(function()
			ClickSFX:Destroy()
		end)
		if Properties.Function then
			Properties.Function()
		elseif Properties.MouseButton1Click then
			Properties.MouseButton1Click()
		end
	end)
	Button.MouseButton1Down:Connect(function()
		TweenService:Create(Button, TweenInfo.new(0.1, Enum.EasingStyle.Quad), {BackgroundColor3 = GuiColors.Button}):Play()
	end)
	Button.MouseButton1Up:Connect(function()
		TweenService:Create(Button, TweenInfo.new(0.1, Enum.EasingStyle.Quad), {BackgroundColor3 = GuiColors.ButtonHover}):Play()
	end)
	Button.MouseButton2Click:Connect(function()
		if Properties.Function2 then
			ClearSettings()
			SettingsMenu.TopBar.Text = Properties.Text
			Properties.Function2()
			SettingsMenu.TopBar.Visible = not SettingsMenu.TopBar.Visible
		elseif Properties.MouseButton2Click then
			ClearSettings()
			SettingsMenu.TopBar.Text = Properties.Text
			Properties.MouseButton2Click()
			SettingsMenu.TopBar.Visible = not SettingsMenu.TopBar.Visible
		end
	end)

	local Functions = {
		Btn = Button,
		Button = Button,
		MainFrame = Button,
		Frame = Button,
	}

    if Properties.Text then
        local Text = string.gsub(Properties.Text, " ", "")
        ToggleFunctions[Text] = Properties.Function or Properties.MouseButton1Click
    end

	function Functions:Toggle(Args)
		if Properties.Function then
			Properties.Function(Args)
		elseif Properties.MouseButton1Click then
			Properties.MouseButton1Click(Args)
		end
	end

	function Functions:Toggle2(Args)
		if Properties.Function2 then
			Properties.Function2(Args)
		elseif Properties.MouseButton2Click then
			Properties.MouseButton2Click(Args)
		end
	end

	return Functions
end

function CreateTextbox(Properties)
	local Frame = Instance.new("Frame")
	Frame.BackgroundColor3 = GuiColors.Button
	Frame.BorderSizePixel = 0
	Frame.Name = Properties.Name or Properties.TextboxText or Properties.Text or Properties.ButtonText or Properties.TextLabelText or Properties.LabelText or Properties.PlaceholderText or "TextboxMainFrame"
	Frame.LayoutOrder = Properties.LayoutOrder or 0
	Frame.ZIndex = Properties.ZIndex or (Properties.Parent and Properties.Parent.ZIndex) or SettingsMenu.ScrollingFrame.ZIndex
	Frame.Size = Properties.Size or UDim2.fromScale(0.85, 0.1)
    Frame.Parent = Properties.Parent or SettingsMenu.ScrollingFrame

	Frame:SetAttribute("Textbox", true)
	Frame:SetAttribute("Tags", Properties.Tags or "")

	local FrameUICorner = Instance.new("UICorner")
	FrameUICorner.CornerRadius = UDim.new(0.25, 0)
    FrameUICorner.Parent = Frame

	local Textbox = Instance.new("TextBox")
	Textbox.BackgroundColor3 = GuiColors.TextboxBackground
    Textbox.BorderSizePixel = 0
	Textbox.Font = TextFont
	Textbox.PlaceholderText = Properties.PlaceholderText or ""
	Textbox.TextColor3 = Properties.TextColor or Color3.fromRGB(255, 255, 255)
	Textbox.Text = Properties.TextboxText or Properties.Text or ""
	Textbox.Name = "Textbox"
	Textbox.ZIndex = Frame.ZIndex
	Textbox.Size =  UDim2.fromScale(0.45, 0.75)
	Textbox.Position = UDim2.fromScale(0.025, 0.125)
	Textbox.ClearTextOnFocus = false
	Textbox.TextScaled = true
    Textbox.Parent = Frame

    local TextboxUICorner = Instance.new("UICorner")
	TextboxUICorner.CornerRadius = UDim.new(0.25, 0)
    TextboxUICorner.Parent = Textbox

    local TextboxUIPadding = Instance.new("UIPadding")
    TextboxUIPadding.PaddingTop = UDim.new(0.1, 0)
    TextboxUIPadding.PaddingBottom = UDim.new(0.1, 0)
    TextboxUIPadding.PaddingLeft = UDim.new(0.025, 0)
    TextboxUIPadding.PaddingRight = UDim.new(0.025, 0)
    TextboxUIPadding.Parent = Textbox

	Textbox.Focused:Connect(function()
		TidalWaveFocused = true
		if Properties.Focused then
			Properties.Focused({
				Textbox = Textbox,
				MainFrame = Frame,
				Frame = Frame,
				TextboxText = Textbox.Text,
				Text = Textbox.Text,
			})
		end
	end)

	Textbox.FocusLost:Connect(function(Enter, Input)
		TidalWaveFocused = false
		if Properties.FocusLost then
			Properties.FocusLost({
				Textbox = Textbox,
				MainFrame = Frame,
				Frame = Frame,
				TextboxText = Textbox.Text,
				Text = Textbox.Text,
				EnterPressed = Enter,
				Enter = Enter,
				InputThatCausedFocusLost = Input,
				Input = Input,
			})
		end
	end)
	
	local ButtonFrame = nil
	local Button = nil

	if Properties.NoButton then
		Textbox.Size = UDim2.fromScale(0.95, 0.75)
	else
		ButtonFrame = Instance.new("ImageButton")
		ButtonFrame.BackgroundColor3 = Color3.fromRGB(20, 20, 20)
		ButtonFrame.BorderSizePixel = 0
		ButtonFrame.ZIndex = Frame.ZIndex
		ButtonFrame.Size = UDim2.fromScale(0.475, 0.75)
		ButtonFrame.Position = UDim2.fromScale(0.5, 0.125)
		ButtonFrame.Name = "ButtonFrame"
		ButtonFrame.AutoButtonColor = false
        ButtonFrame.Parent = Frame

		local ButtonFrameUICorner = Instance.new("UICorner")
		ButtonFrameUICorner.CornerRadius = UDim.new(0.25, 0)
        ButtonFrameUICorner.Parent = ButtonFrame

		Button = Instance.new("TextButton")
		Button.BackgroundTransparency = 1
		Button.ZIndex = Frame.ZIndex
		Button.Size = UDim2.fromScale(1, 0.75)
		Button.Position = UDim2.fromScale(0, 0.125)
		Button.TextColor3 = Color3.fromRGB(255, 255, 255)
		Button.Text = Properties.ButtonText or Properties.TextLabelText or Properties.LabelText or "Enable"
		Button.Name = "Button"
		Button.Font = TextFont
		Button.TextScaled = true
		Button.Active = false
		Button.Interactable = false
        Button.Parent = ButtonFrame
	end

	local ButtonEnabledIndicator = nil

	if Properties.EnabledIndicator or Properties.ButtonEnabledIndicator then
		ButtonEnabledIndicator = Instance.new("Frame")
		if Properties.EnabledIndicatorDefault then
			ButtonEnabledIndicator.BackgroundColor3 = GuiColors.EnabledIndicatorOn
		else
			ButtonEnabledIndicator.BackgroundColor3 = GuiColors.EnabledIndicatorOff
		end
		ButtonEnabledIndicator.Size = UDim2.fromScale(0.015, 0.8)
	    ButtonEnabledIndicator.Position = UDim2.fromScale(0.975, 0.1)
		ButtonEnabledIndicator.Name = "ButtonEnabledIndicator"
		ButtonEnabledIndicator.BorderSizePixel = 0
		ButtonEnabledIndicator.ZIndex = Frame.ZIndex
        ButtonEnabledIndicator.Parent = Frame

		local ButtonEnabledIndicatorUICorner = Instance.new("UICorner")
		ButtonEnabledIndicatorUICorner.CornerRadius = UDim.new(1, 0)
        ButtonEnabledIndicatorUICorner.Parent = ButtonEnabledIndicator
	end

	if ButtonFrame and Button then
		ButtonFrame.MouseButton1Click:Connect(function()
			local ClickSFX = Instance.new("Sound")
			ClickSFX.Volume = 0.5
			ClickSFX.SoundId = "rbxassetid://552900451"
            ClickSFX.Parent = SoundsFolder
			ClickSFX:Play()
			ClickSFX.Ended:Once(function()
				ClickSFX:Destroy()
			end)
			local Args = {
				Textbox = Textbox,
				MainFrame = Frame,
				Frame = Frame,
				TextboxText = Textbox.Text,
				Text = Textbox.Text,
			}
			if Properties.Function then
				Properties.Function(Args)
			elseif Properties.MouseButton1Click then
				Properties.MouseButton1Click(Args)
			end
		end)
		
		ButtonFrame.MouseButton2Click:Connect(function()
			local Args = {
				Textbox = Textbox,
				MainFrame = Frame,
				Frame = Frame,
				TextboxText = Textbox.Text,
				Text = Textbox.Text,
			}
			if Properties.Function2 then
				ClearSettings()
				SettingsMenu.TopBar.Text = Properties.Text or Properties.TextboxText or Properties.ButtonText or Properties.TextLabelText or Properties.LabelText or Properties.PlaceholderText
				Properties.Function2(Args)
				SettingsMenu.TopBar.Visible = not SettingsMenu.TopBar.Visible
			elseif Properties.MouseButton2Click then
				ClearSettings()
				SettingsMenu.TopBar.Text = Properties.Text or Properties.TextboxText or Properties.ButtonText or Properties.TextLabelText or Properties.LabelText or Properties.PlaceholderText
				Properties.MouseButton2Click(Args)
				SettingsMenu.TopBar.Visible = not SettingsMenu.TopBar.Visible
			end
		end)

		local PrevBackgroundColor = ButtonFrame.BackgroundColor3
		
		ButtonFrame.MouseEnter:Connect(function()
			TweenService:Create(ButtonFrame, TweenInfo.new(0.25, Enum.EasingStyle.Quad), {BackgroundColor3 = Properties.HoverColor or Color3.fromRGB(40, 40, 40)}):Play()
		end)
		
		ButtonFrame.MouseLeave:Connect(function()
			TweenService:Create(ButtonFrame, TweenInfo.new(0.25, Enum.EasingStyle.Quad), {BackgroundColor3 = PrevBackgroundColor}):Play()
		end)

		ButtonFrame.MouseButton1Down:Connect(function()
			TweenService:Create(ButtonFrame, TweenInfo.new(0.1, Enum.EasingStyle.Quad), {BackgroundColor3 = PrevBackgroundColor}):Play()
		end)

		ButtonFrame.MouseButton1Up:Connect(function()
			TweenService:Create(ButtonFrame, TweenInfo.new(0.1, Enum.EasingStyle.Quad), {BackgroundColor3 = Color3.fromRGB(40, 40, 40)}):Play()
		end)
	end

	local TouchingFrame = false

	Frame.MouseEnter:Connect(function()
		TouchingFrame = true
		task.delay(Properties.InfoHoverTime or 0.25, function()
			if not TouchingFrame or not Properties.Info or Properties.Info == "" or not HasAZ(Properties.Info) then return end

			ShowHoverInfo(Properties.Info)
		end)
	end)
	Frame.MouseLeave:Connect(function()
		TouchingFrame = false
		HideHoverInfo()
	end)

	local Functions = {
		Textbox = Textbox,
		MainFrame = Frame,
		Frame = Frame,
	}
	
	function Functions:Toggle(Args)
		local Functions = {
			Textbox = Textbox,
			MainFrame = Frame,
			Frame = Frame,
			Text = Textbox.Text,
			TextboxText = Textbox.Text,
		}

		if Properties.Function then
			local AllArgs = Functions
			if Args then
				for i, v in pairs(Args) do
					table.insert(AllArgs, v)
				end
			end
			Properties.Function(AllArgs)
		elseif Properties.MouseButton1Click then
			local AllArgs = Functions
			if Args then
				for i, v in pairs(Args) do
					table.insert(AllArgs, v)
				end
			end
			Properties.MouseButton1Click(AllArgs)
		end
	end
	
	return Functions
end

function ToggleButtonColor(Button, Value)
	if Button and typeof(Button) == "Instance" then
		local ButtonEnabledIndicator = Button:FindFirstChild("ButtonEnabledIndicator", true)
		if not ButtonEnabledIndicator then return end
		if Value ~= nil then
			if Value then
				TweenService:Create(ButtonEnabledIndicator, TweenInfo.new(0.25, Enum.EasingStyle.Quad), {BackgroundColor3 = GuiColors.EnabledIndicatorOn}):Play()
			else
				TweenService:Create(ButtonEnabledIndicator, TweenInfo.new(0.25, Enum.EasingStyle.Quad), {BackgroundColor3 = GuiColors.EnabledIndicatorOff}):Play()
			end
		end
	elseif Button and typeof(Button) == "table" and Button.MainFrame and typeof(Button.MainFrame) == "Instance" then
		local ButtonEnabledIndicator = Button.MainFrame:FindFirstChild("ButtonEnabledIndicator", true)
		if not ButtonEnabledIndicator then return end
		if Value ~= nil then
			if Value then
				TweenService:Create(ButtonEnabledIndicator, TweenInfo.new(0.25, Enum.EasingStyle.Quad), {BackgroundColor3 = GuiColors.EnabledIndicatorOn}):Play()
			else
				TweenService:Create(ButtonEnabledIndicator, TweenInfo.new(0.25, Enum.EasingStyle.Quad), {BackgroundColor3 = GuiColors.EnabledIndicatorOff}):Play()
			end
		end
	end
end

function GetClosestPlayer()
	local NearestPlayerDistance = 1000000
	local NearestPlayer = nil
	for i, Player in pairs(Players:GetPlayers()) do
		if Player == Plr then continue end
		local Character = GetChar(Player)
		if not Character then continue end
		local HumanoidRootPart = GetRootPart(Character)
		if not HumanoidRootPart then continue end
		local Char = GetChar(Plr)
		if not Char then continue end
		local RootPart = GetRootPart(Char)
		if not RootPart then continue end
		if (HumanoidRootPart.Position - Plr.Character.PrimaryPart.Position).Magnitude < NearestPlayerDistance then
			NearestPlayerDistance = (Player.Character.PrimaryPart.Position - Plr.Character.PrimaryPart.Position).Magnitude
			NearestPlayer = Player
		end
	end
	return NearestPlayer
end
function GetClosestModelToMiddleOfScreen(Folder, ScreenX, ScreenY)
	local ClosestModelDistance = 1000000
	local ClosestModel = nil
	for i, Model in pairs(Folder:GetChildren()) do
		if Model:IsA("Model") then
			local ModelRootPart = GetRootPart(Model)
			if not ModelRootPart then continue end
			local Char = GetChar(Plr)
			if not Char then continue end
			local RootPart = GetRootPart(Char)
			if not RootPart then continue end
			local Vector, OnScreen = Camera:WorldToViewportPoint(ModelRootPart.Position)
			if (RootPart.Position - ModelRootPart.Position).Magnitude < ClosestModelDistance and OnScreen and Vector.X > Camera.ViewportSize.X * (0.5 - ScreenX) and Vector.X < Camera.ViewportSize.X * (0.5 + ScreenX) and Vector.Y > Camera.ViewportSize.Y * (0.5 - ScreenY) and Vector.Y < Camera.ViewportSize.Y * (0.5 + ScreenY) then
				ClosestModelDistance = (RootPart.Position - ModelRootPart.Position).Magnitude
				ClosestModel = Model
			end
		end
	end
	return ClosestModel
end

function GetClosestPartToMiddleOfScreen(Folder, ScreenX, ScreenY)
	local ClosestPartDistance = 1000000
	local ClosestPart = nil
	for i, Part in pairs(Folder:GetChildren()) do
		if Part:IsA("BasePart") then 
			local Char = GetChar(Plr)
			if not Char then continue end
			local RootPart = GetRootPart(Char)
			if not RootPart then continue end
			local Vector, OnScreen = Camera:WorldToViewportPoint(RootPart.Position)
			if (RootPart.Position - Part.Position).Magnitude < ClosestPartDistance and OnScreen and Vector.X > Camera.ViewportSize.X * (0.5 - ScreenX) and Vector.X < Camera.ViewportSize.X * (0.5 + ScreenX) and Vector.Y > Camera.ViewportSize.Y * (0.5 - ScreenY) and Vector.Y < Camera.ViewportSize.Y * (0.5 + ScreenY) then
				ClosestPartDistance = (RootPart.Position - Part.Position).Magnitude
				ClosestPart = Part
			end
		end
	end
	return ClosestPart
end

function GetClosestPlayerToMiddleOfScreen(ScreenX, ScreenY)
	local NearestPlayerDistance = math.huge
	local NearestPlayer
	for i, Player in pairs(Players:GetPlayers()) do
		if Player == Plr then continue end

		local PlayerChar = GetChar(Player)
		local PlayerRootPart = GetRootPart(PlayerChar)

		local Char = GetChar(Plr)
		local RootPart = GetRootPart(Char)

        if not (PlayerChar and PlayerRootPart and Char and RootPart) then continue end

		local Vector, OnScreen = Camera:WorldToViewportPoint(PlayerRootPart.Position)

		if (RootPart.Position - PlayerRootPart.Position).Magnitude < NearestPlayerDistance and Vector.X > Camera.ViewportSize.X * (0.5 - ScreenX) and Vector.X < Camera.ViewportSize.X * (0.5 + ScreenX) and Vector.Y > Camera.ViewportSize.Y * (0.5 - ScreenY) and Vector.Y < Camera.ViewportSize.Y * (0.5 + ScreenY) then 
			NearestPlayer = Player
			NearestPlayerDistance = (RootPart.Position - PlayerRootPart.Position).Magnitude
		end
	end
	return NearestPlayer
end

function CreateSlider(Properties)
	local Frame = Instance.new("Frame")
	Frame.BorderSizePixel = 0
	Frame.BackgroundTransparency = 1
	Frame.ZIndex = Properties.ZIndex or 2
	Frame.Size = Properties.Size or UDim2.fromScale(0.85, 0.1)
	Frame.Name = Properties.Text or "SliderMainFrame"
	Frame.LayoutOrder = Properties.LayoutOrder or 2
    Frame.Parent = Properties.Parent or SettingsMenu.ScrollingFrame
	
	local TextFrame = Instance.new("Frame")
	TextFrame.BackgroundColor3 = Color3.fromRGB(20, 20, 20)
	TextFrame.BackgroundTransparency = 0.25
	TextFrame.BorderSizePixel = 0
	TextFrame.Size = UDim2.fromScale(0.25, 1)
	TextFrame.Name = "LabelFrame"
	TextFrame.Parent = Frame

	local TextFrameUICorner = Instance.new("UICorner")
	TextFrameUICorner.CornerRadius = UDim.new(0.3, 0)
    TextFrameUICorner.Parent = TextFrame
	
	local TextLabel = Instance.new("TextLabel")
	TextLabel.BackgroundColor3 = Color3.fromRGB(20, 20, 20)
	TextLabel.BackgroundTransparency = 0.25
	TextLabel.BorderSizePixel = 0
	TextLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
	TextLabel.Size = UDim2.fromScale(0.9, 0.4)
	TextLabel.ZIndex = Frame.ZIndex
	TextLabel.Name = "Label"
	TextLabel.Text = Properties.Text or "nil"
	TextLabel.Position = UDim2.fromScale(0.05, 0.3)
	TextLabel.TextScaled = true
    TextLabel.Parent = TextFrame
	
	local SliderFrame = Instance.new("Frame")
	SliderFrame.BorderSizePixel = 0
	SliderFrame.BackgroundTransparency = 1
	SliderFrame.ZIndex = Frame.ZIndex
	SliderFrame.Size = UDim2.fromScale(0.52, 0.3)
	SliderFrame.Position = UDim2.fromScale(0.48, 0.35)
	SliderFrame.Name = "SliderFrame"
    SliderFrame.Parent = Frame
	
	local SliderButton = Instance.new("ImageButton")
	SliderButton.BackgroundTransparency = 1
	SliderButton.BorderSizePixel = 0
	SliderButton.Size = UDim2.fromScale(0.043, 0.75)
	SliderButton.Position = UDim2.fromScale(math.clamp((math.clamp(Properties.Default, Properties.Min, Properties.Max) - Properties.Min) / (Properties.Max - Properties.Min), 0, 0.998 - SliderButton.Size.X.Scale), 0)
	SliderButton.ZIndex = Frame.ZIndex + 1
	SliderButton.Name = "Slider"
	SliderButton.Image = "rbxassetid://5552526748"
	SliderButton.ImageColor3 = Color3.fromRGB(20, 135, 255)
    SliderButton.Parent = SliderFrame
	
	local SliderBarBackground = Instance.new("Frame")
	SliderBarBackground.BackgroundColor3 = Color3.fromRGB(20, 20, 20)
	SliderBarBackground.BorderSizePixel = 0
	SliderBarBackground.Size = UDim2.fromScale(1, 0.5)
	SliderBarBackground.Position = UDim2.fromScale(0, 0.125)
	SliderBarBackground.Name = "SliderBarBackground"
	SliderBarBackground.ZIndex = Frame.ZIndex
    SliderBarBackground.Parent = SliderFrame
	
	local SliderBarBackgroundUICorner = Instance.new("UICorner")
	SliderBarBackgroundUICorner.CornerRadius = UDim.new(1, 0)
    SliderBarBackgroundUICorner.Parent = SliderBarBackground
	
	local NumberDisplayFrame = Instance.new("Frame")
	NumberDisplayFrame.BackgroundColor3 = Color3.fromRGB(20, 20, 20)
	NumberDisplayFrame.BorderSizePixel = 0
	NumberDisplayFrame.Size = UDim2.fromScale(0.15, 0.5)
	NumberDisplayFrame.Position = UDim2.fromScale(0.3, 0.25)
	NumberDisplayFrame.ZIndex = Frame.ZIndex
	NumberDisplayFrame.Name = "NumberDisplayFrame"
    NumberDisplayFrame.Parent = Frame
	
	local NumberDisplayFrameUICorner = Instance.new("UICorner")
	NumberDisplayFrameUICorner.CornerRadius = UDim.new(0.5, 0)
    NumberDisplayFrameUICorner.Parent = NumberDisplayFrame
	
	local NumberDisplay = Instance.new("TextBox")
	NumberDisplay.BackgroundTransparency = 1
	NumberDisplay.TextColor3 = Color3.fromRGB(255, 255, 255)
	NumberDisplay.Size = UDim2.fromScale(0.9, 0.6)
	NumberDisplay.Position = UDim2.fromScale(0.05, 0.2)
	NumberDisplay.Text = tostring(Properties.Default) or "1"
	NumberDisplay.Name = "NumberDisplay"
	NumberDisplay.ZIndex = Frame.ZIndex
	NumberDisplay.ClearTextOnFocus = false
	NumberDisplay.TextScaled = true
    NumberDisplay.Parent = NumberDisplayFrame
	
	local PrevVal = Properties.Default or tonumber(NumberDisplay.Text) or 1
	
	NumberDisplay.FocusLost:Connect(function() 
        local Min = Properties.Min
        local Max = Properties.Max
        local Number = tonumber(NumberDisplay.Text) or PrevVal or Min

        local Val = math.clamp(Number, Min, Max)

        if Properties.FocusLost then
            Properties.FocusLost(Number)
        elseif Properties.Function2 then
            Properties.Function2(Number)
        end

        local Position = math.clamp((Val - Min) / (Max - Min), 0, 0.998 - SliderButton.Size.X.Scale)
        SliderButton.Position = UDim2.fromScale(Position, 0)

        NumberDisplay.Text = tostring(Number)
    end)

	local UIDragDetector = Instance.new("UIDragDetector")
	UIDragDetector.DragStyle = Enum.UIDragDetectorDragStyle.TranslateLine
	UIDragDetector.ResponseStyle = Enum.UIDragDetectorResponseStyle.Scale
	UIDragDetector.BoundingUI = SliderFrame
    UIDragDetector.Parent = SliderButton
	
	UIDragDetector.DragContinue:Connect(function()
        local Min = Properties.Min
        local Max = Properties.Max
        local Val = SliderButton.Position.X.Scale * (1.002 + SliderButton.Size.X.Scale)
        Val = math.clamp(Min + (Max - Min) * Val, Min, Max)
		NumberDisplay.Text = tostring(SubstituteNumber(Val, 3))
		if Properties.Dragged then
			Properties.Dragged(Val)
		elseif Properties.Function then
			Properties.Function(Val)
		end
	end)
	
	return Frame
end

function CreateColorPicker(Properties)
	local Background = Instance.new("Frame")
	Background.BorderSizePixel = 0
	Background.BackgroundColor3 = GuiColors.Button
	Background.Size = Properties.Size or UDim2.fromScale(0.85, 0.85)
	Background.Position = Properties.Position or Properties.Pos or UDim2.fromScale(0.4045, 0.248)
	Background.Active = true
	Background.ZIndex = Properties.ZIndex or 1
	Background.LayoutOrder = Properties.LayoutOrder or 3
	Background.Name = "Background"
    Background.Parent = Properties.Parent or SettingsMenu.ScrollingFrame

	local BackgroundUICorner = Instance.new("UICorner")
	BackgroundUICorner.CornerRadius = UDim.new(0.05, 0)
    BackgroundUICorner.Parent = Background

	local ColorPickerBackground = Instance.new("ImageButton")
	ColorPickerBackground.AutoButtonColor = false
	ColorPickerBackground.Active = true
	ColorPickerBackground.BackgroundTransparency = 1
	ColorPickerBackground.Image = "rbxassetid://1072518406"
	ColorPickerBackground.Size = UDim2.fromScale(0.45, 0.62)
	ColorPickerBackground.Position = UDim2.fromScale(0.487, 0.044)
	ColorPickerBackground.BorderSizePixel = 0
	ColorPickerBackground.ClipsDescendants = true
	ColorPickerBackground.ZIndex = Background.ZIndex
	ColorPickerBackground.Name = "ColorPickerBackground"
    ColorPickerBackground.Parent = Background
	
	local ColorPickerArrow = Instance.new("Frame")
	ColorPickerArrow.BackgroundTransparency = 1
	ColorPickerArrow.Size = UDim2.fromScale(0.1, 0.1)
	ColorPickerArrow.Position = UDim2.fromScale(0.95, 0.95)
	ColorPickerArrow.Name = "Arrow"
    ColorPickerArrow.Parent = ColorPickerBackground

	local HorizontalArrow = Instance.new("Frame")
	HorizontalArrow.Size = UDim2.fromScale(1, 0.125)
	HorizontalArrow.Position = UDim2.fromScale(0, 0.438)
	HorizontalArrow.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
	HorizontalArrow.BorderSizePixel = 0
	HorizontalArrow.ZIndex = Background.ZIndex
	HorizontalArrow.Name = "HorizontalArrow"
    HorizontalArrow.Parent = ColorPickerArrow

	local VerticalArrow = Instance.new("Frame")
	VerticalArrow.Size = UDim2.fromScale(0.125, 1)
	VerticalArrow.Position = UDim2.fromScale(0.438, 0)
	VerticalArrow.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
	VerticalArrow.BorderSizePixel = 0
	VerticalArrow.ZIndex = Background.ZIndex
	VerticalArrow.Name = "VerticalArrow"
    VerticalArrow.Parent = ColorPickerArrow

	local H, S, V = 0, 0, 1
	local Color = Color3.fromHSV(H, S, V)

	local Function = Properties.Function or Properties.Func or Properties.Hue or Properties.H or Properties.h or Properties.Saturation or Properties.Sat or Properties.S or Properties.s or Properties.Value or Properties.Val or Properties.V or Properties.v or function() end

	local ColorStrip = Instance.new("ImageButton")
	ColorStrip.AutoButtonColor = false
	ColorStrip.Active = true
	ColorStrip.BackgroundTransparency = 1
	ColorStrip.Image = "rbxassetid://1072518502"
	ColorStrip.Size = UDim2.fromScale(0.015, 0.62)
	ColorStrip.Position = UDim2.fromScale(0.96, 0.05)
	ColorStrip.BorderSizePixel = 0
	ColorStrip.ZIndex = Background.ZIndex
	ColorStrip.Name = "ColorStrip"
    ColorStrip.Parent = Background
	
	local Arrow = Instance.new("Frame")
	Arrow.BackgroundTransparency = 1
	Arrow.Name = "Arrow"
	Arrow.Position = UDim2.fromScale(1, -0.05)
	Arrow.Size = UDim2.new(1, 0, 0, 9)
	Arrow.Selectable = false
	Arrow.ZIndex = Background.ZIndex
    Arrow.Parent = ColorStrip

	local Frame1 = Instance.new("Frame")
	Frame1.BorderColor3 = Color3.new(0.105882, 0.164706, 0.207843)
	Frame1.BorderSizePixel = 0
	Frame1.Name = "Frame1"
	Frame1.Position = UDim2.fromOffset(2, 4)
	Frame1.Size = UDim2.fromOffset(1, 1)
	Frame1.ZIndex = Arrow.ZIndex
	Frame1.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
	Frame1.ZIndex = Arrow.ZIndex
    Frame1.Parent = Arrow

	local Frame2 = Instance.new("Frame")
	Frame2.BorderColor3 = Color3.new(0.105882, 0.164706, 0.207843)
	Frame2.BorderSizePixel = 0
	Frame2.Name = "Frame2"
	Frame2.Position = UDim2.fromOffset(3, 3)
	Frame2.Size = UDim2.fromOffset(1, 3)
	Frame2.ZIndex = Arrow.ZIndex
	Frame2.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
	Frame2.ZIndex = Arrow.ZIndex
    Frame2.Parent = Arrow

	local Frame3 = Instance.new("Frame")
	Frame3.BorderColor3 = Color3.new(0.105882, 0.164706, 0.207843)
	Frame3.BorderSizePixel = 0
	Frame3.Name = "Frame3"
	Frame3.Position = UDim2.fromOffset(4, 2)
	Frame3.Size = UDim2.fromOffset(1, 5)
	Frame3.ZIndex = Arrow.ZIndex
	Frame3.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
	Frame3.ZIndex = Arrow.ZIndex
    Frame3.Parent = Arrow

	local Frame4 = Instance.new("Frame")
	Frame4.BorderColor3 = Color3.new(0.105882, 0.164706, 0.207843)
	Frame4.BorderSizePixel = 0
	Frame4.Name = "Frame4"
	Frame4.Position = UDim2.fromOffset(5, 1)
	Frame4.Size = UDim2.fromOffset(1, 7)
	Frame4.ZIndex = Arrow.ZIndex
	Frame4.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
	Frame4.ZIndex = Arrow.ZIndex
    Frame4.Parent = Arrow

	local Frame5 = Instance.new("Frame")
	Frame5.BorderColor3 = Color3.new(0.105882, 0.164706, 0.207843)
	Frame5.BorderSizePixel = 0
	Frame5.Name = "Frame5"
	Frame5.Position = UDim2.fromOffset(6, 0)
	Frame5.Size = UDim2.fromOffset(1, 9)
	Frame5.ZIndex = Arrow.ZIndex
	Frame5.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
	Frame5.ZIndex = Arrow.ZIndex
    Frame5.Parent = Arrow

	local Hue = Instance.new("Frame")
	Hue.BackgroundColor3 = Color3.new(Background.BackgroundColor3.R - 5, Background.BackgroundColor3.G - 5, Background.BackgroundColor3.B - 5)
	Hue.BorderColor3 = Color3.new(0.376471, 0.376471, 0.376471)
	Hue.Name = "Hue"
	Hue.Position = UDim2.fromScale(0.675, 0.7)
	Hue.Size = UDim2.fromScale(0.1, 0.05)
	Hue.ZIndex = Background.ZIndex
    Hue.Parent = Background

	local HueInput = Instance.new("TextBox")
	HueInput.BackgroundTransparency = 1
	HueInput.BorderColor3 = Color3.fromRGB(96, 96, 96)
	HueInput.TextColor3 = Color3.fromRGB(255, 255, 255)
	HueInput.ZIndex = Background.ZIndex
	HueInput.TextXAlignment = Enum.TextXAlignment.Left
	HueInput.ClearTextOnFocus = false
	HueInput.Name = "Input"
	HueInput.Size = UDim2.fromScale(0.9, 0.9)
	HueInput.Position = UDim2.fromScale(0.05, 0.05)
	HueInput.TextScaled = true
	HueInput.Text = "0"
	HueInput.Font = TextFont
    HueInput.Parent = Hue

	local HueTitle = Instance.new("TextLabel")
	HueTitle.BackgroundTransparency = 1
	HueTitle.TextColor3 = Color3.fromRGB(255, 255, 255)
	HueTitle.ZIndex = Background.ZIndex
	HueTitle.Name = "Title"
	HueTitle.Text = "Hue: "
	HueTitle.TextScaled = true
	HueTitle.Size = UDim2.fromScale(0.75, 0.865)
	HueTitle.Position = UDim2.fromScale(-0.75, 0.0675)
	HueTitle.Font = TextFont
    HueTitle.Parent = Hue
	
	local Saturation = Instance.new("Frame")
	Saturation.BackgroundColor3 =  Color3.new(Background.BackgroundColor3.R - 5, Background.BackgroundColor3.G - 5, Background.BackgroundColor3.B - 5)
	Saturation.BackgroundTransparency = 0
	Saturation.BorderColor3 = Color3.new(0.376471, 0.376471, 0.376471)
	Saturation.BorderSizePixel = 1
	Saturation.Name = "Saturation"
	Saturation.Position = UDim2.fromScale(0.675, 0.775)
	Saturation.Size = UDim2.fromScale(0.1, 0.05)
	Saturation.ZIndex = Background.ZIndex
    Saturation.Parent = Background

	local SaturationInput = Instance.new("TextBox")
	SaturationInput.BackgroundTransparency = 1
	SaturationInput.BorderColor3 = Color3.fromRGB(96, 96, 96)
	SaturationInput.TextColor3 = Color3.fromRGB(255, 255, 255)
	SaturationInput.ZIndex = Background.ZIndex
	SaturationInput.TextXAlignment = Enum.TextXAlignment.Left
	SaturationInput.ClearTextOnFocus = false
	SaturationInput.Name = "Input"
	SaturationInput.Size = UDim2.fromScale(0.9, 0.9)
	SaturationInput.Position = UDim2.fromScale(0.05, 0.05)
	SaturationInput.TextScaled = true
	SaturationInput.Text = "0"
	SaturationInput.Font = TextFont
    SaturationInput.Parent = Saturation

	local SaturationTitle = Instance.new("TextLabel")
	SaturationTitle.BackgroundTransparency = 1
	SaturationTitle.TextColor3 = Color3.fromRGB(255, 255, 255)
	SaturationTitle.ZIndex = Background.ZIndex
	SaturationTitle.Name = "Title"
	SaturationTitle.Text = "Sat: "
	SaturationTitle.TextScaled = true
	SaturationTitle.Size = UDim2.fromScale(0.75, 0.865)
	SaturationTitle.Position = UDim2.fromScale(-0.75, 0.0675)
	SaturationTitle.Font = TextFont
    SaturationTitle.Parent = Saturation

	local Val = Instance.new("Frame")
	Val.BackgroundColor3 = Color3.new(Background.BackgroundColor3.R - 5, Background.BackgroundColor3.G - 5, Background.BackgroundColor3.B - 5)
	Val.BackgroundTransparency = 0
	Val.BorderColor3 = Color3.new(0.376471, 0.376471, 0.376471)
	Val.BorderSizePixel = 1
	Val.Name = "Val"
	Val.Position = UDim2.fromScale(0.675, 0.85)
	Val.Size = UDim2.fromScale(0.1, 0.05)
	Val.ZIndex = Background.ZIndex
    Val.Parent = Background

	local ValTitle = Instance.new("TextLabel")
	ValTitle.BackgroundTransparency = 1
	ValTitle.TextColor3 = Color3.fromRGB(255, 255, 255)
	ValTitle.ZIndex = Background.ZIndex
	ValTitle.Name = "Title"
	ValTitle.Text = "Val: "
	ValTitle.TextScaled = true
	ValTitle.Size = UDim2.fromScale(0.75, 0.865)
	ValTitle.Position = UDim2.fromScale(-0.75, 0.0675)
	ValTitle.Font = TextFont
    ValTitle.Parent = Val

	local ValInput = Instance.new("TextBox")
	ValInput.BackgroundTransparency = 1
	ValInput.BorderColor3 = Color3.fromRGB(96, 96, 96)
	ValInput.TextColor3 = Color3.fromRGB(255, 255, 255)
	ValInput.ZIndex = Background.ZIndex
	ValInput.TextXAlignment = Enum.TextXAlignment.Left
	ValInput.ClearTextOnFocus = false
	ValInput.Name = "Input"
	ValInput.Size = UDim2.fromScale(0.9, 0.9)
	ValInput.Position = UDim2.fromScale(0.05, 0.05)
	ValInput.TextScaled = true
	ValInput.Text = "255"
	ValInput.Font = TextFont
    ValInput.Parent = Val

	local Hex = Instance.new("Frame")
	Hex.BackgroundColor3 = Color3.new(Background.BackgroundColor3.R - 5, Background.BackgroundColor3.G - 5, Background.BackgroundColor3.B - 5)
	Hex.BackgroundTransparency = 0
	Hex.BorderColor3 = Color3.new(0.376471, 0.376471, 0.376471)
	Hex.BorderSizePixel = 1
	Hex.Name = "Hex"
	Hex.Position = UDim2.fromScale(0.675, 0.92)
	Hex.Size = UDim2.fromScale(0.3, 0.05)
	Hex.ZIndex = Background.ZIndex
    Hex.Parent = Background

	local HexTitle = Instance.new("TextLabel")
	HexTitle.BackgroundTransparency = 1
	HexTitle.TextColor3 = Color3.fromRGB(255, 255, 255)
	HexTitle.ZIndex = Background.ZIndex
	HexTitle.Name = "Title"
	HexTitle.Text = "Hex: "
	HexTitle.TextScaled = true
	HexTitle.Size = UDim2.fromScale(0.229, 0.865)
	HexTitle.Position = UDim2.fromScale(-0.229, 0.0675)
	HexTitle.Font = TextFont
    HexTitle.Parent = Hex

	local HexInput = Instance.new("TextBox")
	HexInput.BackgroundTransparency = 1
	HexInput.BorderColor3 = Color3.fromRGB(96, 96, 96)
	HexInput.TextColor3 = Color3.fromRGB(255, 255, 255)
	HexInput.ZIndex = Background.ZIndex
	HexInput.TextXAlignment = Enum.TextXAlignment.Left
	HexInput.ClearTextOnFocus = false
	HexInput.Name = "Input"
	HexInput.Size = UDim2.fromScale(0.9, 0.9)
	HexInput.Position = UDim2.fromScale(0.05, 0.05)
	HexInput.TextScaled = true
	HexInput.Text = "#ffffff"
	HexInput.Font = TextFont
    HexInput.Parent = Hex

	local Red = Instance.new("Frame")
	Red.BackgroundColor3 = Color3.new(Background.BackgroundColor3.R - 5, Background.BackgroundColor3.G - 5, Background.BackgroundColor3.B - 5)
	Red.BackgroundTransparency = 0
	Red.BorderColor3 = Color3.new(0.376471, 0.376471, 0.376471)
	Red.BorderSizePixel = 1
	Red.Name = "Red"
	Red.Position = UDim2.fromScale(0.875, 0.7)
	Red.Size = UDim2.fromScale(0.1, 0.05)
	Red.ZIndex = Background.ZIndex
    Red.Parent = Background

	local RedTitle = Instance.new("TextLabel")
	RedTitle.BackgroundTransparency = 1
	RedTitle.TextColor3 = Color3.fromRGB(255, 255, 255)
	RedTitle.ZIndex = Background.ZIndex
	RedTitle.Name = "Title"
	RedTitle.Text = "Red: "
	RedTitle.TextScaled = true
	RedTitle.Size = UDim2.fromScale(0.75, 0.865)
	RedTitle.Position = UDim2.fromScale(-0.75, 0.0675)
	RedTitle.Font = TextFont
    RedTitle.Parent = Red

	local RedInput = Instance.new("TextBox")
	RedInput.BackgroundTransparency = 1
	RedInput.BorderColor3 = Color3.fromRGB(96, 96, 96)
	RedInput.TextColor3 = Color3.fromRGB(255, 255, 255)
	RedInput.ZIndex = Background.ZIndex
	RedInput.TextXAlignment = Enum.TextXAlignment.Left
	RedInput.ClearTextOnFocus = false
	RedInput.Name = "Input"
	RedInput.Size = UDim2.fromScale(0.9, 0.9)
	RedInput.Position = UDim2.fromScale(0.05, 0.05)
	RedInput.TextScaled = true
	RedInput.Text = "255"
	RedInput.Font = TextFont
    RedInput.Parent = Red
    
	local Green = Instance.new("Frame")
	Green.BackgroundColor3 = Color3.new(Background.BackgroundColor3.R - 5, Background.BackgroundColor3.G - 5, Background.BackgroundColor3.B - 5)
	Green.BackgroundTransparency = 0
	Green.BorderColor3 = Color3.new(0.376471, 0.376471, 0.376471)
	Green.BorderSizePixel = 1
	Green.Name = "Green"
	Green.Position = UDim2.fromScale(0.875, 0.775)
	Green.Size = UDim2.fromScale(0.1, 0.05)
	Green.ZIndex = Background.ZIndex
    Green.Parent = Background

	local GreenTitle = Instance.new("TextLabel")
	GreenTitle.BackgroundTransparency = 1
	GreenTitle.TextColor3 = Color3.fromRGB(255, 255, 255)
	GreenTitle.ZIndex = Background.ZIndex
	GreenTitle.Name = "Title"
	GreenTitle.Text = "Green: "
	GreenTitle.TextScaled = true
	GreenTitle.Size = UDim2.fromScale(0.75, 0.865)
	GreenTitle.Position = UDim2.fromScale(-0.75, 0.0675)
	GreenTitle.Font = TextFont
    GreenTitle.Parent = Green

	local GreenInput = Instance.new("TextBox")
	GreenInput.BackgroundTransparency = 1
	GreenInput.BorderColor3 = Color3.fromRGB(96, 96, 96)
	GreenInput.TextColor3 = Color3.fromRGB(255, 255, 255)
	GreenInput.ZIndex = Background.ZIndex
	GreenInput.TextXAlignment = Enum.TextXAlignment.Left
	GreenInput.ClearTextOnFocus = false
	GreenInput.Name = "Input"
	GreenInput.Size = UDim2.fromScale(0.9, 0.9)
	GreenInput.Position = UDim2.fromScale(0.05, 0.05)
	GreenInput.TextScaled = true
	GreenInput.Text = "255"
	GreenInput.Font = TextFont
    GreenInput.Parent = Green

	local Blue = Instance.new("Frame")
	Blue.BackgroundColor3 = Color3.new(Background.BackgroundColor3.R - 5, Background.BackgroundColor3.G - 5, Background.BackgroundColor3.B - 5)
	Blue.BackgroundTransparency = 0
	Blue.BorderColor3 = Color3.new(0.376471, 0.376471, 0.376471)
	Blue.BorderSizePixel = 1
	Blue.Name = "Blue"
	Blue.Position = UDim2.fromScale(0.875, 0.85)
	Blue.Size = UDim2.fromScale(0.1, 0.05)
	Blue.ZIndex = Background.ZIndex
    Blue.Parent = Background

	local BlueTitle = Instance.new("TextLabel")
	BlueTitle.BackgroundTransparency = 1
	BlueTitle.TextColor3 = Color3.fromRGB(255, 255, 255)
	BlueTitle.ZIndex = Background.ZIndex
	BlueTitle.Name = "Title"
	BlueTitle.Text = "Blue: "
	BlueTitle.TextScaled = true
	BlueTitle.Size = UDim2.fromScale(0.75, 0.865)
	BlueTitle.Position = UDim2.fromScale(-0.75, 0.0675)
	BlueTitle.Font = TextFont
    BlueTitle.Parent = Blue

	local BlueInput = Instance.new("TextBox")
	BlueInput.BackgroundTransparency = 1
	BlueInput.BorderColor3 = Color3.fromRGB(96, 96, 96)
	BlueInput.TextColor3 = Color3.fromRGB(255, 255, 255)
	BlueInput.ZIndex = Background.ZIndex
	BlueInput.TextXAlignment = Enum.TextXAlignment.Left
	BlueInput.ClearTextOnFocus = false
	BlueInput.Name = "Input"
	BlueInput.Size = UDim2.fromScale(0.9, 0.9)
	BlueInput.Position = UDim2.fromScale(0.05, 0.05)
	BlueInput.TextScaled = true
	BlueInput.Text = "255"
	BlueInput.Font = TextFont
    BlueInput.Parent = Blue

	local Preview = Instance.new("Frame")
	Preview.BorderSizePixel = 0
	Preview.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
	Preview.Size = UDim2.fromScale(0.1, 0.263)
	Preview.Position = UDim2.fromScale(0.487, 0.7)
	Preview.Name = "Preview"
    Preview.Parent = Background

	local NameLabel = Instance.new("TextLabel")
	NameLabel.Size = UDim2.fromScale(0.4, 0.06)
	NameLabel.Position = UDim2.fromScale(0.05, 0.043)
	NameLabel.BackgroundTransparency = 1
	NameLabel.Name = "NameLabel"
	NameLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
	NameLabel.Text = Properties.Text or Properties.Name
	NameLabel.TextScaled = true
    NameLabel.Parent = Background

	local function UpdateText()
		HueInput.Text = math.round(H * 255)
		SaturationInput.Text = math.round(S * 255)
		ValInput.Text = math.round(V * 255)
		RedInput.Text = tostring(math.round(Color.R * 255))
		GreenInput.Text = tostring(math.round(Color.G * 255))
		BlueInput.Text = tostring(math.round(Color.B * 255))
		HexInput.Text = "#" .. tostring(Color:ToHex())
	end
	
	local function UpdateDisplay()
		Preview.BackgroundColor3 = Color
	end

	local R, G, B = 255, 255, 255

	local function UpdateRGB()
		if tonumber(RedInput.Text) then
			R = tonumber(RedInput.Text) * 1.033
		end
		if tonumber(GreenInput.Text) then
			G = tonumber(GreenInput.Text) * 1.033
		end
		if tonumber(BlueInput.Text) then
			B = tonumber(BlueInput.Text) * 1.033
		end
        R = math.clamp(R, 0, 1)
        G = math.clamp(G, 0, 1)
        B = math.clamp(B, 0, 1)
		H, S, V = Color3.fromRGB(R, G, B):ToHSV()
		Color = Color3.fromHSV(H, S, V)
		ColorPickerArrow.Position = UDim2.fromScale(math.clamp(0.95 - H, -0.05, 0.95), math.clamp(0.95 - S, -0.05, 0.95))
		Arrow.Position = UDim2.fromScale(Arrow.Position.X.Scale, math.clamp(0.95 - V, -0.05, 0.95))
		UpdateText()
		UpdateDisplay()
	end

	ColorPickerBackground.MouseButton1Down:Connect(function()
		while UIS:IsMouseButtonPressed(Enum.UserInputType.MouseButton1) and not StopScript do
			RunService.RenderStepped:Wait()
            local X = ((Mouse.X - ColorPickerBackground.AbsolutePosition.X) / ColorPickerBackground.AbsoluteSize.X) - ColorPickerArrow.AbsoluteSize.X * 0.5 / ColorPickerBackground.AbsoluteSize.X
            local XMin = 0 - ColorPickerArrow.AbsoluteSize.X * 0.5 / ColorPickerBackground.AbsoluteSize.X
            local XMax = 1 - ColorPickerArrow.AbsoluteSize.X * 0.5 / ColorPickerBackground.AbsoluteSize.X
            X = math.clamp(X, XMin, XMax)
            local Y = ((Mouse.Y - ColorPickerBackground.AbsolutePosition.Y) / ColorPickerBackground.AbsoluteSize.Y) - ColorPickerArrow.AbsoluteSize.Y * 0.5 / ColorPickerBackground.AbsoluteSize.Y
            local YMin = 0 - ColorPickerArrow.AbsoluteSize.Y * 0.5 / ColorPickerBackground.AbsoluteSize.Y
            local YMax = 1 - ColorPickerArrow.AbsoluteSize.Y * 0.5 / ColorPickerBackground.AbsoluteSize.Y
            Y = math.clamp(Y, YMin, YMax)
			ColorPickerArrow.Position = UDim2.fromScale(X, Y)
			H = math.clamp((0.95 - ColorPickerArrow.Position.X.Scale) * 1.033, 0, 1)
			S = math.clamp((0.95 - ColorPickerArrow.Position.Y.Scale) * 1.033, 0, 1)
			Color = Color3.fromHSV(H, S, V)
			UpdateText()
			UpdateDisplay()
			Function(Color)
		end
	end)
	
	ColorStrip.MouseButton1Down:Connect(function()
		while UIS:IsMouseButtonPressed(Enum.UserInputType.MouseButton1) and not StopScript do
			RunService.RenderStepped:Wait()
            local Y = ((Mouse.Y - ColorStrip.AbsolutePosition.Y) / ColorStrip.AbsoluteSize.Y) - (Arrow.AbsoluteSize.Y * 0.5) / ColorStrip.AbsoluteSize.Y
            local Min = 0 - (Arrow.AbsoluteSize.Y * 0.5) / ColorStrip.AbsoluteSize.Y
            local Max = 1 - (Arrow.AbsoluteSize.Y * 0.5) / ColorStrip.AbsoluteSize.Y
			Arrow.Position = UDim2.fromScale(1, math.clamp(Y, Min, Max))
			V = math.clamp((0.95 - Arrow.Position.Y.Scale)  * 1.033, 0, 1)
			Color = Color3.fromHSV(H, S, V)
			UpdateText()
			UpdateDisplay()
			Function(Color)
		end
	end)
	
	HueInput.FocusLost:Connect(function()
        local HueText = tonumber(HueInput.Text)
		if HueText then
			H = math.clamp(HueText / 255, 0, 1)
		end
		ColorPickerArrow.Position = UDim2.fromScale(math.clamp(0.95 - H, -0.05, 0.95), ColorPickerArrow.Position.Y.Scale)
		Color = Color3.fromHSV(H, S, V)
		Function(Color)
	end)

	SaturationInput.FocusLost:Connect(function()
		if tonumber(SaturationInput.Text) then
			S = math.clamp(tonumber(SaturationInput.Text), 0, 255)
		end
		ColorPickerArrow.Position = UDim2.fromScale(ColorPickerArrow.Position.X.Scale, math.clamp(0.95 - S, -0.05, 0.95))
		Color = Color3.fromHSV(H, S, V)
		Function(Color)
	end)

	ValInput.FocusLost:Connect(function()
		if tonumber(ValInput.Text) then
			V = math.clamp(tonumber(ValInput.Text), 0, 255)
		end
		Arrow.Position = UDim2.fromScale(Arrow.Position.X.Scale, math.clamp(0.95 - V, -0.05, 0.95))
		Color = Color3.fromHSV(H, S, V)
		Function(Color)
	end)

	RedInput.FocusLost:Connect(function()
		UpdateRGB()
		Function(Color)
	end)

	GreenInput.FocusLost:Connect(function()
		UpdateRGB()
		Function(Color)
	end)

	BlueInput.FocusLost:Connect(function()
		UpdateRGB()
		Function(Color)
	end)

	return Background
end

function ClearSettings()
	for i, v in ipairs(SettingsMenu.ScrollingFrame:GetChildren()) do
		if v:IsA("TextButton") or v:IsA("TextBox") or v:IsA("Frame") or v:IsA("ImageButton") then
			v.Visible = false
		end
	end
end

do
	local TeleportCheck = false
	Connections.TidalWave.QueueOnTeleportConnection = Plr.OnTeleport:Connect(function()
		if StopScript then return end
		if KeepTidalWave and QueueOnTeleport and not TeleportCheck then
			TeleportCheck = true
            Connections.TidalWave.QueueOnTeleportConnection:Disconnect()
            Connections.TidalWave.QueueOnTeleportConnection = nil
			QueueOnTeleport("loadfile('TidalWave.lua')()")
		end
	end)
end

function SetClipboard(String, Message)
	if ClipboardFunc then
		if tostring(String) then 
			ClipboardFunc(tostring(String))
			if Message then
				Notify({
					Text = Message,
				})
			else
				Notify({
					Text = "Copied " .. String .. " To SetClipboard",
				})
			end
		end
	else
		Notify({
			Text = 'Your Exploit Doesnt Support Support "SetClipboard"',
		})
	end
end

function GetFullName(Object)
	if Object == game then return game end
	if typeof(Object) ~= "Instance" then return nil end
	if game:FindFirstChildOfClass(Object.ClassName) and Object.ClassName ~= "" then
		return `game:GetService("{Object.ClassName}")`
    elseif Object.ClassName == "" then
        return `game:GetChildren()[{table.find(game:GetChildren(), Object)}]`
	end

	local FullName
	local Period = false
	local SpecialCharacter = false
	local UsedGetChildren = false
	local SpecialCharacters = {
		";",
		":",
		"'",
		"\"",
		"%[",
		"%]",
		"%{",
		"%}",
		"/",
		"\\",
		"-",
		"+",
		"%.",
		"!",
		"@",
		"#",
		"%$",
		"%%",
		"%^",
		"&",
		"*",
		"%(",
		"%)",
		"=",
		"<",
		">",
		"?",
        --- Keywords ---
        "nil",
        "for",
        "do",
        "while",
        "true",
        "false",
        "repeat",
        "until",
        "and",
        "or",
        "not",
        "local",
        "function",
        "if",
        "then",
        "return",
        "end",
        "break",
        "else",
        "elseif",
        "in",
	}

	if Object.Name ~= "" and Object.Parent:FindFirstChild(Object.Name) == Object and typeof(Object.Parent[Object.Name]) == "Instance" then
        local Name = string.gsub(string.gsub(Object.Name, "\\", "\\\\"), "\"", "\\\"")
		for i, v in ipairs(SpecialCharacters) do
            local Start, End = string.find(Name, v)
            local BeforeChar, AfterChar
            if i >= 28 and Start and End then
                BeforeChar, AfterChar = string.sub(Name, Start - 1, Start - 1), string.sub(Name, End + 1, End + 1)
                if BeforeChar == "" or BeforeChar == " " then
                    SpecialCharacter = true
                elseif AfterChar == "" or AfterChar == " " then
                    SpecialCharacter = true
                end
            else
                if string.find(Name, v) then
                    SpecialCharacter = true
                end
            end
        end
		if string.find(Name, " ") or tonumber(string.sub(Name, 1, 1)) or SpecialCharacter then
            FullName = `["{Name}"]`
			Period = false
		else
			FullName = Name
			Period = true
		end
    elseif Object.Parent:FindFirstChild(Object.Name) and typeof(Object.Parent[Object.Name]) ~= "Instance" then
        FullName = `:FindFirstChild("{Object.Name}")`
        Period = false
        UsedGetChildren = true
	else
        FullName = `:GetChildren()[{tostring(table.find(Object.Parent:GetChildren(), Object))}]`
		Period = false
		UsedGetChildren = true
	end
	SpecialCharacter = false

	local GetS = Object
	local Parent = Object.Parent
	local Service = ""

	if GetS.Parent ~= game then
		repeat
			GetS = GetS.Parent
			Service = GetS.ClassName
		until GetS.Parent == game
	end
    
	if Parent ~= GetS then
		repeat
			if Parent.Parent.Name ~= "" and Parent.Parent:FindFirstChild(Parent.Name) == Parent and typeof(Parent.Parent[Parent.Name]) == "Instance" then
                local Name = string.gsub(string.gsub(Parent.Name, "\\", "\\\\"), "\"", "\\\"")
				for i, v in ipairs(SpecialCharacters) do
                    local Start, End = string.find(Name, v)
                    local BeforeChar, AfterChar
                    if i >= 28 and Start and End then
                        BeforeChar, AfterChar = string.sub(Name, Start - 1, Start - 1), string.sub(Name, End + 1, End + 1)
                        if BeforeChar == "" or BeforeChar == " " then
                            SpecialCharacter = true
                        elseif AfterChar == "" or AfterChar == " " then
                            SpecialCharacter = true
                        end
                    else
                        if string.find(Name, v) then
                            SpecialCharacter = true
                        end
                    end
                end
				if string.find(Name, " ") or tonumber(string.sub(Name, 1, 1)) or SpecialCharacter then
					if Period and not UsedGetChildren then
                        FullName = `["{Name}"].{FullName}`
					else
						FullName = `["{Name}"]{FullName}`
					end
					Period = false
				else
					if Period and not UsedGetChildren then
						FullName = `{Name}.{FullName}`
					else
						FullName = `{Name}{FullName}`
					end
					Period = true
				end
				UsedGetChildren = false
            elseif Parent.Parent:FindFirstChild(Parent.Name) and typeof(Parent.Parent[Parent.Name]) ~= "Instance" then
                if Period and not UsedGetChildren then
					FullName = `:FindFirstChild("{Parent.Name}").{FullName}`
				else
					FullName = `:FindFirstChild("{Parent.Name}"){FullName}`
				end
				Period = false
				UsedGetChildren = true
			else
				if Period and not UsedGetChildren then
                    FullName = `:GetChildren()[{tostring(table.find(Parent.Parent:GetChildren(), Parent))}].{FullName}`
				else
					FullName = `:GetChildren()[{tostring(table.find(Parent.Parent:GetChildren(), Parent))}]{FullName}`
				end
				Period = false
				UsedGetChildren = true
			end
            Parent = Parent.Parent
			SpecialCharacter = false
		until Parent == GetS
	end

	if Period then
		return `game:GetService("{Service}").{FullName}`
	else
		return `game:GetService("{Service}"){FullName}`
	end
end

function GetChar(Player)
	if not Player then return end
	local Char = Player.Character or workspace:FindFirstChild(Player.Name)
	return Char
end

function WaitUntilCharAdded(Player, TimeOut)
    return WaitForDescendant(workspace, Player.Name, TimeOut)
end

function GetHumanoid(Char)
	if not Char then return end
	local Humanoid = Char:FindFirstChildWhichIsA("Humanoid")
	return Humanoid
end

function GetRootPart(Char)
    if not Char then return end
    local Humanoid = GetHumanoid(Char)
    local BasePart = Char:FindFirstChildWhichIsA("BasePart")
	local Root = Char.PrimaryPart or Char:FindFirstChild("HumanoidRootPart") or Char:FindFirstChild("RootPart") or Char:FindFirstChild("Root") or Char:FindFirstChild("PrimaryPart") or (Humanoid and Humanoid.RootPart) or Char:FindFirstChild("UpperTorso") or Char:FindFirstChild("LowerTorso") or (BasePart and BasePart.AssemblyRootPart) or BasePart
	return Root
end

function R15(Player)
	local Char = GetChar(Player)
	local Humanoid = GetHumanoid(Char)

	if not (Humanoid and Char) then return nil end

	if Humanoid.RigType == Enum.HumanoidRigType.R15 then
		return true
	end
    return false
end

function ChatMessage(Str)
	Str = tostring(Str)
    if not Str then return end
    local Success, RBXGeneral = pcall(function()
        return TextChatService.TextChannels.RBXGeneral
    end)
    if Success then
        RBXGeneral:SendAsync(Str)
    end
end

function HasAZ(String)
    String = tostring(String)
    if not String then return nil end
    String = string.lower(String)
	for i = 65, 90 do
        local Char = string.lower(string.char(i))
        if string.find(String, Char) then
            return true
        end
    end
end

function RoundColor3(Color)
	if typeof(Color) ~= "Color3" then return Color end
    local R = math.round(Color.R) * 255
    local G = math.round(Color.G) * 255
    local B = math.round(Color.B) * 255

	return Color3.new(R, G, B)
end

function GetClosestModel(Folder)
    if not Folder then return nil end

	local ClosestModel
	local ClosestModelDistance = math.huge
	local Char = GetChar(Plr)
	local Root = GetRootPart(Char)

	if not (Char and Root) then return nil end

	for i, v in pairs(Folder:GetChildren()) do
        local ModelRoot = GetRoot(v)
		if ModelRoot and (Root.Position - ModelRoot.Position).Magnitude < ClosestModelDistance then
			ClosestModel = v
			ClosestModelDistance = (Root.Position - ModelRoot.Position).Magnitude
		end
	end

	return ClosestModel
end

function WaitForChildOfClass(Obj, Class, TimeOut)
    if typeof(Obj) ~= "Instance" then return nil end
    if typeof(Class) ~= "string" then return nil end
    local TimedOut = false
    if TimeOut and tonumber(TimeOut) then
        task.delay(tonumber(TimeOut), function()
            TimedOut = true
        end)
    end
    local FoundObj = Obj:FindFirstChildOfClass(Class)
    if FoundObj then
        return FoundObj
    end
    while not TimedOut do
        local NewObj = Obj.ChildAdded:Wait()
        if TimedOut then return nil end
        if NewObj.ClassName == Class then
            return NewObj
        end
    end
end

function WaitForChildWhichIsA(Obj, Class, TimeOut)
    if typeof(Obj) ~= "Instance" then return nil end
    if typeof(Class) ~= "string" then return nil end
    local TimedOut = false
    if TimeOut and tonumber(TimeOut) then
        task.delay(tonumber(TimeOut), function()
            TimedOut = true
        end)
    end
    local FoundObj = Obj:FindFirstChildWhichIsA(Class)
    if FoundObj then
        return FoundObj
    end
    while not TimedOut do
        local NewObj = Obj.ChildAdded:Wait()
        if TimedOut then return nil end
        if NewObj:IsA(Class) then
            return NewObj
        end
    end
end

function WaitForDescendant(Obj, Name, TimeOut)
    if typeof(Obj) ~= "Instance" then return nil end
    if typeof(Name) ~= "string" then return nil end
    local TimedOut = false
    if TimeOut and tonumber(TimeOut) then
        task.delay(tonumber(TimeOut), function()
            TimedOut = true
        end)
    end
    local FoundObj = Obj:FindFirstChild(Name, true)
    if FoundObj then
        return FoundObj
    end
    while not TimedOut do
        local NewObj = Obj.DescendantAdded:Wait()
        if TimedOut then return nil end
        if NewObj.Name == Name then
            return NewObj
        end
    end
end

function WaitForDescendantOfClass(Obj, Class, TimeOut)
    if typeof(Obj) ~= "Instance" then return nil end
    if typeof(Class) ~= "string" then return nil end
    local TimedOut = false
    if TimeOut and tonumber(TimeOut) then
        task.delay(tonumber(TimeOut), function()
            TimedOut = true
        end)
    end
    local FoundObj = Obj:FindFirstChildWhichIsA(Class, true)
    if FoundObj and FoundObj.ClassName == Class then
        return FoundObj
    end
    while not TimedOut do
        local NewObj = Obj.DescendantAdded:Wait()
        if TimedOut then return nil end
        if NewObj.ClassName == Class then
            return NewObj
        end
    end
end

function WaitForDescendantWhichIsA(Obj, Class, TimeOut)
    if typeof(Obj) ~= "Instance" then return nil end
    if typeof(Class) ~= "string" then return nil end
    local TimedOut = false
    if TimeOut and tonumber(TimeOut) then
        task.delay(tonumber(TimeOut), function()
            TimedOut = true
        end)
    end
    local FoundObj = Obj:FindFirstChildWhichIsA(Class, true)
    if FoundObj then
        return FoundObj
    end
    while not TimedOut do
        local NewObj = Obj.DescendantAdded:Wait()
        if TimedOut then return nil end
        if NewObj:IsA(Class) then
            return NewObj
        end
    end
end

FreecamRunning = false
Connections.TidalWave.CurrentCameraChangedConnection = workspace:GetPropertyChangedSignal("CurrentCamera"):Connect(function()
	local NewCamera = workspace.CurrentCamera
	if NewCamera then
		Camera = NewCamera
	end
end)

InputPriority = Enum.ContextActionPriority.High.Value
Spring = {}
do
	Spring.__index = Spring

	function Spring.new(freq, pos)
		local self = setmetatable({}, Spring)
		self.f = freq
		self.p = pos
		self.v = pos * 0
		return self
	end

	function Spring:Update(dt, goal)
		local f = self.f * 2 * math.pi
		local p0 = self.p
		local v0 = self.v

		local offset = goal - p0
        local Val: number = -f * dt
		local decay = math.exp(Val)

		local p1 = goal + (v0 * dt - offset * (f * dt + 1)) * decay
		local v1 = (f * dt * (offset * f - v0) + v0) * decay

		self.p = p1
		self.v = v1

		return p1
	end
    
	function Spring:Reset(pos)
		self.p = pos
		self.v = pos * 0
	end
end

local CameraPos = Vector3.new()
local CameraRot = Vector2.new()

local VelSpring = Spring.new(5, Vector3.new())
local PanSpring = Spring.new(5, Vector2.new())
FreecamInput = {}
do

	keyboard = {
		W = 0,
		A = 0,
		S = 0,
		D = 0,
		E = 0,
		Q = 0,
		Up = 0,
		Down = 0,
		LeftShift = 0,
	}

	mouse = {
		Delta = Vector2.new(),
	}

	FreecamSpeed = Vector3.new(1, 1, 1)
	FreecamPanSpeed = Vector2.new(1, 1)*(math.pi/64)
	NAV_ADJ_SPEED = 0.75
	FreecamShiftMulti = 0.25
	
	navSpeed = 1

	function FreecamInput.Vel(dt)
        local Val: number = navSpeed + dt * (keyboard.Up - keyboard.Down) * NAV_ADJ_SPEED
		navSpeed = math.clamp(Val, 0.01, 4)

		local kKeyboard = Vector3.new(
			keyboard.D - keyboard.A,
			keyboard.E - keyboard.Q,
			keyboard.S - keyboard.W
		)*FreecamSpeed

		local shift = UIS:IsKeyDown(Enum.KeyCode.LeftShift)

		return (kKeyboard)*(navSpeed*(shift and FreecamShiftMulti or 1))
	end

	function FreecamInput.Pan(dt)
		local kMouse = mouse.Delta*FreecamPanSpeed
		mouse.Delta = Vector2.new()
		return kMouse
	end

	do
		function Keypress(action, state, input)
			keyboard[input.KeyCode.Name] = state == Enum.UserInputState.Begin and 1 or 0
			return Enum.ContextActionResult.Sink
		end

		function MousePan(action, state, input)
			local delta = input.Delta
			mouse.Delta = Vector2.new(-delta.y, -delta.x)
			return Enum.ContextActionResult.Sink
		end

		function Zero(t)
			for k, v in pairs(t) do
				t[k] = v*0
			end
		end

		function FreecamInput.StartCapture()
			ContextActionService:BindActionAtPriority("FreecamKeyboard",Keypress,false,InputPriority,
				Enum.KeyCode.W,
				Enum.KeyCode.A,
				Enum.KeyCode.S,
				Enum.KeyCode.D,
				Enum.KeyCode.E,
				Enum.KeyCode.Q,
				Enum.KeyCode.Up,
				Enum.KeyCode.Down
			)
			ContextActionService:BindActionAtPriority("FreecamMousePan",MousePan,false,InputPriority,Enum.UserInputType.MouseMovement)
		end

		function FreecamInput.StopCapture()
			navSpeed = 1
			Zero(keyboard)
			Zero(mouse)
			ContextActionService:UnbindAction("FreecamKeyboard")
			ContextActionService:UnbindAction("FreecamMousePan")
		end
	end
end

PrevFocusDistance = nil

function GetFocusDistance(cameraFrame)
	local znear = 0.1
	local viewport = Camera.ViewportSize
	local projy = 2*math.tan(cameraFov/2)
	local projx = viewport.x/viewport.y*projy
	local fx = cameraFrame.rightVector
	local fy = cameraFrame.upVector
	local fz = cameraFrame.lookVector

	local minVect = Vector3.new()
	local minDist = 512

	for x = 0, 1, 0.5 do
		for y = 0, 1, 0.5 do
			local cx = (x - 0.5)*projx
			local cy = (y - 0.5)*projy
			local offset = fx*cx - fy*cy + fz
			local origin = cameraFrame.p + offset*znear
            local Raycast = workspace:Raycast(origin, offset.unit * minDist)
			local dist = Raycast and Raycast.Distance or (offset.unit * minDist).Magnitude
			if minDist > dist then
				minDist = dist
				minVect = offset.unit
			end
		end
	end

	return fz:Dot(minVect)*minDist
end

function StepFreecam(dt)
	local vel = VelSpring:Update(dt, FreecamInput.Vel(dt))
	local pan = PanSpring:Update(dt, FreecamInput.Pan(dt))

	local zoomFactor = math.sqrt(math.tan(math.rad(70/2))/math.tan(math.rad(cameraFov/2)))

	CameraRot = CameraRot + pan * Vector2.new(0.75, 1) * 8 * (dt / zoomFactor)
	CameraRot = Vector2.new(math.clamp(CameraRot.x, -math.rad(90), math.rad(90)), CameraRot.y % (2 * math.pi))

	local cameraCFrame = CFrame.new(CameraPos)*CFrame.fromOrientation(CameraRot.x, CameraRot.y, 0)*CFrame.new(vel*Vector3.new(1, 1, 1)*64*dt)
	CameraPos = cameraCFrame.p

	Camera.CFrame = cameraCFrame
	Camera.Focus = cameraCFrame*CFrame.new(0, 0, -GetFocusDistance(cameraCFrame))
	Camera.FieldOfView = cameraFov
end

local PlayerState = {}
do
	mouseBehavior = ""
	mouseIconEnabled = ""
	cameraType = ""
	cameraFocus = ""
	cameraCFrame = ""
	cameraFieldOfView = ""

	function PlayerState.Push()
		cameraFieldOfView = Camera.FieldOfView
		Camera.FieldOfView = 70

		cameraType = Camera.CameraType
		Camera.CameraType = Enum.CameraType.Custom

		cameraCFrame = Camera.CFrame
		cameraFocus = Camera.Focus

		mouseIconEnabled = UIS.MouseIconEnabled
		UIS.MouseIconEnabled = true

		mouseBehavior = UIS.MouseBehavior
		UIS.MouseBehavior = Enum.MouseBehavior.Default
	end

	function PlayerState.Pop()
		Camera.FieldOfView = 70

		Camera.CameraType = cameraType
		cameraType = nil

		Camera.CFrame = cameraCFrame
		cameraCFrame = nil

		Camera.Focus = cameraFocus
		cameraFocus = nil

		UIS.MouseIconEnabled = mouseIconEnabled
		mouseIconEnabled = nil

		UIS.MouseBehavior = mouseBehavior
		mouseBehavior = nil
	end
end

function StartFreecam(pos)
	if FreecamRunning then
		StopFreecam()
	end
	local cameraCFrame = Camera.CFrame
	if pos then
		cameraCFrame = pos
	end
	CameraRot = Vector2.new()
	CameraPos = cameraCFrame.p
	cameraFov = Camera.FieldOfView

	VelSpring:Reset(Vector3.new())
	PanSpring:Reset(Vector2.new())

	PlayerState.Push()
	RunService:BindToRenderStep("Freecam", Enum.RenderPriority.Camera.Value, StepFreecam)
	FreecamInput.StartCapture()
	FreecamRunning = true
end

function StopFreecam()
	if not FreecamRunning then return end
	FreecamInput.StopCapture()
	RunService:UnbindFromRenderStep("Freecam")
	PlayerState.Pop()
    if Camera then
        Camera.FieldOfView = Fov
    end
	FreecamRunning = false
end

function FindPlayer(Name: string)
    if typeof(Name) ~= "string" then return end
    Name = string.lower(Name)
    for i, Player in ipairs(Players:GetPlayers()) do
        local PlayerName = string.lower(Player.Name)
        local PlayerDisplayName = string.lower(Player.DisplayName)
        if string.find(PlayerName, Name) or string.find(PlayerDisplayName, Name) then
            return Player
        end
    end
	return nil
end

function SubstituteNumber(Number, Decimals)
	local NumberString = tostring(Number)
	if NumberString then
		local AddedString = string.split(NumberString, ".")[1]
		if string.split(NumberString, ".")[2] then
			AddedString = AddedString .. "." .. string.sub(string.split(NumberString, ".")[2], 1, tonumber(Decimals) or 3)
		end
		return tonumber(AddedString) or AddedString
	else
		return Number
	end
end

function ChatboxFocused()
	local Success, Result = pcall(function()
		return CoreGui.ExperienceChat.appLayout.chatInputBar.Background.Container.TextContainer.TextBoxContainer.TextBox:IsFocused()
	end)
	if Success then
        return Result
    else
        return false
    end
end

function GetChildrenOfClass(Path, Class)
	if typeof(Path) == "Instance" and Class ~= nil and tostring(Class) then
		local Children = {}
		for i, v in pairs(Path:GetChildren()) do
			if v.ClassName == tostring(Class) then
				table.insert(Children, v)
			end
		end
		return Children
	end
end

function NotifyModuleToggled(Name, Boolean)
	if Boolean ~= nil and tostring(Name) then
		if Boolean then
			Notify({
				Title = "Module Toggled",
				Text = tostring(Name) .. " Has Been <b><font color='rgb(0, 255, 0)'>Enabled</font></b>",
				Duration = 2,
			})
		else
			Notify({
				Title = "Module Toggled",
				Text = tostring(Name) .. " Has Been <b><font color='rgb(255, 0, 0)'>Disabled</font></b>",
				Duration = 2,
			})
		end
	end
end

function ToggleHackFromList(Name, Boolean)
	if Boolean ~= nil then
		if Boolean then
			AddHackToList(Name)
		else
			RemoveHackFromList(Name)
		end
	end
end

function ModuleToggled(Object, Name, Boolean, NoNotify)
	if Boolean ~= nil then
		if typeof(Object) == "table" then
			if Object.MainFrame then
				ToggleButtonColor(Object.MainFrame, Boolean)
			elseif Object.Btn then
				ToggleButtonColor(Object.Btn, Boolean)
			end
			ToggleHackFromList(Name, Boolean)
			if not NoNotify then
				NotifyModuleToggled(Name, Boolean)
			end
		elseif typeof(Object) == "Instance" then
			local ButtonEnabledIndicator = Object:FindFirstChild("ButtonEnabledIndicator", true)
			if ButtonEnabledIndicator then
				ToggleButtonColor(ButtonEnabledIndicator, Boolean)
				ToggleHackFromList(Name, Boolean)
				if not NoNotify then
					NotifyModuleToggled(Name, Boolean)
				end
			else
				ToggleButtonColor(Object, Boolean)
				ToggleHackFromList(Name, Boolean)
				if not NoNotify then
					NotifyModuleToggled(Name, Boolean)
				end
			end
		end
	end
end

function TableFind(Table, String)
    String = String.lower(String)
	for i, v in pairs(Table) do
        if string.lower(i) == String then return v, i end
    end
    return nil
end

function AddAlias(CMD, Alias)
    CMD = string.lower(CMD)
    Alias = string.lower(Alias)
    local IsExistingCMD = false
    local FoundCMD
    local IsExistingAlias = false
    for i, v in pairs(CMDS) do
        if string.lower(i) == CMD then
            IsExistingCMD = true
            FoundCMD = i
            break
        end
    end
    for i, v in pairs(Aliases) do
        if string.lower(i) == Alias then
            IsExistingAlias = true
            break
        end
    end
    if IsExistingCMD and not IsExistingAlias and FoundCMD then
        Aliases[Alias] = FoundCMD
    end
end

function RemoveAlias(Alias)
	if Aliases[Alias] then
		Aliases[Alias] = nil
	end
end

function PromptNewRig(Rig)
	local Char = GetChar(Plr)
	local Humanoid = GetHumanoid(Char)
	if Char and Humanoid then
		AvatarEditorService:PromptSaveAvatar(Humanoid.HumanoidDescription, Enum.HumanoidRigType[Rig])
		local Result = AvatarEditorService.PromptSaveAvatarCompleted:Wait()
		if Result == Enum.AvatarPromptResult.Success then
			ResetPlayer:Toggle()
		end
	end
end

function CompareVector2(Vec2, OtherVec2, Type)
	if Vec2 and OtherVec2 and typeof(Vec2) == "Vector2" and typeof(OtherVec2) == "Vector2" then
		local AddedVec2 = Vec2.X + Vec2.Y
		local AddedOtherVec2 = OtherVec2.X + OtherVec2.Y
		if Type == ">" then
			if AddedVec2 > AddedOtherVec2 then
				return true
			end
		elseif Type == "<" then
			if AddedVec2 < AddedOtherVec2 then
				return true
			end
		else
			if AddedVec2 < AddedOtherVec2 then
				return true
			end
		end
	end
end

function IsOnScreen(X, Y)
	if Camera and X then
		if typeof(X) == "number" and Y and typeof(Y) == "number" then
			if X > 0 and X < Camera.ViewportSize.X and Y > 0 and Y < Camera.ViewportSize.Y then
				return true
			end
		elseif typeof(X) == "Vector2" then
			if CompareVector2(X, Vector2.new(0, 0), ">") and CompareVector2(X, Camera.ViewportSize, "<") then
				return true
			end
		end
	end
end

function WorldToScreen(X, Y, Z)
	if Camera and X then
		local Vector = nil
		if typeof(X) == "number" and Y and Z then
			Vector = Camera:WorldToViewportPoint(X, Y, Z)
		elseif typeof(X) == "Vector3" then
			Vector = Camera:WorldToViewportPoint(X)
		end
		return Vector2.new(Vector.X, Vector.Y)
	end
end

function GetClosestPlayerFromCursor()
	local ClosestPlayer = nil
	local ClosestPlayerDistance = math.huge
	local OnScreen = nil
	for i, Player in pairs(Players:GetPlayers()) do
		if Player == Plr then continue end
		local PlayerChar = GetChar(Player)
		if not PlayerChar then continue end
		local PlayerRoot = GetRootPart(PlayerChar)
		if not PlayerRoot then continue end
		local Distance = (WorldToScreen(PlayerRoot.Position) - Vector2.new(Mouse.X, Mouse.Y)).Magnitude
		if Distance < ClosestPlayerDistance then
			ClosestPlayerDistance = Distance
			ClosestPlayer = Player
			OnScreen = IsOnScreen(WorldToScreen(PlayerRoot.Position))
		end
	end
	return ClosestPlayer, OnScreen
end

function CreateKeybind(Args)
	if Args.Keybind ~= nil and tostring(Args.Keybind) then
		Args.Keybind = tostring(Args.Keybind)
		local KeybindLabel = Instance.new("TextLabel")
		KeybindLabel.BackgroundColor3 = Color3.fromRGB(20, 20, 20)
		KeybindLabel.BorderSizePixel = 0
		KeybindLabel.BackgroundTransparency = 0.25
		KeybindLabel.Size = Args.Size or UDim2.new(0.975, 0, 0, 15)
		KeybindLabel.Name = Args.KeybindName .. "KeybindFrame"
		KeybindLabel.ZIndex = KeybindsCategory.ContentFrame.Parent.ZIndex
        KeybindLabel.TextScaled = true
        KeybindLabel.Font = Enum.Font:FromName(TextFont) or Enum.Font.SourceSansPro
        KeybindLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
        if Args.Custom then
			KeybindLabel.Text = Args.KeybindName .. " Keybind: " .. Args.Keybind
		else
			if TidalWaveKeybinds[Args.Keybind] then
				KeybindLabel.Text = Args.KeybindName .. " Keybind: " .. TidalWaveKeybinds[Args.Keybind]
			else
				KeybindLabel.Text = Args.KeybindName .. " Keybind: nil"
			end
		end
        KeybindLabel.Parent = KeybindsCategory.ContentFrame

        local KeybindLabelUICorner = Instance.new("UICorner")
        KeybindLabelUICorner.CornerRadius = UDim.new(0.25, 0)
        KeybindLabelUICorner.Parent = KeybindLabel

        local KeybindLabelUIPadding = Instance.new("UIPadding")
        KeybindLabelUIPadding.PaddingTop = UDim.new(0.2, 0)
        KeybindLabelUIPadding.PaddingBottom = UDim.new(0.2, 0)
        KeybindLabelUIPadding.PaddingLeft = UDim.new(0.025, 0)
        KeybindLabelUIPadding.PaddingRight = UDim.new(0.15, 0)
        KeybindLabelUIPadding.Parent = KeybindLabel

		local TouchingFrame = false

		KeybindLabel.MouseEnter:Connect(function()
			TouchingFrame = true
			task.delay(0.25, function()
				if not TouchingFrame then return end
				ShowHoverInfo("Click The Pencil To Edit The Keybind, Click Away To Stop Editing The Keybind, And Press Esc To Delete The Keybind")
			end)
		end)

		KeybindLabel.MouseLeave:Connect(function()
			TouchingFrame = false
			HideHoverInfo()
		end)
		
		local EditKeybind = Instance.new("ImageButton")
		EditKeybind.BackgroundTransparency = 1
		EditKeybind.Size = UDim2.fromScale(0.1, 1.2)
		EditKeybind.Position = UDim2.fromScale(1.05, -0.1)
		EditKeybind.Image = "rbxassetid://6953984135"
		EditKeybind.ZIndex = KeybindLabel.ZIndex
		EditKeybind.Name = "EditKeybind"
        EditKeybind.Parent = KeybindLabel
		EditKeybind.MouseButton1Click:Connect(function()
			if Rebinding == nil then
				Rebinding = Args.KeybindName
				KeybindLabel.Text = "Press Key Or Click Away To Stop"
            else
                Rebinding = nil
                KeybindLabel.Text = "Keybind"
			end
		end)

		Connections.TidalWave[Args.KeybindName .. "_InputBeganConnection"] = UIS.InputBegan:Connect(function(Input)
			if Args.Custom then
				if Rebinding == Args.KeybindName and Args.Keybind then
					if Input.KeyCode == Enum.KeyCode.Escape then
						if Args.OnDelete then
							Args.OnDelete()
						end
						KeybindLabel.Text = Args.KeybindName .. " Keybind: nil"
						Rebinding = nil
					elseif Input.KeyCode == Enum.KeyCode.Unknown then
						KeybindLabel.Text = Args.KeybindName .. " Keybind: " .. Args.Keybind
						Rebinding = nil
					end
				end
			else
				if Rebinding == Args.KeybindName and TidalWaveKeybinds[Args.Keybind] then
					if Input.KeyCode == Enum.KeyCode.Escape then
						TidalWaveKeybinds[Args.Keybind] = nil
						KeybindLabel.Text = Args.KeybindName .. " Keybind: nil"
						Rebinding = nil
					elseif Input.KeyCode == Enum.KeyCode.Unknown then
						KeybindLabel.Text = Args.KeybindName .. " Keybind: " .. Args.Keybind
						Rebinding = nil
					end
				end
			end
		end)
		
		local Refs = {
			MainFrame = KeybindLabel,
			Frame = KeybindLabel,
			KeybindLabel = KeybindLabel,
			EditKeybind = EditKeybind,
		}
		
		return Refs
	end
end

function NotifyExploitDoesntSupportFunction(Func)
    local Text = "Your Executor Doesn't Support \"" .. tostring(Func) .. "\""
    if IdentifyExecutor then
        Text = IdentifyExecutor() .. " Doesn't Support \"" .. tostring(Func) .. "\""
    end
	Notify({
		Text = Text,
	})
end

GetRoot = GetRootPart

function CreateRebindButton(Keybind)
    local MainFrame = Instance.new("Frame")
    MainFrame.BackgroundColor3 = Color3.fromRGB(20, 20, 20)
    MainFrame.BorderSizePixel = 0
    MainFrame.Size = UDim2.fromScale(0.85, 0.1)
    MainFrame.Name = Keybind .. "_RebindButton"
    MainFrame.Parent = SettingsMenu.ScrollingFrame

    local MainFrameUICorner = Instance.new("UICorner")
    MainFrameUICorner.CornerRadius = UDim.new(0.25, 0)
    MainFrameUICorner.Parent = MainFrame

    local KeybindNameLabel = Instance.new("TextLabel")
    KeybindNameLabel.BackgroundTransparency = 1
    KeybindNameLabel.Size = UDim2.fromScale(0.5, 0.6)
    KeybindNameLabel.Position = UDim2.fromScale(0, 0.2)
    KeybindNameLabel.Name = "KeybindNameLabel"
    KeybindNameLabel.Text = Keybind
    KeybindNameLabel.Font = TextFont
    KeybindNameLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
    KeybindNameLabel.TextScaled = true
    KeybindNameLabel.Parent = MainFrame

    local RebindButtonFrame = Instance.new("Frame")
    RebindButtonFrame.BackgroundColor3 = Color3.fromRGB(25, 25, 25)
    RebindButtonFrame.BorderSizePixel = 0
    RebindButtonFrame.Size = UDim2.fromScale(0.4, 0.8)
    RebindButtonFrame.Position = UDim2.fromScale(0.5, 0.1)
    RebindButtonFrame.Name = "RebindButtonFrame"
    RebindButtonFrame.Parent = MainFrame

    local RebindButtonFrameUICorner = Instance.new("UICorner")
    RebindButtonFrameUICorner.CornerRadius = UDim.new(0.25, 0)
    RebindButtonFrameUICorner.Parent = RebindButtonFrame

    local RebindButton = Instance.new("TextButton")
    RebindButton.BackgroundTransparency = 1
    RebindButton.Size = UDim2.fromScale(1, 0.7)
    RebindButton.Position = UDim2.fromScale(0, 0.15)
    RebindButton.TextColor3 = Color3.fromRGB(255, 255, 255)
    RebindButton.Font = TextFont
    RebindButton.AutoButtonColor = false
    RebindButton.Text = "None"
    RebindButton.TextScaled = true
    RebindButton.Name = "RebindButton"
    RebindButton.Parent = RebindButtonFrame

    local DeleteButton = Instance.new("TextButton")
    DeleteButton.BackgroundTransparency = 1
    DeleteButton.Size = UDim2.fromScale(0.1, 1)
    DeleteButton.Position = UDim2.fromScale(0.9, 0)
    DeleteButton.Name = "DeleteButton"
    DeleteButton.Font = Enum.Font.FredokaOne
    DeleteButton.Text = "X"
    DeleteButton.TextScaled = true
    DeleteButton.TextColor3 = Color3.fromRGB(255, 255, 255)
    DeleteButton.Parent = MainFrame

    local DeleteButtonUICorner = Instance.new("UICorner")
    DeleteButtonUICorner.CornerRadius = UDim.new(0.25, 0)
    DeleteButtonUICorner.Parent = DeleteButton

    RebindButton.MouseButton1Click:Connect(function()
        if Rebinding == nil then
            Rebinding = Keybind
            RebindButton.Text = "Press Key"
        else
            RebindButton.Button.Text = "Keybind"
            Rebinding = nil
        end
    end)

    DeleteButton.MouseButton1Click:Connect(function()
        if TidalWaveKeybinds[Keybind] then
            TidalWaveKeybinds[Keybind] = nil
        end
        RebindButton.Text = "None"
    end)

	return MainFrame
end

function LookTowards(Vec1, Vec2)
	if not Vec1 or not Vec2 then return end
	if typeof(Vec1) ~= "Vector3" or typeof(Vec2) ~= "Vector3" then return end

	return CFrame.lookAt(Vec1, Vector3.new(Vec2.X, Vec1.Y, Vec2.Z))
end

function CreateMainFiles()
	if not IsFile then return end
	if not IsFolder then return end
	if not MakeFolder then return end
	
	if not IsFolder("TidalWave") then MakeFolder("TidalWave") end
	if not IsFolder("TidalWave/Profiles") then MakeFolder("TidalWave/Profiles") end
	if not IsFolder("TidalWave/StartUpSounds") then MakeFolder("TidalWave/StartUpSounds") end
	
	if not WriteFile then return end
	
	if not IsFile("TidalWave/GlobalSettings.json") then
		WriteFile("TidalWave/GlobalSettings.json", HttpService:JSONEncode({
			MenuOpenSpeed = MenuOpenSpeed,
			Font = TextFont,
			MenuKeybind = MenuKeybind,
			CMDBarKeybind = CMDBarKeybind,
			SearchBarKeybind = SearchBarKeybind,
			KeepTidalWave = KeepTidalWave,
			ProfileToAutoLoad = ProfileToAutoLoad,
			Aliases = Aliases,
		}))
	end
end

function GetAllCharacters()
	local Characters = {}
	for i, Player in pairs(Players:GetPlayers()) do
		local PlayerChar = GetChar(Player)
		if PlayerChar then
			table.insert(Characters, PlayerChar)
		end
	end
	return Characters
end

TidalWaveDrawing = {}

function TidalWaveDrawing.new(Type: "Square" | "Line" | "Text", Parent: Instance): "Drawing"
    local Properties = {}
    local Removed = false
    local Table = {}
    if Type == "Square" then
        local Square = Instance.new("Frame")
        Square.BackgroundTransparency = 1
        Square.BorderSizePixel = 0
        Square.Parent = DrawingFolder or Parent
        
        local UICorner = Instance.new("UICorner")
        UICorner.CornerRadius = UDim.new(0, 0)
        UICorner.Parent = Square
        
        local Outline = Instance.new("UIStroke")
        Outline.Thickness = 1
        Outline.Parent = Square
        
        function Table:Remove()
            Outline:Destroy()
            Outline = nil
            Square:Destroy()
            Square = nil
            Removed = true
        end
        
        function Table:IsRemoved()
            return Removed
        end
        
        return setmetatable(Table, {
            __newindex = function(self, i, v)
                if Removed then return end
                if i == "Size" then
                    Square.Size = UDim2.fromOffset(v.X, v.Y)
                    Properties.Size = Square.AbsoluteSize
                elseif i == "Position" then
                    Square.Position = UDim2.fromOffset(v.X, v.Y)
                    Properties.Position = Square.AbsolutePosition
                elseif i == "Color" then
                    Square.BackgroundColor3 = v
                    Properties.Color = Square.BackgroundColor3
                elseif i == "OutlineColor" then
                    Outline.Color = v
                    Properties.OutlineColor = Outline.Color
                elseif i == "OutlineTransparency" or i == "Transparency" then
                    Outline.Transparency = tonumber(v)
                    Properties.OutlineTransparency = Outline.Transparency
                elseif i == "OutlineThickness" or i == "Thickness" then
                    Outline.Thickness = tonumber(v)
                    Properties.OutlineThickness = Outline.Thickness
                elseif i == "Outline" then
                    Outline.Enabled = v
                    Properties.Outline = v
                elseif i == "Visible" then
                    Square.Visible = v
                    Outline.Enabled = v
                    Properties.Visible = v
                elseif i == "Centered" then
                    if v == true then
                        Square.AnchorPoint = Vector2.new(0.5, 0.5)
                        Properties.Centered = v
                    elseif v == false then
                        Square.AnchorPoint = Vector2.new(0, 0)
                        Properties.Centered = v
                    end
                elseif i == "Rotation" then
                    Square.Rotation = tonumber(v)
                    Properties.Rotation = Square.AbsoluteRotation
                elseif i == "CornerRadius" then
                    UICorner.CornerRadius = v
                    Properties.CornerRadius = v
                elseif i == "Filled" then
                    if v == true then
                        Square.BackgroundTransparency = 0
                    elseif v == false then
                        Square.BackgroundTransparency = 1
                    end
                    Properties.Filled = v
                elseif i == "FillTransparency" then
                    Square.BackgroundTransparency = v
                    Properties.FillTransparency = v
                end
            end,
            __index = function(self, i)
                if Removed then return end
                if Properties[i] then
                    return Properties[i]
                end
            end,
        })
    elseif Type == "Line" then
        local Line = Instance.new("Frame")
        Line.Size = UDim2.fromOffset(0, 1)
        Line.BorderSizePixel = 0
        Line.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
        Line.AnchorPoint = Vector2.new(0.5, 0.5)
        Line.Parent = DrawingFolder or Parent

        Line.Destroying:Once(function()
            Removed = true
        end)
        
        local From = Vector2.new(0, 0)
        local To = Vector2.new(0, 0)
        
        local function LineFrom(Line: Frame, From: Vector2, To: Vector2)
            local Pos = (From + To) / 2
            Line.Position = UDim2.fromOffset(Pos.X, Pos.Y)
        end
        
        local function LineTo(Line: Frame, From: Vector2, To: Vector2)
            local Pos = (From + To) / 2
            local Length = (From - To).Magnitude
            Line.Position = UDim2.fromOffset(Pos.X, Pos.Y)
            Line.Size = UDim2.fromOffset(Length, Line.Size.Y.Offset)
            Line.Rotation = math.deg(math.atan2(To.Y - From.Y, To.X - From.X))
        end
        
        function Table:Remove()
            Line:Destroy()
            Line = nil
            Removed = true
        end

        function Table:IsRemoved()
            return Removed
        end
        
        return setmetatable(Table, {
            __newindex = function(self, i, v)
                if Removed then return end
                if i == "From" then
                    From = Vector2.new(v.X, v.Y)
                    LineFrom(Line, From, To)
                    Properties.From = v
                elseif i == "To" then
                    To = Vector2.new(v.X, v.Y)
                    LineTo(Line, From, To)
                    Properties.To = To
                elseif i == "Thickness" then
                    Line.Size = UDim2.fromOffset(Line.Size.X.Offset, tonumber(v))
                    Properties.Thickness = Line.Size.Y.Offset
                elseif i == "Color" then
                    Line.BackgroundColor3 = v
                    Properties.Color = Line.BackgroundColor3
                elseif i == "Transparency" then
                    Line.BackgroundTransparency = v
                    Properties.Transparency = v
                    Properties.BackgroundTransparency = v
                elseif i == "Visible" then
                    Line.Visible = v
                    Properties.Visible = v
                end
            end,
            __index = function(self, i)
                if Removed then return end
                if Properties[i] then
                    return Properties[i]
                end
            end,
        })
    elseif Type == "Text" then
        local Text = Instance.new("TextLabel")
        Text.BackgroundTransparency = 1
        Text.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
        Text.Text = ""
        Text.Size = UDim2.fromOffset(0, 0)
        Text.TextColor3 = Color3.fromRGB(255, 255, 255)
        Text.Parent = DrawingFolder or Parent
            
        function Table:Remove()
            Text:Destroy()
            Text = nil
            Removed = true
        end
        
        function Table:IsRemoved()
            return Removed
        end
        
        return setmetatable(Table, {
            __newindex = function(self, i, v)
                if Removed then return end
                if i == "Text" then
                    Text.Text = tostring(v)
                    Properties.Text = Text.Text
                    Properties.TextBounds = Text.TextBounds
                elseif i == "BackgroundTransparency" or i == "Transparency" then
                    Text.BackgroundTransparency = tonumber(v)
                    Properties.BackgroundTransparency = Text.BackgroundTransparency
                elseif i == "Size" then
                    Text.Size = UDim2.fromOffset(v.X, v.Y)
                    Properties.Size = Text.AbsoluteSize
                elseif i == "Position" then
                    Text.Position = UDim2.fromOffset(v.X, v.Y)
                    Properties.Position = Text.AbsolutePosition
                elseif i == "TextSize" then
                    Text.TextSize = tonumber(v)
                    Properties.TextSize = Text.TextSize
                elseif i == "Centered" or i == "Center" then
                    if v == true then
                        Text.AnchorPoint = Vector2.new(0.5, 0.5)
                        Properties.Centered = v
                    elseif v == false then
                        Text.AnchorPoint = Vector2.new(0, 0)
                        Properties.Centered = v
                    end
                elseif i == "Visible" then
                    Text.Visible = v
                    Properties.Visible = Text.Visible
                elseif i == "Font" then
                    Text.Font = tonumber(v) and Enum.Font:FromValue(tonumber(v)) or tostring(v) and Enum.Font:FromName(tostring(v)) or Enum.Font:FromName(TextFont) or Enum.Font.SourceSansPro
                    Properties.Font = Text.Font
                elseif i == "RichText" then
                    Text.RichText = v
                    Properties.RichText = Text.RichText
                elseif i == "Outline" then
                    if v == true then
                        Text.TextStrokeTransparency = 0
                    else
                        Text.TextStrokeTransparency = 1
                    end
                elseif i == "OutlineTransparency" then
                    Text.TextStrokeTransparency = tonumber(v)
                    Properties.OutlineTransparency = Text.TextStrokeTransparency
                elseif i == "OutlineColor" then
                    Text.TextStrokeColor3 = v
                    Properties.OutlineColor = Text.TextStrokeColor3
                elseif i == "TextTransparency" then
                    Text.TextTransparency = tonumber(v)
                    Properties.TextTransparency = Text.TextTransparency
                elseif i == "TextXAlignmnet" then
                    Text.TextXAlignment = Enum.TextXAlignment:FromName(tostring(v))
                    Properties.TextXAlignment = Text.TextXAlignment
                elseif i == "TextYAlignment" then
                    Text.TextYAlignment = Enum.TextYAlignment:FromName(tostring(v))
                    Properties.TextYAlignment = Text.TextYAlignment
                end
            end,
            __index = function(self, i)
                if Removed then return end
                if Properties[i] then
                    return Properties[i]
                end
            end,
        })
    end
end

function GetSelectedCMD()
	local LowestPos = math.huge
	local SelectedCMD = nil
	for i, v in ipairs(CMDCategory.ContentFrame:GetChildren()) do
		if v:IsA("UIListLayout") or v:GetAttribute("Textbox") then continue end
        if not v.Visible then continue end
		if v.AbsolutePosition.Y < LowestPos then
            local TextObj = v:FindFirstChildWhichIsA("TextLabel")
			SelectedCMD = TextObj.Text
			LowestPos = v.AbsolutePosition.Y
		end
	end
	return SelectedCMD
end

function UpdateGlobalFiles()
	CreateMainFiles()
	if not WriteFile then return end

	WriteFile("TidalWave/GlobalSettings.json", HttpService:JSONEncode({
		MenuOpenSpeed = MenuOpenSpeed,
		Font = TextFont,
		MenuKeybind = MenuKeybind,
		CMDBarKeybind = CMDBarKeybind,
		SearchBarKeybind = SearchBarKeybind,
		KeepTidalWave = KeepTidalWave,
		ProfileToAutoLoad = ProfileToAutoLoad,
		Aliases = Aliases,
	}))
end

OnShutdown = Signal.new()

function Shutdown()
    local Start = tick()
    warn("[Tidal Wave]: Shutting Down")
    OnShutdown:Fire()
    --- Toggling All Modules Off
    warn("[Tidal Wave]: Toggling Off All Modules")
    local Args = {NoNotify = true}
    if HitboxExpander then
        ToggleHitboxExpander:Toggle(Args)
    end
    if ToolHitboxExpander then
        ToggleToolHitboxExpander:Toggle(Args)
    end
    if GlobalAimbot then
        ToggleGlobalAimbot:Toggle(Args)
    end
    if PartAimbot then
        TogglePartAimbot:Toggle(Args)
    end
    if Noclip then
        ToggleNoclip:Toggle(Args)
    end
    if Spasm then
        ToggleSpasm:Toggle(Args)
    end
    if HeadThrow then
        ToggleHeadThrow:Toggle(Args)
    end
    if AntiFling then
        ToggleAntiFling:Toggle(Args)
    end
    if FreezeAnimations then
        ToggleFreezeAnimations:Toggle(Args)
    end
    if Strengthen then
        ToggleStrengthen:Toggle(Args)
    end
    if LoopMaxSlopeAngle then
        ToggleMaxSlopeAngle:Toggle(Args)
    end
    if LoopHipHeight then
        ToggleLoopHipHeight:Toggle(Args)
    end
    if LoopSit then
        ToggleLoopSit:Toggle(Args)
    end
    if LoopNoSit then
        ToggleLoopNoSit:Toggle(Args)
    end
    if NoclipCamera then
        ToggleNoclipCamera:Toggle(Args)
    end
    if AntiRagdoll then
        ToggleAntiRagdoll:Toggle(Args)
    end
    if DisableState then
        ToggleDisableState:Toggle(Args)
    end
    if BangEnabled then
        BangPlayer:Toggle(Args)
    end
    if Jerking then
        ToggleJerk:Toggle(Args)
    end
    if AnimPlaying then
        PlayAnimation:Toggle(Args)
    end
    if Dancing then
        ToggleDance:Toggle(Args)
    end
	if SpeedHack then
		ToggleSpeedHack:Toggle(Args)
	end
    if JumpPowerEnabled then
        ToggleJumpPower:Toggle(Args)
    end
    if GravityEnabled then
        ToggleGravity:Toggle(Args)
    end
    if InfiniteJump then
        ToggleInfiniteJump:Toggle(Args)
    end
    if Fly then
		ToggleFly:Toggle(Args)
	end
    if Float then
		ToggleFloat:Toggle(Args)
	end
    if LoopTeleportEnabled then
        ToggleLoopTeleportToPlayer:Toggle(Args)
    end
    if ClickTeleportEnabled then
        ToggleClickTeleport:Toggle(Args)
    end
    if CFrameFly then
		ToggleCFrameFly:Toggle(Args)
	end
    if Swimming then
        ToggleSwim:Toggle(Args)
    end
    if FreecamEnabled then
		ToggleFreecam:Toggle(Args)
	end
    if WalkFling then
		WalkFling:Toggle(Args)
	end
    if SpiderHack then
		SpiderHack:Toggle(Args)
	end
	if FlyFling then
		ToggleFlyFling:Toggle(Args)
	end
	if FollowPlayer then
        ToggleFollowPlayer:Toggle(Args)
    end
	if OrbitEnabled then
		ToggleOrbitPlayer:Toggle(Args)
	end
    if FlyJump then
        ToggleFlyJump:Toggle(Args)
    end
    if WalkToPosEnabled then
        ToggleWalkToPos:Toggle(Args)
    end
	if Spinning then
		ToggleSpin:Toggle(Args)
	end
    if StareAt then
        ToggleStareAt:Toggle(Args)
    end
    if HeadSit then
        ToggleHeadSit:Toggle(Args)
    end
    if Carpet then
        ToggleCarpet:Toggle(Args)
    end

	StopScript = true

	local function ClearTable(Table)
		for i, v in pairs(Table) do
			if typeof(v) == "RBXScriptConnection" then
				v:Disconnect()
			elseif typeof(v) == "table" then
				ClearTable(v)
			end
		end
        table.clear(Table)
	end

    --- Clearing Tables ---

    warn("[Tidal Wave]: Clearing All Tables")
    
	ClearTable(Connections)
    ClearTable(TidalWaveKeybinds)
    ClearTable(GuiColors)
    ClearTable(CMDS)
    ClearTable(Aliases)
    ClearTable(ToggleFunctions)
    ClearTable(KeycodeMap)
    ClearTable(TidalWaveDrawing)

    Connections = nil
    TidalWaveKeybinds = nil
    GuiColors = nil
    CMDS = nil
    Aliases = nil
    ToggleFunctions = nil
    KeycodeMap = nil
    Spring = nil
    FreecamInput = nil
    keyboard = nil
    mouse = nil
    PlayerState = nil
    TidalWaveDrawing = nil
    
    --- Destroying Main Gui ---

    warn("[Tidal Wave]: Destroyed Main Gui")
	
	if TidalWaveScreenGui then
		TidalWaveScreenGui:Destroy()
        TidalWaveScreenGui = nil
	end

    warn("[Tidal Wave]: Finished Shutting Down In " .. tostring(SubstituteNumber(tick() - Start, 3)) .. " Seconds")
end

function AddCmd(CMD, AliasTable, Func)
	CMDS[CMD] = Func
	for i, Alias in pairs(AliasTable) do
		Aliases[Alias] = CMD
	end
end

function EnumFromName(EnumVal, ValToFind)
	for i, v in pairs(EnumVal:GetEnumItems()) do
		if string.lower(v) == ValToFind then
			return v
		end
	end
end

----------------------------------------------------------------------------------------------------- Commands

AddCmd("SpeedHack", {"Speed", "WalkSpeed", "LoopWalkSpeed", "LoopWS"}, function(Args)
	WalkSpeed = tonumber(Args[2]) or WalkSpeed
	if not SpeedHack then
		ToggleSpeedHack:Toggle()
	end
end)

AddCmd("UnSpeedHack", {"NoSpeedHack", "UnLoopWalkSpeed", "UnLoopWS", "NoLoopWalkSpeed", "NoLoopWS"}, function(Args)
	WalkSpeed = tonumber(Args[2]) or WalkSpeed
	if SpeedHack then
		ToggleSpeedHack:Toggle()
	end
end)

AddCmd("WalkSpeed", {"Speed", "SpeedHackSpeed", "WS"}, function(Args)
	WalkSpeed = tonumber(Args[2]) or WalkSpeed
end)

AddCmd("SpeedHackMethod", {"SpeedMethod"}, function(Args)
	if not Args[2] then return end

	if string.lower(tostring(Args[2])) == "bodyvelocity" or string.lower(tostring(Args[2])) == "bodyvel" or string.lower(tostring(Args[2])) == "bv" then
		SpeedHackMethod = "BodyVelocity"
	elseif string.lower(tostring(Args[2])) == "linearvelocity" or string.lower(tostring(Args[2])) == "linearvel" or string.lower(tostring(Args[2])) == "lv" then
		SpeedHackMethod = "LinearVelocity"
	elseif string.lower(tostring(Args[2])) == "bodyforce" or string.lower(tostring(Args[2])) == "bf" then
		SpeedHackMethod = "BodyForce"
	elseif string.lower(tostring(Args[2])) == "vectorforce" or string.lower(tostring(Args[2])) == "vf" then
		SpeedHackMethod = "VectorForce"
	end
end)

AddCmd("LoopJumpPower", {"LoopJP"}, function(Args)
	JumpPower = tonumber(Args[2]) or JumpPower
	if not JumpPowerEnabled then
		ToggleJumpPower:Toggle()
	end
end)

AddCmd("UnLoopJumpPower", {"UnLoopJP", "NoLoopJP", "NoLoopJumpPower"}, function()
	if JumpPowerEnabled then
		ToggleJumpPower:Toggle()
	end
end)

AddCmd("JumpPower", {"SetJumpPower", "SetJP"}, function(Args)
	JumpPower = tonumber(Args[2]) or JumpPower
end)

AddCmd("LoopGravity", {"LoopSetGravity"}, function(Args)
	Gravity = tonumber(Args[2]) or Gravity
	if not GravityEnabled then
		ToggleGravity:Toggle()
	end
end)

AddCmd("UnLoopGravity", {"NoLoopGravity"}, function()
	if GravityEnabled then
		ToggleGravity:Toggle()
	end
end)

AddCmd("Gravity", {"SetGravity"}, function(Args)
	Gravity = tonumber(Args[2]) or Gravity
end)

AddCmd("Noclip", {"Phase", "NC"}, function(Args)
	if not Noclip then
		ToggleNoclip:Toggle()
	end
end)

AddCmd("Clip", {"UnPhase", "NoPhase", "UnNoclip", "NoNoclip", "UnNC", "NoNC"}, function(Args)
	if Noclip then
		ToggleNoclip:Toggle()
	end
end)

AddCmd("InfiniteJump", {"InfJump"}, function()
	if not InfiniteJump then
		ToggleInfiniteJump:Toggle()
	end
end)

AddCmd("UnInfiniteJump", {"NoInfiniteJump", "UnInfJump", "NoInfJump"}, function()
	if InfiniteJump then
		ToggleInfiniteJump:Toggle()
	end
end)

AddCmd("Fly", {}, function(Args)
	FlySpeed = tonumber(Args[2]) or FlySpeed
	if not Fly then
		ToggleFly:Toggle()
	end
end)

AddCmd("UnFly", {"NoFly"}, function()
	if Fly then
		ToggleFly:Toggle()
	end
end)

AddCmd("FlySpeed", {}, function(Args)
	if Args[2] and tonumber(Args[2]) then
		FlySpeed = tonumber(Args[2])
	end
end)

AddCmd("Float", {}, function()
	if not Float then
		ToggleFloat:Toggle()
	end
end)

AddCmd("UnFloat", {"NoFloat"}, function()
	if Float then
		ToggleFloat:Toggle()
	end
end)

AddCmd("ClickTeleport", {"ClickTP"}, function()
	if not ClickTeleportEnabled then
		ToggleClickTeleport:Toggle()
	end
end)

AddCmd("UnClickTeleport", {"UnClickTP", "NoClickTP"}, function()
	if ClickTeleportEnabled then
		ToggleClickTeleport:Toggle()
	end
end)

AddCmd("ClickTeleportKeybind", {"ClickTpKeybind"}, function(Args)
	if Args[2] and EnumFromName(Enum.KeyCode, Args[2]) then
		TidalWaveKeybinds.ClickTeleport = EnumFromName(Enum.KeyCode, Args[2]).Name
	else
		Notify({
			Text = "Invalid Key Code",
		})
	end
end)

AddCmd("CFrameFly", {"CFly"}, function(Args)
	CFrameFlySpeed = tonumber(Args[2]) or CFrameFlySpeed
	if not CFrameFly then
		ToggleCFrameFly:Toggle()
	end
end)

AddCmd("UnCFrameFly", {"NoCFrameFly", "UnCFly", "NoCFly"}, function()
	if CFrameFly then
		ToggleCFrameFly:Toggle()
	end
end)

AddCmd("CFrameFlySpeed", {"CFlySpeed"}, function(Args)
	CFrameFlySpeed = tonumber(Args[2]) or CFrameFlySpeed
end)

AddCmd("Swim", {}, function()
	if not Swim then
		ToggleSwim:Toggle()
	end
end)

AddCmd("UnSwim", {"NoSwim"}, function()
	if Swim then
		ToggleSwim:Toggle()
	end
end)

AddCmd("WalkFling", {}, function()
	if not WalkFling then
		ToggleWalkFling:Toggle()
	end
end)

AddCmd("UnWalkFling", {"NoWalkFling"}, function()
	if WalkFling then
		ToggleWalkFling:Toggle()
	end
end)

AddCmd("SpiderHack", {"Spider"}, function(Args)
	SpiderHackSpeed = tonumber(Args[2]) or SpiderHackSpeed
	if not SpiderHack then
		ToggleSpiderHack:Toggle()
	end
end)

AddCmd("UnSpiderHack", {"NoSpiderHack", "UnSpider", "NoSpider"}, function()
	if SpiderHack then
		ToggleSpiderHack:Toggle()
	end
end)

AddCmd("SpiderHackSpeed", {"SpiderSpeed"}, function(Args)
	SpiderHackSpeed = tonumber(Args[2]) or SpiderHackSpeed
end)

AddCmd("FlyFling", {}, function(Args)
	FlySpeed = tonumber(Args[2]) or FlySpeed
	if not FlyFling then
		ToggleFlyFling:Toggle()
	end
end)

AddCmd("UnFlyFling", {"NoFlyFling"}, function()
	if FlyFling then
		ToggleFlyFling:Toggle()
	end
end)

AddCmd("FlyFlingSpeed", {}, function(Args)
	FlySpeed = tonumber(Args[2]) or FlySpeed
end)

AddCmd("NoShadows", {}, function()
	if not NoShadows then
		ToggleNoShadows:Toggle()
	end
end)

AddCmd("UnNoShadows", {"Shadows"}, function()
	if NoShadows then
		ToggleNoShadows:Toggle()
	end
end)

AddCmd("NoDepthOfField", {}, function()
	if not NoDepthOfField then
		ToggleNoShadows:Toggle()
	end
end)

AddCmd("UnNoDepthOfField", {"DepthOfField"}, function()
	if NoDepthOfField then
		ToggleNoShadows:Toggle()
	end
end)

AddCmd("NoFog", {}, function()
	if not NoFog then
		ToggleNoFog:Toggle()
	end
end)

AddCmd("UnNoFog", {"Fog"}, function()
	if NoFog then
		ToggleNoFog:Toggle()
	end
end)

AddCmd("NoAtmosphere", {}, function()
	if not NoAtmosphere then
		ToggleNoAtmosphere:Toggle()
	end
end)

AddCmd("UnNoAtmosphere", {"Atmosphere"}, function()
	if NoAtmosphere then
		ToggleNoAtmosphere:Toggle()
	end
end)

AddCmd("NoBloom", {}, function()
	if not NoBloom then
		ToggleNoBloom:Toggle()
	end
end)

AddCmd("UnNoBloom", {"Bloom"}, function()
	if NoBloom then
		ToggleNoBloom:Toggle()
	end
end)

AddCmd("NoBlur", {}, function()
	if not NoBlur then
		ToggleNoBlur:Toggle()
	end
end)

AddCmd("UnNoBlur", {"Blur"}, function()
	if NoBlur then
		ToggleNoBlur:Toggle()
	end
end)

AddCmd("NoColorCorrection", {}, function()
	if not NoColorCorrection then
		ToggleNoColorCorrection:Toggle()
	end
end)

AddCmd("UnNoColorCorrection", {"ColorCorrection"}, function()
	if NoColorCorrection then
		ToggleNoColorCorrection:Toggle()
	end
end)

AddCmd("NoSunRays", {}, function()
	if not NoSunRays then
		ToggleNoSunRays:Toggle()
	end
end)

AddCmd("UnNoSunRays", {"SunRays"}, function()
	if NoSunRays then
		ToggleNoSunRays:Toggle()
	end
end)

AddCmd("NoSky", {}, function()
	if not NoSky then
		ToggleNoSky:Toggle()
	end
end)

AddCmd("UnNoSky", {"Sky"}, function()
	if NoSky then
		ToggleNoSky:Toggle()
	end
end)

AddCmd("NoColorGrading", {}, function()
	if not NoColorGrading then
		ToggleNoColorGrading:Toggle()
	end
end)

AddCmd("UnNoColorGrading", {"ColorGrading"}, function()
	if NoColorGrading then
		ToggleNoColorGrading:Toggle()
	end
end)

AddCmd("ForceTimeOfDay", {"SetTimeOfDay", "TimeSet", "SetTime", "LoopSetTimeOfDay", "LoopTimeSet", "LoopSetTime"}, function(Args)
	ForceTimeOfDay = (tonumber(Args[2]) and math.round(tonumber(Args[2]))) or ForceTimeOfDay
	if not ForceTimeOfDayEnabled then
		ToggleForceTimeOfDay:Toggle()
	end
end)

AddCmd("UnForceTimeOfDay", {"NoForceTimeOfDay", "UnLoopSetTimeOfDay", "UnLoopTimeSet", "UnLoopSetTime"}, function()
	if ForceTimeOfDayEnabled then
		ToggleForceTimeOfDay:Toggle()
	end
end)

AddCmd("Brightness", {"LoopBrightness"}, function(Args)
	Brightness = tonumber(Args[2]) or Brightness
	if not BrightnessEnabled then
		ToggleBrightness:Toggle()
	end
end)

AddCmd("UnLoopBrightness", {}, function()
	if BrightnessEnabled then
		ToggleBrightness:Toggle()
	end
end)

AddCmd("NoLightingEffects", {}, function()
	if not NoShadows then
		ToggleNoShadows:Toggle({NoNotify = true})
	end
	if not NoDepthOfField then
		ToggleNoDepthOfField:Toggle({NoNotify = true})
	end
	if not NoFog then
		ToggleNoFog:Toggle({NoNotify = true})
	end
	if not NoAtmosphere then
		ToggleNoAtmosphere:Toggle({NoNotify = true})
	end
	if not NoBloom then
		ToggleNoBloom:Toggle({NoNotify = true})
	end
	if not NoBlur then
		ToggleNoBlur:Toggle({NoNotify = true})
	end
	if not NoColorCorrection then
		ToggleNoColorCorrection:Toggle({NoNotify = true})
	end
	if not NoSunRays then
		ToggleNoSunRays:Toggle({NoNotify = true})
	end
	if not NoSky then
		ToggleNoSky:Toggle({NoNotify = true})
	end
	if not NoColorGrading then
		ToggleNoColorGrading:Toggle({NoNotify = true})
	end
	Notify({
		Text = "<b><font color = 'rgb(255, 0, 0)'>Disabled</font></b> All Lighting Effects",
	})
end)

AddCmd("FullBright", {"FB"}, function()
    if not NoShadows then
		ToggleNoShadows:Toggle({NoNotify = true})
	end
	if not NoDepthOfField then
		ToggleNoDepthOfField:Toggle({NoNotify = true})
	end
	if not NoFog then
		ToggleNoFog:Toggle({NoNotify = true})
	end
	if not NoAtmosphere then
		ToggleNoAtmosphere:Toggle({NoNotify = true})
	end
	if not NoBloom then
		ToggleNoBloom:Toggle({NoNotify = true})
	end
	if not NoBlur then
		ToggleNoBlur:Toggle({NoNotify = true})
	end
	if not NoColorCorrection then
		ToggleNoColorCorrection:Toggle({NoNotify = true})
	end
	if not NoSunRays then
		ToggleNoSunRays:Toggle({NoNotify = true})
	end
	if not NoSky then
		ToggleNoSky:Toggle({NoNotify = true})
	end
	if not NoColorGrading then
		ToggleNoColorGrading:Toggle({NoNotify = true})
	end
    Brightness = 3
    if BrightnessEnabled then
        Lighting.Brightness = Brightness
    else
        ToggleBrightness:Toggle({NoNotify = true})
    end
    Ambient = Color3.fromRGB(255, 255, 255)
    if AmbientEnabled then
        Lighting.Ambient = Ambient
    else
        ToggleAmbient:Toggle({NoNotify = true})
    end
    OutdoorAmbient = Color3.fromRGB(255, 255, 255)
    if OutdoorAmbientEnabled then
        Lighting.OutdoorAmbient = OutdoorAmbient
    else
        ToggleOutdoorAmbient:Toggle({NoNotify = true})
    end
    ColorShiftBottom = Color3.fromRGB(255, 255, 255)
    if ColorShiftBottomEnabled then
        Lighting.ColorShift_Bottom = ColorShiftBottom
    else
        ToggleColorShiftBottom:Toggle({NoNotify = true})
    end
    ColorShiftTop = Color3.fromRGB(255, 255, 255)
    if ColorShiftTopEnabled then
        Lighting.ColorShift_Top = ColorShiftTop
    else
        ToggleColorShiftTop:Toggle({NoNotify = true})
    end
    ForceTimeOfDay = 12
    if ForceTimeOfDayEnabled then
        Lighting.ClockTime = ForceTimeOfDay
    else
        ToggleForceTimeOfDay:Toggle({NoNotify = true})
    end
end)

AddCmd("PlayerHighlightESP", {"PlrHighlightESP"}, function()
	if not PlayerHighlightESP then
		TogglePlayerHighlightESP:Toggle()
	end
end)

AddCmd("UnPlayerHighlightESP", {"UnPlrHighlightESP", "NoPlrHighlightESP"}, function()
	if PlayerHighlightESP then
		TogglePlayerHighlightESP:Toggle()
	end
end)

AddCmd("PlayerTracers", {"PlrTracers"}, function()
	if not PlayerTracers then
		TogglePlayerTracers:Toggle()
	end
end)

AddCmd("UnPlayerTracers", {"UnPlrTracers", "NoPlrTracers"}, function()
	if PlayerTracers then
		TogglePlayerTracers:Toggle()
	end
end)

AddCmd("HealthESP", {"HpESP"}, function()
	if not HealthESP then
		ToggleHealthESP:Toggle()
	end
end)

AddCmd("UnHealthESP", {"NoHealthESP", "UnHpESP", "NoHpESP"}, function()
	if HealthESP then
		ToggleHealthESP:Toggle()
	end
end)

AddCmd("NameESP", {}, function()
	if not NameESP then
		ToggleNameESP:Toggle()
	end
end)

AddCmd("UnNameESP", {"NoNameESP"}, function()
	if NameESP then
		ToggleNameESP:Toggle()
	end
end)

AddCmd("DistanceESP", {}, function()
	if not DistanceESP then
		ToggleDistanceESP:Toggle()
	end
end)

AddCmd("UnDistanceESP", {"NoDistanceESP"}, function()
	if DistanceESP then
		ToggleDistanceESP:Toggle()
	end
end)

AddCmd("WalkSpeedESP", {"SpeedESP"}, function()
	if not WalkSpeedESP then
		ToggleWalkSpeedESP:Toggle()
	end
end)

AddCmd("UnWalkSpeedESP", {"NoWalkSpeedESP", "NoSpeedESP"}, function()
	if WalkSpeedESP then
		ToggleWalkSpeedESP:Toggle()
	end
end)

AddCmd("JumpPowerESP", {"JpEsp"}, function()
	if not JumpPowerESP then
		ToggleJumpPowerESP:Toggle()
	end
end)

AddCmd("UnJumpPowerESP", {"NoJumpPowerESP", "UnJpESP", "NoJpESP"}, function()
	if JumpPowerESP then
		ToggleJumpPowerESP:Toggle()
	end
end)

AddCmd("PlayerDrawingESP", {"PlrDrawingESP"}, function()
	if not PlayerDrawingESP then
		TogglePlayerDrawingESP:Toggle()
	end
end)

AddCmd("UnPlayerDrawingESP", {"UnPlrDrawingESP", "NoPlrDrawingESP"}, function()
	if PlayerDrawingESP then
		TogglePlayerDrawingESP:Toggle()
	end
end)

AddCmd("InvisibleParts", {"InvisParts"}, function()
	if not InvisPartsEnabled then
		ToggleInvisibleParts:Toggle()
	end
end)

AddCmd("UnInvisibleParts", {"UnInvisParts", "NoInvisParts"}, function()
	if InvisPartsEnabled then
		ToggleInvisibleParts:Toggle()
	end
end)

AddCmd("LoopFov", {}, function(Args)
	Fov = tonumber(Args[2]) or Fov
	if not LoopFovEnabled then
		ToggleLoopFov:Toggle()
	end
end)

AddCmd("UnLoopFov", {"NoLoopFov"}, function()
	if LoopFovEnabled then
		ToggleLoopFov:Toggle()
	end
end)

AddCmd("Fov", {"SetFov"}, function(Args)
	Fov = tonumber(Args[2]) or Fov
end)

AddCmd("FixCamera", {"FixCam"}, function()
	FixCamera:Toggle()
end)

AddCmd("NoclipCamera", {"NoclipCam"}, function()
	if not NoclipCamera then
		ToggleNoclipCamera:Toggle()
	end
end)

AddCmd("ServerHop", {"Shop"}, function()
	ServerHop:Toggle()
end)

AddCmd("Rejoin", {"RJ"}, function()
	Rejoin:Toggle()
end)

AddCmd("View", {"Spectate"}, function(Args)
	local Player = FindPlayer(Args[2])
	if not Player then return end
	ToggleViewPlayer.Textbox.Text = Player.Name
	task.wait()
	if not ViewingPlayer then
		ToggleViewPlayer:Toggle({NoNotify = true})
	else
		ToggleViewPlayer:Toggle({NoNotify = true})
		task.wait()
		ToggleViewPlayer:Toggle({NoNotify = true})
	end
end)

AddCmd("UnView", {"NoView"}, function()
	if ViewingPlayer then
		ToggleViewPlayer:Toggle()
	end
end)

AddCmd("Reset", {}, function()
	local Char = GetChar(Plr)
	local Humanoid = GetHumanoid(Char)
	if Char and Humanoid then
		Humanoid:ChangeState(Enum.HumanoidStateType.Dead)
	end
end)

AddCmd("Freecam", {"Fc"}, function()
	if not FreecamEnabled then
		ToggleFreecam:Toggle()
	end
end)

AddCmd("UnFreecam", {"UnFc"}, function()
	if FreecamEnabled then
		ToggleFreecam:Toggle()
	end
end)

AddCmd("FreecamTp", {}, function(Args)
	if Args[2] and Args[3] and Args[4] then
		local SplitText = string.split(Args[2], ",")
		if #SplitText < 3 then
			SplitText = string.split(Args[2], " ")
		end
		if tonumber(SplitText[1]) and tonumber(SplitText[2]) and tonumber(SplitText[3]) then
			StartFreecam(CFrame.new(tonumber(SplitText[1]), tonumber(SplitText[2]), tonumber(SplitText[3])))
		end
	end
end)

AddCmd("FreecamGoto", {"FreecamTo"}, function(Args)
	if Args[2] then
		local Player = FindPlayer(Args[2])
		local Char = GetChar(Player)
		local Root = GetRootPart(Char)
		if Player and Char and Root then
			StartFreecam(Root.CFrame)
		end
	end
end)

AddCmd("NotifyFreecamPosition", {"NotifyFreecamPos"}, function()
	if FreecamRunning then
		Notify({
			Text = tostring(Camera.CFrame.Position.X) .. ", " .. tostring(Camera.CFrame.Position.X) .. ", " .. tostring(Camera.CFrame.Position.X),
			Duration = 5,
		})
		SetClipboard(tostring(Camera.CFrame.Position.X) ", " .. tostring(Camera.CFrame.Position.X) .. ", " .. tostring(Camera.CFrame.Position.X))
	else
		Notify({
			Text = "Freecam Is Not On",
		})
	end
end)

AddCmd("Notify", {}, function(Args)
	Notify({
		Title = Args[2] or "Tidal Wave",
		Text = Args[3] or "Notification",
		Duration = tonumber(Args[4]) or 3,
	})
end)

AddCmd("Orbit", {}, function(Args)
	local Player = FindPlayer(Args[2])
	if Player then
		PlayerToOrbit = Player
	end
	if tonumber(Args[3]) then
		OrbitSpeed = tonumber(Args[3])
	end
	if tonumber(Args[4]) then
		OrbitDistance = tonumber(Args[4])
	end
	if not OrbitEnabled then
		ToggleOrbitPlayer:Toggle()
	end
end)

AddCmd("FlyJump", {}, function()
	if not FlyJump then
		ToggleFlyJump:Toggle()
	end
end)

AddCmd("UnFlyJump", {"NoFlyJump"}, function()
	if FlyJump then
		ToggleFlyJump:Toggle()
	end
end)

AddCmd("Goto", {"To"}, function(Args)
	local Char = GetChar(Plr)
	local Root = GetRoot(Char)
	local Player = FindPlayer(Args[2])
	local PlayerChar = GetChar(Player)
	local PlayerRoot = GetRoot(PlayerChar)
	if not (Char and Root and Player and PlayerChar and PlayerRoot) then return end
	Root.CFrame = PlayerRoot.CFrame
end)

AddCmd("AddAlias", {"CreateAlias"}, function(Args)
	if Args[2] and Args[3] then
		AddAlias(Args[2], Args[3])
	end
end)

AddCmd("RemoveAlias", {"DeleteAlias", "DelAlias"}, function(Args)
	if Args[2] then
		RemoveAlias(Args[2])
	end
end)

AddCmd("GotoPos", {"ToPos"}, function(Args)
	local Char = GetChar(Plr)
	local Root = GetRoot(Char)

	if not (Char and Root and Args[2] and Args[3] and Args[4] and tonumber(Args[2]) and tonumber(Args[3]) and tonumber(Args[4])) then return end

	Root.CFrame = CFrame.new(tonumber(Args[2]), tonumber(Args[3]), tonumber(Args[4])) * CFrame.Angles(0, math.rad(Root.Rotation.Y), 0)
end)

AddCmd("NoClickDetectorLimits", {"NoCDLimits"}, function()
	NoClickDetectorLimits:Toggle()
end)

AddCmd("FireClickDetectors", {"FireCD"}, function()
	FireClickDetectors:Toggle()
end)

AddCmd("NoProximityPromptLimits", {"NoProxPromptLimits", "NoProxLimits", "NoPPLimit"}, function()
	NoProximityPromptLimits:Toggle()
end)

AddCmd("InstantProximityPrompts", {"InstantProxPrompts", "InstantProx", "InstantPP"}, function()
	if not InstantProximityPrompts then
		ToggleInstantProximityPrompts:Toggle()
	end
end)

AddCmd("UnInstantProximityPrompts", {"UnInstantProxPrompts", "UnInstantProx", "UnInstantPP", "NoInstantProxPrompts", "NoInstantProx", "NoInstantPP"}, function()
	if InstantProximityPrompts then
		ToggleInstantProximityPrompts:Toggle()
	end
end)

AddCmd("Xray", {}, function()
	if not Xray then
		ToggleXray:Toggle()
	end
end)

AddCmd("UnXray", {"NoXray"}, function()
	if Xray then
		ToggleXray:Toggle()
	end
end)

AddCmd("SaveGame", {}, function()
	SaveGame:Toggle()
end)

AddCmd("LockWorkspace", {"LockWS"}, function()
	if UnLockWorkspace then
		ToggleLockWorkspace:Toggle()
	end
end)

AddCmd("UnLockWorkspace", {"UnLockWS"}, function()
	if not UnLockWorkspace then
		ToggleLockWorkspace:Toggle()
	end
end)

AddCmd("VehicleNoclip", {"VehicleNC", "VNoclip", "VNC"}, function()
	if not VehicleNoclip then
		ToggleVehicleNoclip:Toggle()
	end
end)

AddCmd("UnVehicleNoclip", {"NoVehicleNoclip", "UnVehicleNC", "UnVNoclip", "UnVNC", "NoVehicleNC", "NoVNoclip", "NoVNC"}, function()
	if VehicleNoclip then
		ToggleVehicleNoclip:Toggle()
	end
end)

AddCmd("PartPath", {"ClickPartToSelectToSelect"}, function()
	if not ClickPartToSelect then
		ToggleClickPartToSelectToSelect:Toggle()
	end
end)

AddCmd("UnPartPath", {"NoPartPath", "UnClickPartToSelectToSelect", "NoClickPartToSelectToSelect"}, function()
	if ClickPartToSelect then
		ToggleClickPartToSelectToSelect:Toggle()
	end
end)

AddCmd("AntiVoid", {}, function(Args)
	AntiVoidOffset = tonumber(Args[2]) or AntiVoidOffset
	if not AntiVoid then
		ToggleAntiVoid:Toggle()
	end
end)

AddCmd("UnAntiVoid", {"NoAntiVoid"}, function()
	if AntiVoid then
		ToggleAntiVoid:Toggle()
	end
end)

AddCmd("ClickDelete", {"ClickDel"}, function()
	if not ClickDelete then
		ToggleClickDelete:Toggle()
	end
end)

AddCmd("UnClickDelete", {"UnClickDel", "NoClickDelete", "NoClickDel"}, function()
	if ClickDelete then
		ToggleClickDelete:Toggle()
	end
end)

AddCmd("DeleteInvisibleParts", {"DeleteInvisParts", "RemoveInvisibleParts", "RemoveInvisParts"}, function()
	DeleteInvisParts:Toggle()
end)

AddCmd("TeleportUnAchored", {"TeleportUA", "Tpua"}, function()
	TeleportUnAchored:Toggle()
end)

AddCmd("DeleteInstance", {"DeleteObject", "Delete"}, function(Args)
	if not Args[2] then return end
	for i, v in pairs(workspace:GetDescendants()) do
		if string.lower(v.Name) == string.lower(Args[2]) then
			v:Destroy()
		end
	end
end)

AddCmd("DeleteInstanceOfClass", {"DeleteInstanceClass", "DelInstanceOfClass", "DelInstanceClass", "DeleteClass", "DelClass"}, function(Args)
	if not Args[2] then return end
	for i, v in pairs(workspace:GetDescendants()) do
		if string.lower(v.ClassName) == string.lower(Args[2]) then
			v:Destroy()
		end
	end
end)

AddCmd("ServerHop", {"Shop"}, function()
	ServerHop:Toggle()
end)

AddCmd("UIScale", {"GUIScale"}, function(Args)
	if not tonumber(Args[2]) then return end
	TidalWaveUIScale.Scale = tonumber(Args[2])
end)

----------------------------------------------------------------------------------------------------- CREATING CATAGORIES

Combat = CreateCategory({
	Name = "Combat",
	Size = UDim2.fromScale(1, 1),
	Pos = UDim2.fromScale(0.01, 0),
	ClosedPos = UDim2.fromScale(0.45, -1),
})
PlayerCategory = CreateCategory({
	Name = "Player",
	Size = UDim2.fromScale(1, 1),
	Pos = UDim2.fromScale(0.105, 0),
	ClosedPos = UDim2.fromScale(1, 1),
})
Movement = CreateCategory({
	Name = "Movement",
	Size = UDim2.fromScale(1, 1),
	Pos = UDim2.fromScale(0.2, 0),
	ClosedPos = UDim2.fromScale(-0.25, -1),
})
Visuals = CreateCategory({
	Name = "Visuals",
	Size = UDim2.fromScale(1, 1),
	Pos = UDim2.fromScale(0.295, 0),
	ClosedPos = UDim2.fromScale(-0.25, 1),
})
WorldCategory = CreateCategory({
	Name = "World",
	Size = UDim2.fromScale(1, 1),
	Pos = UDim2.fromScale(0.39, 0),
	ClosedPos = UDim2.fromScale(1, -1)
})
Other = CreateCategory({
	Name = "Other",
	Size = UDim2.fromScale(1, 1),
	Pos = UDim2.fromScale(0.485, 0),
	ClosedPos = UDim2.fromScale(1, 1),
})
MenuSettings = CreateCategory({
	Name = "Settings",
	Size = UDim2.fromScale(1, 0.4),
	Pos = UDim2.fromScale(0.58, 0),
	ClosedPos = UDim2.fromScale(1, -0.5),
})
KeybindsCategory = CreateCategory({
	Name = "Keybinds",
	Size = UDim2.fromScale(1, 0.53),
	Pos = UDim2.fromScale(0.58, 0.35),
	ClosedPos = UDim2.fromScale(-0.45, 1),
})
SearchCategory = CreateCategory({
	Name = "Search",
	Size = UDim2.fromScale(1, 0.1),
	Pos = UDim2.fromScale(0.675, 0),
	ClosedPos = UDim2.fromScale(0.45, -1),
})
CMDCategory = CreateCategory({
	Name = "CMD Bar",
	Size = UDim2.fromScale(1, 0.4),
	Pos = UDim2.fromScale(0.675, 0.125),
	ClosedPos = UDim2.fromScale(0.45, 1),
})

----------------------------------------------------------------------------------------------------- SERVER INFO

GameIdTextLabel = CreateButton({
	Text = "Game ID: " .. tostring(game.GameId),
	Parent = ServerInfoServerFrame,
	Info = "Click To Copy Game Id",
	Function = function()
		SetClipboard(tostring(game.GameId), "Copied Game ID To SetClipboard")
	end,
})

PlaceIdTextLabel = CreateButton({
	Text = "Place ID: " .. tostring(game.PlaceId),
	Parent = ServerInfoServerFrame,
	Info = "Click To Copy Place Id",
	Function = function()
		SetClipboard(tostring(game.PlaceId), "Copied Place ID To SetClipboard")
	end,
})

JobIdTextLabel = CreateButton({
	Text = "Job Id: " .. tostring(game.JobId),
	Parent = ServerInfoServerFrame,
	Info = "Click To Copy Job Id",
	Function = function()
		SetClipboard(tostring(game.JobId), "Copied Job ID To SetClipboard")
	end,
})

PlaceVersionTextLabel = CreateButton({
	Text = "Place Version: " .. tostring(game.PlaceVersion),
	Parent = ServerInfoServerFrame,
	Info = "Click To Copy Place Version",
	Function = function()
		SetClipboard(tostring(game.PlaceVersion), "Copied Place Version To SetClipboard")
	end,
})

CreatorTypeTextLabel = CreateButton({
	Text = "Creator Type: " .. game.CreatorType.Name,
	Parent = ServerInfoServerFrame,
	Info = "Click To Copy Creator Type",
	Function = function()
		SetClipboard(game.CreatorType.Name, "Copied Creator Type To SetClipboard")
	end,
})

GameGenreTextLabel = CreateButton({
	Text = "Game Genre: " .. game.Genre.Name,
	Parent = ServerInfoServerFrame,
	Info = "Click To Copy Game Genre",
	Function = function()
		SetClipboard(game.Genre.Name, "Copied Game Genre To SetClipboard")
	end,
})

CreatorIdTextLabel = CreateButton({
	Text = "Creator Id: " .. tostring(game.CreatorId),
	Parent = ServerInfoServerFrame,
	Info = "Click To Copy Creator Id",
	Function = function()
		SetClipboard(tostring(game.CreatorId), "Copied Creator ID To SetClipboard")
	end,
})

MaxPlayersTextLabel = CreateButton({
	Text = "Max Players: " .. tostring(Players.MaxPlayers),
	Parent = ServerInfoServerFrame,
	Info = "Click To Copy Max Players",
	Function = function()
		SetClipboard(tostring(Players.MaxPlayers), "Copied Max Players To SetClipboard")
	end,
})

PreferredPlayersTextLabel = CreateButton({
	Text = "Preferred Players: " .. tostring(Players.PreferredPlayers),
	Parent = ServerInfoServerFrame,
	Info = "Click To Copy Preferred Players",
	Function = function()
		SetClipboard(tostring(Players.PreferredPlayers), "Copied Perferred Players To SetClipboard")
	end,
})

DistributedGameTimeTextLabel = CreateButton({
	Text = "Distributed Game Time: " .. tostring(time()),
	Parent = ServerInfoClientFrame,
	Info = "Click To Copy Distributed Game Time",
	Function = function()
		SetClipboard(tostring(time()), "Copied Distributed Game Time To SetClipboard")
	end,
})

AmountOfPlayersTextLabel = CreateButton({
	Text = "Players: " .. tostring(#Players:GetPlayers()),
	Parent = ServerInfoServerFrame,
	Info = "Click To Copy Distributed Game Time",
	Function = function()
		SetClipboard(tostring(#Players:GetPlayers()), "Copied Total Player To SetClipboard")
	end,
})

RespawnTimeTextLabel = CreateButton({
	Text = "Respawn Time: " .. tostring(Players.RespawnTime),
	Parent = ServerInfoServerFrame,
	Info = "Click To Copy Respawn Time",
	Function = function()
		SetClipboard(tostring(Players.RespawnTime), "Copied Respawn Time To SetClipboard")
	end,
})

PlayerNameTextLabel = CreateButton({
	Text = "Player Name: " .. Plr.Name,
	Parent = ServerInfoClientFrame,
	Info = "Click To Copy Local Player Name",
	Function = function()
		SetClipboard(Plr.Name, "Copied Local Player Name")
	end,
})

DisplayNameTextLabel = CreateButton({
	Text = "Display Name: " .. Plr.DisplayName,
	Parent = ServerInfoClientFrame,
	Info = "Click To Copy Local Player Display Name",
	Function = function()
		SetClipboard(Plr.DisplayName, "Copied Local Player Display Name")
	end,
})

AccountAgeTextLabel = CreateButton({
	Text = "Account Age: " .. tostring(Plr.AccountAge),
	Parent = ServerInfoClientFrame,
	Info = "Click To Copy Local Player Account Age",
	Function = function()
		SetClipboard(tostring(Plr.AccountAge), "Copied Local Player Account Age To SetClipboard")
	end,
})

UserIdTextLabel = CreateButton({
	Text = "User ID: " .. tostring(Plr.UserId),
	Parent = ServerInfoClientFrame,
	Info = "Click To Copy Local Player User ID",
	Function = function()
		SetClipboard(tostring(Plr.UserId), "Copied Local Player User ID")
	end,
})

CameraMinZoomTextLabel = CreateButton({
	Text = "Camera Min Zoom: " .. tostring(Plr.CameraMinZoomDistance),
	Parent = ServerInfoClientFrame,
	Info = "Click To Copy Local Player Camera Min Zoom",
	Function = function()
		SetClipboard(tostring(Plr.CameraMinZoomDistance), "Copied Camera Min Zoom To SetClipboard")
	end,
})

CameraMaxZoomTextLabel = CreateButton({
	Text = "Camera Max Zoom: " .. tostring(Plr.CameraMaxZoomDistance),
	Parent = ServerInfoClientFrame,
	Info = "Click To Copy Local Player Camera Max Zoom",
	Function = function()
		SetClipboard(tostring(Plr.CameraMaxZoomDistance), "Copied Camera Max Zoom To SetClipboard")
	end,
})

CameraModeTextLabel = CreateButton({
	Text = "Camera Mode: " .. Plr.CameraMode.Name,
	Parent = ServerInfoClientFrame,
	Info = "Click To Copy Local Player Camera Mode",
	Function = function()
		SetClipboard(Plr.CameraMode.Name, "Copied Camera Mode To SetClipboard")
	end,
})

DevCameraOcclusionModeTextLabel = CreateButton({
	Text = "Dev Camera Occlusion Mode: " .. Plr.DevCameraOcclusionMode.Name,
	Parent = ServerInfoClientFrame,
	Info = "Click To Copy Dev Camera Occlusion Mode",
	Function = function()
		SetClipboard(Plr.DevCameraOcclusionMode.Name, "Copied Dev Camera Occlusion Mode To SetClipboard")
	end,
})

DevComputerCameraModeTextLabel = CreateButton({
	Text = "Dev Computer Camera Mode: " .. Plr.DevComputerCameraMode.Name,
	Parent = ServerInfoClientFrame,
	Info = "Click To Copy Dev Computer Camera Mode",
	Function = function()
		SetClipboard(Plr.DevComputerCameraMode.Name, "Copied Dev Computer Camera Mode To SetClipboard")
	end,
})

DevEnableMouseLockTextLabel = CreateButton({
	Text = "Dev Enable Mouse Lock: " .. tostring(Plr.DevEnableMouseLock),
	Parent = ServerInfoClientFrame,
	Info = "Click To Copy Dev Enable Mouse Lock",
	Function = function()
		SetClipboard(tostring(Plr.DevEnableMouseLock), "Copied Dev Enable Mouse Lock To SetClipboard")
	end,
})

DevTouchCameraModeTextLabel = CreateButton({
	Text = "Dev Touch Camera Mode: " .. Plr.DevTouchCameraMode.Name,
	Parent = ServerInfoClientFrame,
	Info = "Click To Copy Dev Touch Camera Mode",
	Function = function()
		SetClipboard(Plr.DevTouchCameraMode.Name, "Copied Dev Touch Camera Mode To SetClipboard")
	end,
})

HealthDisplayDistanceTextLabel = CreateButton({
	Text = "Health Display Distance: " .. tostring(Plr.HealthDisplayDistance),
	Parent = ServerInfoClientFrame,
	Info = "Click To Copy Health Display Distance",
	Function = function()
		SetClipboard(tostring(Plr.HealthDisplayDistance), "Copied Local Player Health Display Distance To SetClipboard")
	end,
})

NameDisplayDistanceTextLabel = CreateButton({
	Text = "Name Display Distance: " .. tostring(Plr.NameDisplayDistance),
	Parent = ServerInfoClientFrame,
	Info = "Click To Copy Name Display Distance",
	Function = function()
		SetClipboard(tostring(Plr.NameDisplayDistance), "Copied Local Player Name Display Distance To SetClipboard")
	end,
})

DevComputerMovementModeTextLabel = CreateButton({
	Text = "Dev Computer Movement Mode: " .. Plr.DevComputerMovementMode.Name,
	Parent = ServerInfoClientFrame,
	Info = "Click To Copy Dev Computer Movement Mode",
	Function = function()
		SetClipboard(Plr.DevComputerMovementMode.Name, "Copied Dev Computer Movement Mode To SetClipboard")
	end,
})

DevTouchMovementModeTextLabel = CreateButton({
	Text = "Dev Touch Movement Mode: " .. Plr.DevTouchMovementMode.Name,
	Parent = ServerInfoClientFrame,
	Info = "Click To Copy Dev Touch Movement Move",
	Function = function()
		SetClipboard(Plr.DevTouchMovementMode.Name, "Copied Dev Touch Movement Mode To SetClipboard")
	end,
})

TeamNeutralTextLabel = CreateButton({
	Text = "Team Neutral: " .. tostring(Plr.Neutral),
	Parent = ServerInfoClientFrame,
	Info = "Click To Copy Team Neutral",
	Function = function()
		SetClipboard(Plr.Neutral, "Copied Team Neutral To SetClipboard")
	end,
})

TeamTextLabel = CreateButton({
	Text = "Team: " .. tostring(Plr.Team),
	Parent = ServerInfoClientFrame,
	Info = "Click To Copy Team Name",
	Function = function()
		SetClipboard(Plr.Team, "Copied Team Name To SetClipboard")
	end,
})

TeamColorTextLabel = CreateButton({
	Text = "Team Color: " .. tostring(math.round(Plr.TeamColor.Color.R * 255)) .. ", " .. tostring(math.round(Plr.TeamColor.Color.G * 255)) .. ", " .. tostring(math.round(Plr.TeamColor.Color.B * 255)),
	Parent = ServerInfoClientFrame,
	Info = "Click To Copy Team Color",
	Function = function()
		SetClipboard(tostring(math.round(Plr.TeamColor.Color.R * 255)) .. ", " .. tostring(math.round(Plr.TeamColor.Color.G * 255)) .. ", " .. tostring(math.round(Plr.TeamColor.Color.B * 255)), "Copied Team Color To SetClipboard")
	end,
})

TotalInstances = #game:GetDescendants()

TotalInstancesTextLabel = CreateButton({
	Text = "Total Instances: " .. tostring(TotalInstances),
	Parent = ServerInfoServerFrame,
	Info = "Click To Copy Total Instances",
	Function = function()
		SetClipboard(tostring(TotalInstances), "Copied Total Instances To SetClipboard")
	end,
})

HumanoidAppearenceIDTextLabel = CreateButton({
	Text = "Appearence ID: " .. tostring(Plr.CharacterAppearanceId),
	Parent = ServerInfoClientFrame,
	Info = "Click To Copy Appearence ID",
	Function = function()
		SetClipboard(tostring(Plr.CharacterAppearanceId), "Copied Total Instances To SetClipboard")
	end,
})

task.spawn(function()
	Connections.ServerInfo.PlayerAddedConnection = Players.PlayerAdded:Connect(function()
		AmountOfPlayersTextLabel.Btn.Text = "Players: " .. tostring(#Players:GetPlayers())
	end)
	Connections.ServerInfo.PlayerRemovedConnection = Players.PlayerRemoving:Connect(function()
		AmountOfPlayersTextLabel.Btn.Text = "Players: " .. tostring(#Players:GetPlayers())
	end)
	Connections.ServerInfo.RespawnTimeConnection = Players:GetPropertyChangedSignal("RespawnTime"):Connect(function()
		RespawnTimeTextLabel.Btn.Text = "Respawn Time: " .. tostring(Players.RespawnTime)
	end)
	Connections.ServerInfo.CameraMinZoomConnection = Plr:GetPropertyChangedSignal("CameraMinZoomDistance"):Connect(function()
		CameraMinZoomTextLabel.Btn.Text = "Camera Min Zoom: " .. tostring(Plr.CameraMinZoomDistance)
	end)
	Connections.ServerInfo.CameraMaxZoomConnection = Plr:GetPropertyChangedSignal("CameraMaxZoomDistance"):Connect(function()
		CameraMaxZoomTextLabel.Btn.Text = "Camera Max Zoom: " .. tostring(Plr.CameraMaxZoomDistance)
	end)
	Connections.ServerInfo.CameraModeConnection = Plr:GetPropertyChangedSignal("CameraMode"):Connect(function()
		CameraModeTextLabel.Btn.Text = "Camera Mode: " .. Plr.CameraMode.Name
	end)
	Connections.ServerInfo.DevCameraOcclusionModeConnection = Plr:GetPropertyChangedSignal("DevCameraOcclusionMode"):Connect(function()
		DevCameraOcclusionModeTextLabel.Btn.Text = "Dev Camera Occlusion Mode: " .. Plr.DevCameraOcclusionMode.Name
	end)
	Connections.ServerInfo.DevComputerCameraModeConnection = Plr:GetPropertyChangedSignal("DevComputerCameraMode"):Connect(function()
		DevComputerCameraModeTextLabel.Btn.Text = "Dev Computer Camera Mode: " .. Plr.DevComputerCameraMode.Name
	end)
	Connections.ServerInfo.DevEnableMouseLockConnection = Plr:GetPropertyChangedSignal("DevEnableMouseLock"):Connect(function()
		DevEnableMouseLockTextLabel.Btn.Text = "Dev Enable Mouse Lock: " .. tostring(Plr.DevEnableMouseLock)
	end)
	Connections.ServerInfo.DevTouchCameraModeConnection = Plr:GetPropertyChangedSignal("DevTouchCameraMode"):Connect(function()
		DevTouchCameraModeTextLabel.Btn.Text = "Dev Touch Camera Mode: " .. Plr.DevTouchCameraMode.Name
	end)
	Connections.ServerInfo.HealthDisplayDistanceConnection = Plr:GetPropertyChangedSignal("HealthDisplayDistance"):Connect(function()
		HealthDisplayDistanceTextLabel.Btn.Text = "Health Display Distance: " .. tostring(Plr.HealthDisplayDistance)
	end)
	Connections.ServerInfo.NameDisplayDistanceConnection = Plr:GetPropertyChangedSignal("NameDisplayDistance"):Connect(function()
		NameDisplayDistanceTextLabel.Btn.Text = "Name Display Distance: " .. tostring(Plr.NameDisplayDistance)
	end)
	Connections.ServerInfo.DevComputerMovementModeConnection = Plr:GetPropertyChangedSignal("DevComputerMovementMode"):Connect(function()
		DevComputerMovementModeTextLabel.Btn.Text = "Dev Computer Movement Mode: " .. Plr.DevComputerMovementMode.Name
	end)
	Connections.ServerInfo.DevTouchMovementModeConnection = Plr:GetPropertyChangedSignal("DevTouchMovementMode"):Connect(function()
		DevTouchMovementModeTextLabel.Btn.Text = "Dev Touch Movement Mode: " .. Plr.DevTouchMovementMode.Name
	end)
	Connections.ServerInfo.TeamNeutralConnection = Plr:GetPropertyChangedSignal("Neutral"):Connect(function()
		TeamNeutralTextLabel.Btn.Text = "Team Neutral: " .. tostring(Plr.Neutral)
	end)
	Connections.ServerInfo.TeamColorConnection = Plr:GetPropertyChangedSignal("TeamColor"):Connect(function()
		TeamColorTextLabel.Btn.Text = "Team Color: " .. tostring(math.round(Plr.TeamColor.Color.R * 255)) .. ", " .. tostring(math.round(Plr.TeamColor.Color.G * 255)) .. ", " .. tostring(math.round(Plr.TeamColor.Color.B * 255))
	end)
	Connections.ServerInfo.DescendantAddedConnection = game.DescendantAdded:Connect(function()
		TotalInstances += 1
		TotalInstancesTextLabel.Btn.Text = "Total Instances: " .. tostring(TotalInstances)
	end)
	Connections.ServerInfo.DescendantRemovedConnection = game.DescendantRemoving:Connect(function()
		TotalInstances -= 1
		TotalInstancesTextLabel.Btn.Text = "Total Instances: " .. tostring(TotalInstances)
	end)
end)

----------------------------------------------------------------------------------------------------- KEYBINDS

do
	RebindMenuKeybind = CreateKeybind({
		Keybind = MenuKeybind,
		KeybindName = "Menu",
		Custom = true,
		OnDelete = function()
			MenuKeybind = nil
		end,
	})
	
	RebindCMDBarKeybind = CreateKeybind({
		Keybind = CMDBarKeybind,
		KeybindName = "CMDBar",
		Custom = true,
		OnDelete = function()
			CMDBarKeybind = nil
		end,
	})
	
	RebindSearchBarKeybind = CreateKeybind({
		Keybind = SearchBarKeybind,
		KeybindName = "SearchBar",
		Custom = true,
		OnDelete = function()
			SearchBarKeybind = nil
		end,
	})
	
	ClickPartToSelectOutline = Instance.new("SelectionBox")
	ClickPartToSelectOutline.Color3 = Color3.fromRGB(0, 175, 255)
	ClickPartToSelectOutline.LineThickness = 0.075
    ClickPartToSelectOutline.Parent = EspFolder
	
	Connections.TidalWave.MainInputBeganConnection = UIS.InputBegan:Connect(function(Input, Proc)
		if not ChatboxFocused() and not TidalWaveFocused then
			if StopScript then return end
			------------------------------------------------------------------------------------------------- REBINDING
			if Input.KeyCode ~= Enum.KeyCode.Unknown and Input.KeyCode ~= Enum.KeyCode.Escape then
				if Rebinding == "Menu" then
					MenuKeybind = Input.KeyCode.Name
					RebindMenuKeybind.KeybindLabel.Text = "Menu Keybind: " .. MenuKeybind
					task.wait()
					Rebinding = nil
					return
				elseif Rebinding == "CMDBar" then
					CMDBarKeybind = Input.KeyCode.Name
					RebindCMDBarKeybind.KeybindLabel.Text = "CMDBar Keybind: " .. CMDBarKeybind
					task.wait()
					Rebinding = nil
					return
				elseif Rebinding == "SearchBar" then
					SearchBarKeybind = Input.KeyCode.Name
					RebindSearchBarKeybind.KeybindLabel.Text = "SearchBar Keybind: " .. SearchBarKeybind
					task.wait()
					Rebinding = nil
					return
				elseif Rebinding then
					TidalWaveKeybinds[Rebinding] = Input.KeyCode.Name
                    
					for i, v in pairs(SettingsMenu.ScrollingFrame:GetChildren()) do
						if string.find(v.Name, Rebinding) then
							if v:FindFirstChild("RebindButtonFrame") and v.RebindButtonFrame:FindFirstChild("RebindButton") then
								v.RebindButtonFrame.RebindButton.Text = TidalWaveKeybinds[Rebinding]
							end
						end
					end
                    
					task.wait()
					Rebinding = nil
					
					return
                end
            elseif Input.KeyCode == Enum.KeyCode.Escape or Input.KeyCode == Enum.KeyCode.Unknown then
                if Rebinding == "Menu" then
					MenuKeybind = "RightShift"
					RebindMenuKeybind.KeybindLabel.Text = "Menu Keybind: " .. MenuKeybind
					task.wait()
					Rebinding = nil
					return
				elseif Rebinding == "CMDBar" then
					CMDBarKeybind = ""
					RebindCMDBarKeybind.KeybindLabel.Text = "CMDBar Keybind: " .. CMDBarKeybind
					task.wait()
					Rebinding = nil
					return
				elseif Rebinding == "SearchBar" then
					SearchBarKeybind = ""
					RebindSearchBarKeybind.KeybindLabel.Text = "SearchBar Keybind: " .. SearchBarKeybind
					task.wait()
					Rebinding = nil
					return
				elseif Rebinding then
					TidalWaveKeybinds[Rebinding] = ""
					
					for i, v in pairs(SettingsMenu.ScrollingFrame:GetChildren()) do
						if string.find(v.Name, Rebinding) then
							if v:FindFirstChild("RebindButtonFrame") and v.RebindButtonFrame:FindFirstChild("RebindButton") then
								v.RebindButtonFrame.RebindButton.Text = "None"
							end
						end
					end

					task.wait()
					Rebinding = nil
					
					return
                end
			end
		end
		
		------------------------------------------------------------------------------------------------- BINDED KEYS PRESSED
		
		local Char = GetChar(Plr)
		local Humanoid = GetHumanoid(Char)
		local Root = GetRootPart(Char)
        
		if Input.KeyCode.Name == CMDBarKeybind and CMDCategory:IsVisible() then
			CMDBar.Textbox.Text = ""
			task.wait()
			CMDBar.Textbox:CaptureFocus()
		elseif Input.KeyCode.Name == SearchBarKeybind and SearchCategory:IsVisible() then
			SearchTextbox.Textbox.Text = ""
			task.wait()
			SearchTextbox.Textbox:CaptureFocus()
		elseif Input.KeyCode == Enum.KeyCode.Tab and CMDBar.Textbox:IsFocused() then
			SelectedCMD = GetSelectedCMD()
			if TableFind(CMDS, SelectedCMD, true) then
				CMDBar.Textbox.Text = SelectedCMD
				CMDBar.Textbox.CursorPosition = string.len(CMDBar.Textbox.Text)
			elseif TableFind(Aliases, SelectedCMD, true) then
				CMDBar.Textbox.Text = SelectedCMD
				CMDBar.Textbox.CursorPosition = string.len(CMDBar.Textbox.Text)
			end
			CMDCategory.ContentFrame.CanvasPosition = Vector2.new(0, 0)
		end

		if TidalWaveFocused or ChatboxFocused() then return end
		
		if Input.UserInputType == Enum.UserInputType.MouseButton1 then
			if TidalWaveKeybinds.ClickTeleport and UIS:IsKeyDown(TidalWaveKeybinds.ClickTeleport) and ClickTeleportEnabled and Char and Root then
				Root.CFrame = CFrame.new(Mouse.Hit.Position + Vector3.new(0, 3.1, 0)) * CFrame.Angles(0, math.rad(Root.Orientation.Y), 0)
				if ClickTeleportSoundEnabled then
					local Sound = Instance.new("Sound")
					Sound.SoundId = ClickTeleportSound
                    Sound.Parent = SoundsFolder
					Sound:Play()
					Sound.Ended:Once(function()
						Sound:Destroy()
					end)
				end
			end
			if Mouse.Target then
				if ClickPartToSelect then
                    local MouseRaycast = Camera:ViewportPointToRay(Mouse.X, Mouse.Y)
                    local Params = RaycastParams.new()
                    Params.IgnoreWater = true
                    local Raycast = workspace:Raycast(MouseRaycast.Origin, MouseRaycast.Direction * 1000, Params)
                    if Raycast and Raycast.Instance then
                        ClickPartToSelectOutline.Adornee = Raycast.Instance
                        local FullName = GetFullName(Raycast.Instance)
                        SetClipboard(FullName, "Copied Path To Clipboard")
                        warn("[Tidal Wave]: " .. FullName)
                    end
				end
				if ClickDelete and TidalWaveKeybinds.ClickDelete and UIS:IsKeyDown(TidalWaveKeybinds.ClickDelete) then
                    local MouseRaycast = Camera:ViewportPointToRay(Mouse.X, Mouse.Y)
                    local Params = RaycastParams.new()
                    Params.IgnoreWater = true
                    local Raycast = workspace:Raycast(MouseRaycast.Origin, MouseRaycast.Direction * 1000, Params)
					local Char = GetChar(Plr)
					if Char and ClickDeleteIgnorePlayer and Raycast and Raycast.Instance:IsDescendantOf(Char) then return end
                    if Raycast.Instance then
                        Raycast.Instance:Destroy()
                    end
				end
			end
		elseif Input.KeyCode == Enum.KeyCode.Space and InfiniteJump and Char and Humanoid then
			Humanoid:ChangeState(Enum.HumanoidStateType.Jumping)
        else
            for KeybindName, Keybind in pairs(TidalWaveKeybinds) do
                if KeybindName == "ClickTeleport" or KeybindName == "ClickDelete" then continue end
                if Input.KeyCode.Name == Keybind then
                    for ToggleName, ToggleFunction in pairs(ToggleFunctions) do
                        if ToggleName == KeybindName then
                            ToggleFunction()
                            break
                        end
                    end
                    break
                end
            end
		end
	end)
end

----------------------------------------------------------------------------------------------------- Combat Category

do
	local function UpdateHitboxes()
		for i, Player in pairs(Players:GetPlayers()) do
			if Player == Plr then continue end
			local Char = GetChar(Player)
			local Root = GetRootPart(Char)
			if not Char then continue end
			for i, Part in ipairs(Char:GetChildren()) do
				if not Part:IsA("BasePart") then continue end
				Part.Size = HitboxExpanderSize
				Part.Transparency = HitboxExpanderTransparency
			end
		end
	end
	
	ToggleHitboxExpander = Combat:CreateToggle({
		Text = "Hitbox Expander",
		Info = "Expands Players Hitbox (Might Be Laggy)",
		Function = function(Args)
			HitboxExpander = not HitboxExpander
			ModuleToggled(ToggleHitboxExpander, "Hitbox Expander", HitboxExpander, Args.NoNotify)
			if HitboxExpander then
				Connections.Combat.HitboxExpanderLoop = RunService.Stepped:Connect(UpdateHitboxes)
			else
				if Connections.Combat.HitboxExpanderLoop then
					Connections.Combat.HitboxExpanderLoop:Disconnect()
					Connections.Combat.HitboxExpanderLoop = nil
				end
			end
		end,
		Function2 = function()
			HitboxExpanderSizeXSlider.Visible = true
			HitboxExpanderSizeYSlider.Visible = true
			HitboxExpanderSizeZSlider.Visible = true
			HitboxExpanderTransparencySlider.Visible = true
            RebindHitboxExpander.Visible = true
		end,
	})

    RebindHitboxExpander = CreateRebindButton("HitboxExpander")

    HitboxExpanderSizeXSlider = CreateSlider({
        Text = "X Size",
        Min = 0,
        Default = 2,
        Max = 20,
        Function = function(Val)
            HitboxExpanderSize = Vector3.new(Val, HitboxExpanderSize.Y, HitboxExpanderSize.Z)
            if HitboxExpander then
                UpdateHitboxes()
            end
        end,
        Function2 = function(Val)
            HitboxExpanderSize = Vector3.new(Val, HitboxExpanderSize.Y, HitboxExpanderSize.Z)
            if HitboxExpander then
                UpdateHitboxes()
            end
        end,
    })

    HitboxExpanderSizeYSlider = CreateSlider({
        Text = "Y Size",
        Min = 0,
        Default = 2,
        Max = 20,
        Function = function(Val)
            HitboxExpanderSize = Vector3.new(HitboxExpanderSize.X, Val, HitboxExpanderSize.Z)
            if HitboxExpander then
                UpdateHitboxes()
            end
        end,
        Function2 = function(Val)
            HitboxExpanderSize = Vector3.new(HitboxExpanderSize.X, Val, HitboxExpanderSize.Z)
            if HitboxExpander then
                UpdateHitboxes()
            end
        end,
    })

    HitboxExpanderSizeZSlider = CreateSlider({
        Text = "Z Size",
        Min = 0,
        Default = 2,
        Max = 20,
        Function = function(Val)
            HitboxExpanderSize = Vector3.new(HitboxExpanderSize.X, HitboxExpanderSize.Y, Val)
            if HitboxExpander then
                UpdateHitboxes()
            end
        end,
        Function2 = function(Val)
            HitboxExpanderSize = Vector3.new(HitboxExpanderSize.X, HitboxExpanderSize.Y, Val)
            if HitboxExpander then
                UpdateHitboxes()
            end
        end,
    })

    HitboxExpanderTransparencySlider = CreateSlider({
        Text = "Transparency",
        Min = 0,
        Default = 1,
        Max = 1,
        Function = function(Val)
            HitboxExpanderTransparency = Val
            if HitboxExpander then
                UpdateHitboxes()
            end
        end,
        Function2 = function(Val)
            HitboxExpanderTransparency = Val
            if HitboxExpander then
                UpdateHitboxes()
            end
        end,
    })
	
	local function UpdateToolHitboxes()
		local Char = GetChar(Plr)
		if not Char then return end
		for i, Tool in ipairs(Char:GetChildren()) do
			if not (Tool:IsA("Tool") or Tool:IsA("Model")) then continue end
			for i2, Part in pairs(Tool:GetDescendants()) do
				if not Part:IsA("BasePart") then continue end
				Part.Massless = ToolHitboxExpanderMassless
				Part.Size = ToolHitboxExpanderSize
				Part.Transparency = ToolHitboxExpanderTransparency
			end
		end
	end
	
	ToggleToolHitboxExpander = Combat:CreateToggle({
		Text = "Tool Hitbox Expander",
		Info = "Expands The Hitbox Of Tools (Might Be Laggy)",
		Function = function(Args)
			ToolHitboxExpander = not ToolHitboxExpander
			ModuleToggled(ToggleToolHitboxExpander, "Tool Hitbox Expander", ToolHitboxExpander, Args.NoNotify)
			if ToolHitboxExpander then
				Connections.Combat.ToolHitboxExpanderLoop = RunService.Stepped:Connect(UpdateToolHitboxes)
			else
				if Connections.Combat.ToolHitboxExpanderLoop then
					Connections.Combat.ToolHitboxExpanderLoop:Disconnect()
					Connections.Combat.ToolHitboxExpanderLoop = nil
				end
			end
		end,
		Function2 = function()
			ToolHitboxExpanderSizeXSlider.Visible = true
			ToolHitboxExpanderSizeYSlider.Visible = true
			ToolHitboxExpanderSizeZSlider.Visible = true
			ToolHitboxExpanderTransparencySlider.Visible = true
			ToggleToolHitboxMassless.MainFrame.Visible = true
            RebindToolHitboxExpander.Visible = true
		end,
	})

    RebindToolHitboxExpander = CreateRebindButton("ToolHitboxExpander")

    ToolHitboxExpanderSizeXSlider = CreateSlider({
        Text = "X Size",
        Min = 0,
        Default = 2,
        Max = 20,
        Function = function(Val)
            ToolHitboxExpanderSize = Vector3.new(Val, ToolHitboxExpanderSize.Y, ToolHitboxExpanderSize.Z)
            if ToolHitboxExpander then
                UpdateToolHitboxes()
            end
        end,
        Function2 = function(Val)
            ToolHitboxExpanderSize = Vector3.new(Val, ToolHitboxExpanderSize.Y, ToolHitboxExpanderSize.Z)
            if ToolHitboxExpander then
                UpdateToolHitboxes()
            end
        end,
    })
    
    ToolHitboxExpanderSizeYSlider = CreateSlider({
        Text = "Y Size",
        Min = 0,
        Default = 2,
        Max = 20,
        Function = function(Val)
            ToolHitboxExpanderSize = Vector3.new(ToolHitboxExpanderSize.X, Val, ToolHitboxExpanderSize.Z)
            if ToolHitboxExpander then
                UpdateToolHitboxes()
            end
        end,
        Function2 = function(Val)
            ToolHitboxExpanderSize = Vector3.new(ToolHitboxExpanderSize.X, Val, ToolHitboxExpanderSize.Z)
            if ToolHitboxExpander then
                UpdateToolHitboxes()
            end
        end,
    })

    ToolHitboxExpanderSizeZSlider = CreateSlider({
        Text = "Z Size",
        Min = 0,
        Default = 2,
        Max = 20,
        Function = function(Val)
            ToolHitboxExpanderSize = Vector3.new(ToolHitboxExpanderSize.X, ToolHitboxExpanderSize.Y, Val)
            if ToolHitboxExpander then
                UpdateToolHitboxes()
            end
        end,
        Function2 = function(Val)
            ToolHitboxExpanderSize = Vector3.new(ToolHitboxExpanderSize.X, ToolHitboxExpanderSize.Y, Val)
            if ToolHitboxExpander then
                UpdateToolHitboxes()
            end
        end,
    })
    
    ToolHitboxExpanderTransparencySlider = CreateSlider({
        Text = "Transparency",
        Min = 0,
        Default = 1,
        Max = 1,
        Function = function(Val)
            ToolHitboxExpanderTransparency = Val
        end,
        Function2 = function(Val)
            ToolHitboxExpanderTransparency = Val
        end,
    })

    ToggleToolHitboxMassless = CreateToggle({
        Text = "Massless",
        EnabledIndicatorDefault = true,
        Function = function()
            ToolHitboxExpanderMassless = not ToolHitboxExpanderMassless
            ToggleButtonColor(ToggleToolHitboxMassless, ToolHitboxExpanderMassless)
        end,
    })
end

do
    ToggleGlobalAimbot = Combat:CreateToggle({
		Text = "Global Aimbot",
		Info = "Aimbot That Should Work In Most Games.",
		Function = function(Args)
			GlobalAimbot = not GlobalAimbot
			ModuleToggled(ToggleGlobalAimbot, "Global Aimbot", GlobalAimbot, Args.NoNotify)
			if GlobalAimbot then
				Connections.Combat.GlobalAimbotLoop = RunService.Heartbeat:Connect(function()
					local Player = GetClosestPlayerToMiddleOfScreen(GlobalAimbotSize.X, GlobalAimbotSize.Y)
					local PlayerChar = GetChar(Player)
					local PlayerRootPart = GetRootPart(PlayerChar)
					local PlayerHumanoid = GetHumanoid(PlayerChar)
					local Char = GetChar(Plr)
					local RootPart = GetRootPart(Char)
					
					if not (Player and PlayerChar and PlayerRootPart and PlayerHumanoid and Char and RootPart) or PlayerHumanoid.Health <= 0 or ((RootPart.Position - PlayerRootPart.Position).Magnitude > GlobalAimbotMaxDistance and (RootPart.Position - PlayerRootPart.Position).Magnitude < GlobalAimbotMinDistance) or (GlobalAimbotTeamCheck and Player.Team == Plr.Team) then return end

					local Vector = Camera:WorldToViewportPoint(PlayerRootPart.Position)
                    local PlayerHead = PlayerChar:FindFirstChild("Head")
                    local Delta

					if PlayerHead then
						local HeadPos = Camera:WorldToViewportPoint(PlayerHead)
						if GlobalAimbotMethod == "Head" then
							Delta = Vector2.new(HeadPos.X - (Camera.ViewportSize.X * 0.5), HeadPos.Y - (Camera.ViewportSize.Y * 0.5))
						else
							Delta = Vector2.new(Vector.X - (Camera.ViewportSize.X * 0.5), Vector.Y - (Camera.ViewportSize.Y * 0.5))
						end
					end

                    local OnScreenX = Vector.X > Camera.ViewportSize.X * (0.5 - (GlobalAimbotSize.X / 960)) and Vector.X < Camera.ViewportSize.X * (0.5 + (GlobalAimbotSize.X / 960))
                    local OnScreenY = Vector.Y > Camera.ViewportSize.Y * (0.5 - (GlobalAimbotSize.Y / 540)) and Vector.Y < Camera.ViewportSize.Y * (0.5 + (GlobalAimbotSize.Y / 540))
                    local OnScreen = OnScreenX and OnScreenY

					if GlobalAimbotWallCheck then
						local Params = RaycastParams.new()
						Params.FilterType = Enum.RaycastFilterType.Exclude
						Params.IgnoreWater = true
						Params.FilterDescendantsInstances = {Char}
						local GunRaycast
                        local Head = Char:FindFirstChild("Head")
						if Head and PlayerHead then 
							GunRaycast = workspace:Raycast(Head.Position, (PlayerHead.Position - Head.Position) * 1000, Params)
						else
							GunRaycast = workspace:Raycast(RootPart.Position, (PlayerRootPart.Position - RootPart.Position) * 1000, Params)
						end
						if GunRaycast and GunRaycast.Instance and GunRaycast.Instance.Parent.Name == Player.Name and OnScreen then 
							if GlobalAimbotMethod == "CFrame" then
                                local Head = PlayerChar:FindFirstChild("Head")
                                if Head and GlobalAimbotTarget == "Head" then
                                    Camera.CFrame = CFrame.lookAt(Camera.CFrame.Position, Head.Position)
                                else
                                    Camera.CFrame = CFrame.lookAt(Camera.CFrame.Position, PlayerRootPart.Position)
                                end
                            elseif GlobalAimbotMethod == "MouseMoveRel" and MouseMoveRel and Delta and Delta.Magnitude > 0 then
                                MouseMoveRel(Delta.X, Delta.Y)
                            end
						end
					else
                        if OnScreen then
                            if GlobalAimbotMethod == "CFrame" then
								if PlayerChar:FindFirstChild("Head") and GlobalAimbotTarget == "Head" then
									Camera.CFrame = CFrame.lookAt(Camera.CFrame.Position, PlayerChar.Head.Position)
								else
									Camera.CFrame = CFrame.lookAt(Camera.CFrame.Position, PlayerRootPart.Position)
								end
							elseif GlobalAimbotMethod == "MouseMoveRel" and MouseMoveRel and Delta and Delta.Magnitude > 0 then
								MouseMoveRel(Delta.X, Delta.Y)
							end
                        end
					end
				end)
			else
				if Connections.Combat.GlobalAimbotLoop then
					Connections.Combat.GlobalAimbotLoop:Disconnect()
					Connections.Combat.GlobalAimbotLoop = nil
				end
			end
		end,
		Function2 = function()
			RebindGlobalAimbot.Visible = true
			ToggleGlobalAimbotWallCheck.MainFrame.Visible = true
			ToggleGlobalAimbotTeamCheck.MainFrame.Visible = true
			GlobalAimbotSizeXSlider.Visible = true
			GlobalAimbotSizeYSlider.Visible = true
			GlobalAimbotMinDistanceSlider.Visible = true
			GlobalAimbotMaxDistanceSlider.Visible = true
			GlobalAimbotMethodDropdown.MainFrame.Visible = true
			GlobalAimbotTargetDropdown.MainFrame.Visible = true
		end,
	})

    RebindGlobalAimbot = CreateRebindButton("GlobalAimbot")

    ToggleGlobalAimbotWallCheck = CreateToggle({
        Text = "Wall Check",
        EnabledIndicatorDefault = true,
        Function = function()
            GlobalAimbotWallCheck = not GlobalAimbotWallCheck
            ToggleButtonColor(ToggleGlobalAimbotWallCheck, GlobalAimbotWallCheck)
        end,
    })

    ToggleGlobalAimbotTeamCheck = CreateToggle({
        Text = "Team Check",
        EnabledIndicatorDefault = true,
        Function = function()
            GlobalAimbotTeamCheck = not GlobalAimbotTeamCheck
            ToggleButtonColor(ToggleGlobalAimbotTeamCheck, GlobalAimbotTeamCheck)
        end,
    })

    GlobalAimbotMaxDistanceSlider = CreateSlider({
        Text = "Max Distance",
        Min = 0,
        Default = 1000,
        Max = 1000,
        Function = function(Val)
            GlobalAimbotMaxDistance = Val
        end,
        Function2 = function(Val)
            GlobalAimbotMaxDistance = Val
        end,
    })

    GlobalAimbotMinDistanceSlider = CreateSlider({
        Text = "Min Distance",
        Min = 0,
        Default = 0,
        Max = 100,
        Function = function(Val)
            GlobalAimbotMinDistance = Val
        end,
        Function2 = function(Val)
            GlobalAimbotMinDistance = Val
        end,
    })

    GlobalAimbotSizeXSlider = CreateSlider({
        Text = "Aimbot Size X (In Pixels)",
        Min = 0,
        Default = 100,
        Max = 1920,
        Function = function(Val)
            GlobalAimbotSize = Vector2.new(Val, GlobalAimbotSize.Y)
        end,
        Function2 = function(Val)
            GlobalAimbotSize = Vector2.new(Val, GlobalAimbotSize.Y)
        end,
    })

    GlobalAimbotSizeYSlider = CreateSlider({
        Text = "Aimbot Size Y (In Pixels)",
        Min = 0,
        Default = 100,
        Max = 1080,
        Function = function(Val)
            GlobalAimbotSize = Vector2.new(GlobalAimbotSize.X, Val)
        end,
        Function2 = function(Val)
            GlobalAimbotSize = Vector2.new(GlobalAimbotSize.X, Val)
        end,
    })

    GlobalAimbotTargetDropdown = CreateDropdown({
        Text = "Target",
        Default = "Head",
        AutoUpdateText = true,
    })
    GlobalAimbotTargetDropdown:CreateButton({
        Text = "Head",
        Function = function()
            GlobalAimbotTarget = "Head"
        end,
    })
    GlobalAimbotTargetDropdown:CreateButton({
        Text = "HumanoidRootPart",
        Function = function()
            GlobalAimbotTarget = "HumanoidRootPart"
        end,
    })

    GlobalAimbotMethodDropdown = CreateDropdown({
        Text = "Aimbot Method",
        Default = "CFrame",
        AutoUpdateText = true,
    })
    GlobalAimbotMethodDropdown:CreateButton({
        Text = "CFrame",
        Function = function()
            GlobalAimbotMethod = "CFrame"
        end,
    })
    GlobalAimbotMethodDropdown:CreateButton({
        Text = "Mouse Move Rel",
        Function = function()
            GlobalAimbotMethod = "MouseMoveRel"
        end,
    })
end

TogglePartAimbot = Combat:CreateToggle({
	Text = "Part Aimbot",
	Info = "Aimbots Parts And Models",
	Function = function(Args)
		PartAimbot = not PartAimbot
		ModuleToggled(TogglePartAimbot, "Part Aimbot", PartAimbot, Args.NoNotify)
		if PartAimbot then
			Connections.Combat.PartAimbotLoop = RunService.Heartbeat:Connect(function()
				if PartAimbot and PartAimbotFolder then
					if PartAimbotMode == "Part" then
						local Part = GetClosestPartToMiddleOfScreen(PartAimbotFolder, PartAimbotSize.X, PartAimbotSize.Y)
						local Char = GetChar(Plr)
						local RootPart = GetRootPart(Char)
						local Delta = nil

						if not (Part and Char and RootPart) then return end

						if Part:FindFirstChild("Head") then
							local Pos = Camera:WorldToViewportPoint(Part.Head.Position)
							Delta = Vector2.new(Pos.X - (Camera.ViewportSize.X * 0.5), Pos.Y - (Camera.ViewportSize.Y * 0.5))
						else
							local Pos = Camera:WorldToViewportPoint(Part.Position)
							Delta = Vector2.new(Pos.X - (Camera.ViewportSize.X * 0.5), Pos.Y - (Camera.ViewportSize.Y * 0.5))
						end

						if PartAimbotWallCheck then
							local Params = RaycastParams.new()
							Params.FilterType = Enum.RaycastFilterType.Exclude
							Params.IgnoreWater = true
							Params.FilterDescendantsInstances = {Char}
							local GunRaycast
							if Char:FindFirstChild("Head") then 
								GunRaycast = workspace:Raycast(RootPart.Position, (Part.Position - Char.Head.Position) * 1000, Params)
							else
								GunRaycast = workspace:Raycast(RootPart.Position, (Part.Position - RootPart.Position) * 1000, Params)
							end
							if GunRaycast and GunRaycast.Instance and (GunRaycast.Instance == Part or GunRaycast.Instance.Parent == Part) then 
								if PartAimbotMethod == "CFrame" then
									if Part:FindFirstChild("Head") then
										Camera.CFrame = CFrame.lookAt(Camera.CFrame.Position, Part.Head.Position)
									else
										Camera.CFrame = CFrame.lookAt(Camera.CFrame.Position, Part.Position)
									end
								elseif PartAimbotMethod == "MouseMoveRel" and MouseMoveRel and Delta then
									MouseMoveRel(Delta.X, Delta.Y)
								end
							end
						else
							if PartAimbotMethod == "CFrame" then
								if Part:FindFirstChild("Head") and PartAimbotTarget == "Head" then
									Camera.CFrame = CFrame.lookAt(Camera.CFrame.Position, Part.Head.Position)
								else
									Camera.CFrame = CFrame.lookAt(Camera.CFrame.Position, Part.Position)
								end
							elseif PartAimbotMethod == "MouseMoveRel" and MouseMoveRel and Delta then
								MouseMoveRel(Delta.X, Delta.Y)
							end
						end
					else
						local Model = GetClosestModelToMiddleOfScreen(PartAimbotFolder, PartAimbotSize.X, PartAimbotSize.Y)
						local ModelRootPart = GetRootPart(Model)
						local Char = GetChar(Plr)
						local RootPart = GetRootPart(Char)
						local Delta = nil

						if not (Model and ModelRootPart and Char and RootPart) then return end
						
						if Model:FindFirstChild("Head") then
							local Pos = Camera:WorldToViewportPoint(Model.Head.Position)
							Delta = Vector2.new(Pos.X - (Camera.ViewportSize.X * 0.5), Pos.Y - (Camera.ViewportSize.Y * 0.5))
						else
							local Pos = Camera:WorldToViewportPoint(ModelRootPart.Position)
							Delta = Vector2.new(Pos.X - (Camera.ViewportSize.X * 0.5), Pos.Y - (Camera.ViewportSize.Y * 0.5))
						end

						if PartAimbotWallCheck then
							local Params = RaycastParams.new()
							Params.FilterType = Enum.RaycastFilterType.Exclude
							Params.IgnoreWater = true
							Params.FilterDescendantsInstances = GetAllCharacters()
							local GunRaycast = nil
							if Char:FindFirstChild("Head") and Model:FindFirstChild("Head") then 
								GunRaycast = workspace:Raycast(RootPart.Position, (Model.Head.Position - Char.Head.Position) * 1000, Params)
							else
								GunRaycast = workspace:Raycast(RootPart.Position, (ModelRootPart.Position - RootPart.Position) * 1000, Params)
							end
							if GunRaycast and GunRaycast.Instance and GunRaycast.Instance:FindFirstAncestor(Model.Name) then 
								if PartAimbotMethod == "CFrame" then
									if Model:FindFirstChild("Head") then
										Camera.CFrame = CFrame.lookAt(Camera.CFrame.Position, Model.Head.Position)
									else
										Camera.CFrame = CFrame.lookAt(Camera.CFrame.Position, ModelRootPart.Position)
									end
								elseif PartAimbotMethod == "MouseMoveRel" and MouseMoveRel and Delta then
									MouseMoveRel(Delta.X, Delta.Y)
								end
							end
						else
							if PartAimbotMethod == "CFrame" then
								if Model:FindFirstChild("Head") and PartAimbotTarget == "Head" then
									Camera.CFrame = CFrame.lookAt(Camera.CFrame.Position, Model.Head.Position)
								else
									Camera.CFrame = CFrame.lookAt(Camera.CFrame.Position, ModelRootPart.Position)
								end
							elseif PartAimbotMethod == "MouseMoveRel" and MouseMoveRel and Delta then
								MouseMoveRel(Delta.X, Delta.Y)
							end
						end
					end
				end
			end)
		else
			if Connections.Combat.PartAimbotLoop then
				Connections.Combat.PartAimbotLoop:Disconnect()
				Connections.Combat.PartAimbotLoop = nil
			end
		end
	end,
	Function2 = function()
		RebindPartAimbot.Visible = true
		PartAimbotModeDropdown.MainFrame.Visible = true
		PartAimbotPathTextbox.MainFrame.Visible = true
		PartAimbotTargetDropdown.MainFrame.Visible = true
		TogglePartAimbotWallCheck.MainFrame.Visible = true
		PartAimbotSizeXSlider.Visible = true
		PartAimbotSizeYSlider.Visible = true
	end,
})

RebindPartAimbot = CreateRebindButton("PartAimbot")

PartAimbotModeDropdown = CreateDropdown({
    Text = "Aimbot Mode",
    Default = "Part",
    AutoUpdateText = true,
})
PartAimbotModeDropdown:CreateButton({
    Text = "Part",
    Function = function()
        PartAimbotMode = "Part"
    end,
})
    
PartAimbotModeDropdown:CreateButton({
    Text = "Model",
    Function = function()
        PartAimbotMode = "Model"
    end,
})

PartAimbotPathTextbox = CreateTextbox({
    ButtonText = "Part Aimbot Path",
    PlaceholderText = "Folder",
    MouseButton1Click = function(Args)
        local S, Er = pcall(function()
            PartAimbotFolder = loadstring("return " .. Args.Text)()
        end)
        if not S then
            Notify({
                Text = Er,
                Duration = 5,
            })
        end
    end,
})

PartAimbotTargetDropdown = CreateDropdown({
    Text = "Target",
    Default = "Head",
    AutoUpdateText = true,
})
PartAimbotTargetDropdown:CreateButton({
    Text = "Head",
    Function = function()
        PartAimbotTarget = "Head"
    end,
})
PartAimbotTargetDropdown:CreateButton({
    Text = "HumanoidRootPart",
    Function = function()
        PartAimbotTarget = "HumanoidRootPart"
    end,
})
TogglePartAimbotWallCheck = CreateToggle({
    Text = "Wall Check",
    EnabledIndicatorDefault = true,
    MouseButton1Click = function()
        PartAimbotWallCheck = not PartAimbotWallCheck
        ToggleButtonColor(TogglePartAimbotWallCheck, PartAimbotWallCheck)
    end,
})

PartAimbotMethodDropdown = CreateDropdown({
    Text = "Part Aimbot Method",
    Default = "CFrame",
    AutoUpdateText = true,
})
PartAimbotMethodDropdown:CreateButton({
    Text = "CFrame",
    Function = function()
        PartAimbotMethod = "CFrame"
    end,
})
PartAimbotMethodDropdown:CreateButton({
    Text = "Mouse Move Rel",
    Function = function()
        PartAimbotMethod = "MouseMoveRel"
    end,
})

PartAimbotSizeXSlider = CreateSlider({
    Text = "X Size (In Pixels)",
    Min = 0,
    Default = 192,
    Max = 1920,
    Function = function(Val)
        PartAimbotSize = Vector2.new(Val, PartAimbotSize.Y)
    end,
    Function2 = function(Val)
        PartAimbotSize = Vector2.new(Val, PartAimbotSize.Y)
    end,
})

PartAimbotSizeYSlider = CreateSlider({
    Text = "Y Size (In Pixels)",
    Min = 0,
    Default = 108,
    Max = 1080,
    Function = function(Val)
        PartAimbotSize = Vector2.new(PartAimbotSize.X, Val)
    end,
    Function2 = function(Val)
        PartAimbotSize = Vector2.new(PartAimbotSize.X, Val)
    end,
})

----------------------------------------------------------------------------------------------------- Player Category

ToggleNoclip = PlayerCategory:CreateToggle({
	Text = "Noclip",
	Info = "Disables Collision Of Your Character and Allows You To Walk Through Walls",
	MouseButton1Click = function(Args)
		Noclip = not Noclip
		ModuleToggled(ToggleNoclip, "Noclip", Noclip, Args.NoNotify)
		if Noclip then
			local function NoclipFunction()
				local Char = GetChar(Plr)
				if not Char then return end
				for i, v in pairs(Char:GetDescendants()) do
					if v:IsA("BasePart") and v.CanCollide then
						v.CanCollide = false
					end
				end
			end
			Connections.Player.NoclipLoop = RunService.Stepped:Connect(NoclipFunction)
		else
			if Connections.Player.NoclipLoop then 
				Connections.Player.NoclipLoop:Disconnect()
				Connections.Player.NoclipLoop = nil
			end
		end
	end,
	MouseButton2Click = function()
		RebindNoclip.Visible = true
	end,
})

RebindNoclip = CreateRebindButton("Noclip")

do
	local SpasmAnim = nil
	local LoadedSpasmAnim = nil

	ToggleSpasm = PlayerCategory:CreateToggle({
		Text = "Spasm",
		Info = "Makes Your Character Spasm",
		MouseButton1Click = function(Args)
			Spasm = not Spasm
			ModuleToggled(ToggleSpasm, "Spasm", Spasm, Args.NoNotify)
			if Spasm then
				if R15(Plr) then
					Notify({
						Text = "Spasm Animation Only Works On R6",
						Duration = 5,
					})
				else
					local Char = GetChar(Plr)
					local Humanoid = GetHumanoid(Char)
					if Char and Humanoid then
						SpasmAnim = Instance.new("Animation")
						SpasmAnim.AnimationId = "rbxassetid://33796059"
						LoadedSpasmAnim = Humanoid:LoadAnimation(SpasmAnim)
                        LoadedSpasmAnim.Priority = Enum.AnimationPriority.Action4
						LoadedSpasmAnim.Looped = true
						LoadedSpasmAnim:Play()
						LoadedSpasmAnim:AdjustSpeed(99)
					end
				end
			else
				if LoadedSpasmAnim then
					LoadedSpasmAnim:Stop()
					LoadedSpasmAnim = nil
				end
				if SpasmAnim then 
					SpasmAnim:Destroy()
					SpasmAnim = nil
				end
			end
		end,
        MouseButton2Click = function()
            RebindSpasm.Visible = true
        end,
	})

    RebindSpasm = CreateRebindButton("Spasm")
end

do
	local Anim = nil
	local LoadedAnim = nil

	ToggleHeadThrow = PlayerCategory:CreateToggle({
		Text = "Head Throw",
		Info = "Throws Your Head",
		MouseButton1Click = function(Args)
			HeadThrow = not HeadThrow
			ModuleToggled(ToggleHeadThrow, "Head Throw", HeadThrow, Args.NoNotify)
			if HeadThrow then
				if R15(Plr) then
					Notify({
						Text = "Head Throw Animation Only Works On R6",
						Duration = 5,
					})
				else
					local Char = GetChar(Plr)
					local Humanoid = GetHumanoid(Char)
					if Char and Humanoid then
						Anim = Instance.new("Animation")
						Anim.AnimationId = "rbxassetid://35154961"
						LoadedAnim = Humanoid:LoadAnimation(Anim)
                        LoadedAnim.Priority = Enum.AnimationPriority.Action4
						LoadedAnim.Looped = true
						LoadedAnim:Play()
						LoadedAnim:AdjustSpeed(1)
					end
				end
			else
				if LoadedAnim then
					LoadedAnim:Stop()
					LoadedAnim = nil
				end
				if Anim then 
					Anim:Destroy()
					Anim = nil
				end
			end
		end,
        MouseButton2Click = function()
            RebindHeadThrow.Visible = true
        end,
	})
    RebindHeadThrow = CreateRebindButton("HeadThrow")
end

ToggleAntiFling = PlayerCategory:CreateToggle({
	Text = "Anti Fling",
	Info = "Prevents You From Getting Flinged By Disabling Collision With Other Players",
	Function = function(Args)
		AntiFling = not AntiFling
		ModuleToggled(ToggleAntiFling, "Anti Fling", AntiFling, Args.NoNotify)
		if AntiFling then
			Connections.Other.AntiFlingLoop = RunService.Stepped:Connect(function()
				for i, Player in pairs(Players:GetPlayers()) do
					local PlayerChar = GetChar(Player)
					if not PlayerChar then continue end
					for i, Part in pairs(PlayerChar:GetDescendants()) do
						if Part:IsA("BasePart") and Part.CanCollide then
							Part.CanCollide = false
						end
					end
				end
			end)
		else
			if Connections.Other.AntiFlingLoop then
				Connections.Other.AntiFlingLoop:Disconnect()
				Connections.Other.AntiFlingLoop = nil
			end
		end
	end,
    MouseButton2Click = function()
        RebindAntiFling.Visible = true
    end,
})

RebindAntiFling = CreateRebindButton("AntiFling")

ToggleFreezeAnimations = PlayerCategory:CreateToggle({
	Text = "Freeze Animations",
	Info = "Freezes Your Character Animations",
	MouseButton1Click = function(Args)
		FreezeAnimations = not FreezeAnimations
		ModuleToggled(ToggleFreezeAnimations, "Freeze Animations", FreezeAnimations, Args.NoNotify)
		if FreezeAnimations then
			local Char = GetChar(Plr)
			local Humanoid = GetHumanoid(Char)
			local ActiveTracks = Humanoid:GetPlayingAnimationTracks()
			for i, v in pairs(ActiveTracks) do
				if v then
					v:AdjustSpeed(0)
				end
			end
		else
			local Char = GetChar(Plr)
			local Humanoid = GetHumanoid(Char)
			local ActiveTracks = Humanoid:GetPlayingAnimationTracks()
			for i, v in pairs(ActiveTracks) do
				if v then
					v:AdjustSpeed(1)
				end
			end
		end
	end,
    MouseButton2Click = function()
        RebindFreezeAnimations.Visible = true
    end,
})

RebindFreezeAnimations = CreateRebindButton("FreezeAnimations")

ToggleStrengthen = PlayerCategory:CreateToggle({
	Text = "Strengthen",
	Info = "Makes Your Character Stronger",
	MouseButton1Click = function(Args)
		Strengthen = not Strengthen
		ModuleToggled(ToggleStrengthen, "Strengthen", Strengthen, Args.NoNotify)
		if Strengthen then
			Connections.Player.StrengthenLoop = RunService.Stepped:Connect(function()
				local Char = GetChar(Plr)
				if not Char then return end
				for i, Part in pairs(Char:GetDescendants()) do
					if Part:IsA("BasePart") then
						Part.CustomPhysicalProperties = PhysicalProperties.new(StrengthenDensity, 0.3, 0.5)
					end
				end
			end)
		else
			if Connections.Player.StrengthenLoop then
				Connections.Player.StrengthenLoop:Disconnect()
				Connections.Player.StrengthenLoop = nil
			end
			local Char = GetChar(Plr)
			if not Char then return end
			for i, Part in pairs(Char:GetDescendants()) do
				if not Part:IsA("BasePart") then continue end
				Part.CustomPhysicalProperties = PhysicalProperties.new(0.7, 0.3, 0.5)
			end
		end
	end,
	MouseButton2Click = function()
		StrengthenDensitySlider.Visible = true
        RebindStrengthen.Visible = true
	end,
})

StrengthenDensitySlider = CreateSlider({
    Text = "Density",
    Min = 0,
    Default = 0.7,
    Max = 100,
    Function = function(Val)
        StrengthenDensity = Val
    end,
    Function2 = function(Val)
        StrengthenDensity = Val
    end,
})

RebindStrengthen = CreateRebindButton("Strengthen")

BreakVelocity = PlayerCategory:CreateButton({
	Text = "Break Velocity",
	Info = "Breaks The Velocity Of Your Character",
	MouseButton1Click = function(Args)
        task.spawn(function()
            local Stop = false
            task.delay(1, function()
                Stop = true
            end)
            while not Stop and not StopScript do
                local Char = GetChar(Plr)
                local Root = GetRoot(Char)
                if not (Char and Root) then RunService.Heartbeat:Wait() continue end
                RunService.Stepped:Wait()
                Root.Velocity = Vector3.new(0, 0, 0)
                Root.RotVelocity = Vector3.new(0, 0, 0)
                Root.AssemblyLinearVelocity = Vector3.new(0, 0, 0)
                Root.AssemblyAngularVelocity = Vector3.new(0, 0, 0)
                RunService.Heartbeat:Wait()
                if not (Char and Root) then RunService.Heartbeat:Wait() continue end
                Root.Velocity = Vector3.new(0, 0, 0)
                Root.RotVelocity = Vector3.new(0, 0, 0)
                Root.AssemblyLinearVelocity = Vector3.new(0, 0, 0)
                Root.AssemblyAngularVelocity = Vector3.new(0, 0, 0)
            end
        end)
	end,
    MouseButton2Click = function()
        RebindBreakVelocity.Visible = true
    end,
})

RebindBreakVelocity = CreateRebindButton("BreakVelocity")

ToggleMaxSlopeAngle = PlayerCategory:CreateToggle({
	Text = "Max Slope Angle",
	Info = "Sets The Max Slope Angle Of The Specified Player",
	MouseButton1Click = function(Args)
		LoopMaxSlopeAngle = not LoopMaxSlopeAngle
		ModuleToggled(ToggleMaxSlopeAngle, "Max Slope Angle", LoopMaxSlopeAngle, Args.NoNotify)
		if LoopMaxSlopeAngle then
			local Char = GetChar(Plr)
			local Humanoid = GetHumanoid(Char)
			if Char and Humanoid then
				Connections.Movement.LoopMaxSlopeAngle = Humanoid:GetPropertyChangedSignal("MaxSlope"):Connect(function()
					Humanoid.MaxSlope = MaxSlopeAngle
				end)
				Humanoid.MaxSlope = MaxSlopeAngle
			end
		else
			local Char = GetChar(Plr)
			local Humanoid = GetHumanoid(Char)
			if Char and Humanoid then
				Humanoid.MaxSlope = 89
			end
			if Connections.Movement.LoopMaxSlopeAngle then
				Connections.Movement.LoopMaxSlopeAngle:Disconnect()
				Connections.Movement.LoopMaxSlopeAngle = nil
			end
		end
	end,
    MouseButton2Click = function()
        RebindMaxSlopeAngle.Visible = true
    end,
})

RebindMaxSlopeAngle = CreateRebindButton("MaxSlopeAngle")

ToggleLoopHipHeight = PlayerCategory:CreateToggle({
	Text = "Loop Hip Height",
	Info = "Loops The Hip Height Of The Specified Player",
	MouseButton1Click = function(Args)
		LoopHipHeight = not LoopHipHeight
		ModuleToggled(ToggleLoopHipHeight, "Loop Hip Height", LoopHipHeight, Args.NoNotify)
		if LoopHipHeight then
			local Char = GetChar(Plr)
			local Humanoid = GetHumanoid(Char)
			if Char and Humanoid then
				Connections.Other.LoopHipHeight = Humanoid:GetPropertyChangedSignal("HipHeight"):Connect(function()
					Humanoid.HipHeight = HipHeight
				end)
				Humanoid.HipHeight = HipHeight
			end
		else
			local Char = GetChar(Plr)
			local Humanoid = GetHumanoid(Char)
			if Connections.Movement.LoopHipHeight then
				Connections.Movement.LoopHipHeight:Disconnect()
				Connections.Other.LoopHipHeight = nil
			end
		end
	end,
    MouseButton2Click = function()
        RebindLoopHipHeight.Visible = true
    end,
})

RebindLoopHipHeight = CreateRebindButton("HipHeight")

ToggleLoopSit = PlayerCategory:CreateToggle({
	Text = "Sit",
	Info = "Loop Sits Your Character",
	MouseButton1Click = function(Args)
		LoopSit = not LoopSit
		ModuleToggled(ToggleLoopSit, "Sit", LoopSit, Args.NoNotify)
		if LoopSit then
            if LoopNoSit then
                ToggleLoopNoSit:Toggle({NoNotify = true})
            end
			local Char = GetChar(Plr)
			local Humanoid = GetHumanoid(Char)
			if Char and Humanoid then
				Connections.Other.LoopSit = Humanoid:GetPropertyChangedSignal("Sit"):Connect(function()
					Humanoid.Sit = true
				end)
				Humanoid.Sit = true
			end
		else
			if Connections.Other.LoopSit then
				Connections.Other.LoopSit:Disconnect()
				Connections.Other.LoopSit = nil
			end
		end
	end,
    MouseButton2Click = function()
        RebindLoopSit.Visible = true
    end,
})

RebindLoopSit = CreateRebindButton("LoopSit")

ToggleLoopNoSit = PlayerCategory:CreateToggle({
	Text = "No Sit",
	Info = "Loop Un-Sits Your Character",
	MouseButton1Click = function(Args)
		LoopNoSit = not LoopNoSit
		ModuleToggled(ToggleLoopNoSit, "No Sit", LoopNoSit, Args.NoNotify)
		if LoopNoSit then
			if Connections.Other.LoopSit then
				Connections.Other.LoopSit:Disconnect()
			end
			local Char = GetChar(Plr)
			local Humanoid = GetHumanoid(Char)
			if Char and Humanoid then
				Connections.Other.LoopNoSit = Humanoid:GetPropertyChangedSignal("Sit"):Connect(function()
					Humanoid.Sit = false
				end)
				Humanoid.Sit = false
			end
		else
			if Connections.Other.LoopNoSit then
				Connections.Other.LoopNoSit:Disconnect()
				Connections.Other.LoopNoSit = nil
			end
		end
	end,
    MouseButton2Click = function()
        RebindLoopNoSit.Visible = true
    end,
})

RebindLoopNoSit = CreateRebindButton("LoopNoSit")

ForceLaydown = PlayerCategory:CreateButton({
	Text = "Laydown",
	Info = "Makes Your Character Laydown",
	MouseButton1Click = function(Args)
		local Char = GetChar(Plr)
		local Humanoid = GetHumanoid(Char)
		if Char and Humanoid then
			Humanoid.Sit = true
			task.wait(0.1)
			local Root = GetRoot(Char)
			if Root then
				Root.CFrame = Root.CFrame * CFrame.Angles(math.pi * 0.5, 0, 0)
			end
			for i, v in pairs(Humanoid:GetPlayingAnimationTracks()) do
				v:Stop()
			end
		end
	end,
    MouseButton2Click = function()
        RebindForceLaydown.Visible = true
    end,
})

RebindForceLaydown = CreateRebindButton("Laydown")

ResetPlayer = PlayerCategory:CreateButton({
	Text = "Reset",
	Info = "Resets Your Player",
	MouseButton1Click = function(Args)
		local Char = GetChar(Plr)
		local Humanoid = GetHumanoid(Char)
		if Char and Humanoid then
			Humanoid:ChangeState(Enum.HumanoidStateType.Dead)
		end
	end,
    MouseButton2Click = function()
        RebindResetPlayer.Visible = true
    end,
})

RebindResetPlayer = CreateRebindButton("Reset")

PromptR6 = PlayerCategory:CreateButton({
	Text = "Prompt R6",
	Info = "Prompts You To Switch Your Character To R6",
	MouseButton1Click = function()
		local Char = GetChar(Plr)
		local Humanoid = GetHumanoid(Char)
		if Char and Humanoid then
			AvatarEditorService:PromptSaveAvatar(Humanoid.HumanoidDescription, Enum.HumanoidRigType["R6"])
			local Result = AvatarEditorService.PromptSaveAvatarCompleted:Wait()
			if Result == Enum.AvatarPromptResult.Success then
				Humanoid:ChangeState(Enum.HumanoidStateType.Dead)
			end
		end
	end,
})

PromptR15 = PlayerCategory:CreateButton({
	Text = "Prompt R15",
	Info = "Prompts You To Switch Your Character To R15",
	Function = function()
		local Char = GetChar(Plr)
		local Humanoid = GetHumanoid(Char)
		if Char and Humanoid then
			AvatarEditorService:PromptSaveAvatar(Humanoid.HumanoidDescription, Enum.HumanoidRigType["R15"])
			local Result = AvatarEditorService.PromptSaveAvatarCompleted:Wait()
			if Result == Enum.AvatarPromptResult.Success then
				Humanoid:ChangeState(Enum.HumanoidStateType.Dead)
			end
		end
	end,
})

RefreshAnimations = PlayerCategory:CreateButton({
	Text = "Refresh Animations",
	Info = "Refreshes All Animations",
	MouseButton1Click = function()
		local Char = GetChar(Plr)
		local Humanoid = GetHumanoid(Char)
		local Animate = Char:FindFirstChild("Animate")
		if Char and Humanoid then
			if Animate then
				Animate.Disabled = true
			end
			for i, v in pairs(Char:GetPlayingAnimationTracks()) do
				if v:IsA("Animation") then
					v:Stop()
				end
			end
			if Animate then
				Animate.Disabled = false
			end
		end
	end,
    MouseButton2Click = function()
        RebindRefreshAnimations.Visible = true
    end,
})

RebindRefreshAnimations = CreateRebindButton("RefreshAnimations")

DestroyCharacterVelocityInstances = PlayerCategory:CreateButton({
	Text = "Destroy Character Velocity Instances",
	Info = "Destroys All Velocity Instances",
	MouseButton1Click = function()
		local Char = GetChar(Plr)
        if not Char then return end
		for i, v in pairs(Char:GetDescendants()) do
            if v:IsA("BodyVelocity") or v:IsA("BodyGyro") or v:IsA("RocketPropulsion") or v:IsA("BodyThrust") or v:IsA("BodyAngularVelocity") or v:IsA("AngularVelocity") or v:IsA("BodyForce") or v:IsA("VectorForce") or v:IsA("LineForce") then
                v:Destroy()
            end
        end
	end,
    MouseButton2Click = function()
        RebindDestroyCharacterVelocityInstances.Visible = true
    end,
})

RebindDestroyCharacterVelocityInstances = CreateRebindButton("Destroy Character Velocity Instances")

FixCamera = PlayerCategory:CreateButton({
	Text = "Fix Camera",
	Info = "Attempts To Fix Your Camera (Might Not Work)",
	MouseButton1Click = function()
		if ViewingPlayer then
			ToggleViewPlayer:Toggle({NoNotify = true})
		end
		if FreecamEnabled then
			ToggleFreecam:Toggle({NoNotify = true})
		end
		local Char = GetChar(Plr)
		local Root = GetRootPart(Char)
		local Humanoid = GetHumanoid(Char)
		if Char and Humanoid then
			workspace.CurrentCamera.CameraSubject = Humanoid
		elseif Char and Char:FindFirstChild("Head") then
			workspace.CurrentCamera.CameraSubject = Char:FindFirstChild("Head")
		elseif Char and Root then
			workspace.CurrentCamera.CameraSubject = Root
		end
		workspace.CurrentCamera.CameraType = Enum.CameraType.Custom
	end,
    MouseButton2Click = function()
        RebindFixCamera.Visible = true
    end,
})

RebindFixCamera = CreateRebindButton("FixCamera")

ToggleNoclipCamera = PlayerCategory:CreateToggle({
	Text = "Noclip Camera",
	Info = "Allows You To Move Your Camera Through Walls",
	MouseButton1Click = function(Args)
		NoclipCamera = not NoclipCamera
		ModuleToggled(ToggleNoclipCamera, "Noclip Camera", NoclipCamera, Args.NoNotify)
        if not SetConstant then return NotifyExploitDoesntSupportFunction("SetConstant") end
        if not GetConstants then return NotifyExploitDoesntSupportFunction("GetConstants") end
        if not Getgc then return NotifyExploitDoesntSupportFunction("Getgc") end
        local Pop = Plr:FindFirstChildWhichIsA("PlayerScripts").PlayerModule.CameraModule.ZoomController.Popper
		for i, v in pairs(Getgc()) do
            if type(v) == "function" and getfenv(v).script == Pop then
                for i2, v2 in pairs(GetConstants(v)) do
                    if tonumber(v2) == 0.25 and NoclipCamera then
                        SetConstant(v, i2, 0)
                    elseif tonumber(v2) == 0 and not NoclipCamera then
                        SetConstant(v, i2, 0.25)
                    end
                end
            end
        end
	end,
    MouseButton2Click = function()
        RebindNoclipCamera.Visible = true
    end,
})

RebindNoclipCamera = CreateRebindButton("NoclipCamera")

ClientAntiKick = PlayerCategory:CreateButton({
	Text = "Client Anti Kick",
	Info = "Prevents You From Getting Kicked From Local Scripts",
	MouseButton1Click = function(Args)
        if not Hookmetamethod then return NotifyExploitDoesntSupportFunction("Hookmetamethod") end
        if not GetNameCallMethod then return NotifyExploitDoesntSupportFunction("GetNameCallMethod") end
		local OldIndex; OldIndex = Hookmetamethod(game, "__index", NewCClosure(function(self, Key)
            if self == Plr and Key:lower() == "kick" then
                return error("Expected ':' not '.' calling member function Kick", 2)
            end
            return OldIndex(self, Key)
        end))
        local OldNameCall; OldNameCall = Hookmetamethod(game, "__namecall", NewCClosure(function(self, ...)
            if self == Plr and GetNameCallMethod():lower() == "kick" then
                return
            end
            return OldNameCall(self, ...)
        end))
        ModuleToggled(ClientAntiKick, "ClientAntiKick", true, Args.NoNotify)
	end,
})

ClientAntiTeleport = PlayerCategory:CreateButton({
	Text = "Client Anti Teleport",
	Info = "Prevents You From Getting Teleported From Local Scripts",
	MouseButton1Click = function(Args)
        if not Hookmetamethod then return NotifyExploitDoesntSupportFunction("Hookmetamethod") end
        if not GetNameCallMethod then return NotifyExploitDoesntSupportFunction("GetNameCallMethod") end
		local OldIndex; OldIndex = Hookmetamethod(game, "__index", NewCClosure(function(self, Key)
            if self == TeleportService then
                if Key:lower() == "teleport" then
                    return error("Expected ':' not '.' calling member function Kick", 2)
                elseif Key == "TeleportToPlaceInstance" then
                    return error("Expected ':' not '.' calling member function TeleportToPlaceInstance", 2)
                end
            end
            return OldIndex(self, Key)
        end))
        local OldNameCall; OldNameCall = Hookmetamethod(game, "__namecall", NewCClosure(function(self, ...)
            if self == TeleportService and GetNameCallMethod():lower() == "teleport" or GetNameCallMethod() == "TeleportToPlaceInstance" then
                return
            end
            return OldNameCall(self, ...)
        end))
        ModuleToggled(ClientAntiTeleport, "ClientAntiTeleport", true, Args.NoNotify)
	end,
})

CharDelete = PlayerCategory:CreateTextbox({
	ButtonText = "Char Delete",
	PlaceholderText = "Name",
	Info = "Deletes All Instances In Your Character With The Specified Name",
	MouseButton1Click = function(Args)
		local Char = GetChar(Plr)
		if not Char then return end
		for i, v in pairs(Char:GetDescendants()) do
			if string.lower(v.Name) == string.lower(Args.Text) then
                v:Destroy()
            end
		end
	end,
})

CharDeleteClass = PlayerCategory:CreateTextbox({
	ButtonText = "Char Delete Class",
	PlaceholderText = "Class Name",
	Info = "Deletes All Instances In Your Character With The Specified Class Name",
	MouseButton1Click = function(Args)
		local Char = GetChar(Plr)
		if not Char then return end
		for i, v in pairs(Char:GetDescendants()) do
			if string.lower(v.ClassName) == string.lower(Args.Text) then
                v:Destroy()
            end
		end
	end,
})

ToggleAntiRagdoll = PlayerCategory:CreateToggle({
	Text = "Anti Ragdoll",
	Info = "Prevents You From Ragdolling",
	MouseButton1Click = function(Args)
		AntiRagdoll = not AntiRagdoll
		ModuleToggled(ToggleAntiRagdoll, "AntiRagdoll", AntiRagdoll, Args.NoNotify)
		local Char = GetChar(Plr)
		local Humanoid = GetHumanoid(Char)
		if AntiRagdoll then
			if Char and Humanoid then
				Humanoid:SetStateEnabled(Enum.HumanoidStateType.FallingDown, false)
				Connections.Player.AntiRagdollLoop = Humanoid.StateEnabledChanged:Connect(function(State, Enabled)
					if State == Enum.HumanoidStateType.FallingDown and Enabled then
						Humanoid:SetStateEnabled(Enum.HumanoidStateType.FallingDown, false)
					end
				end)
			end
		else
			if Char and Humanoid then
				Humanoid:SetStateEnabled(Enum.HumanoidStateType.FallingDown, true)
			end
			if Connections.Player.AntiRagdollLoop then
				Connections.Player.AntiRagdollLoop:Disconnect()
				Connections.Player.AntiRagdollLoop = nil
			end
		end
	end,
    MouseButton2Click = function()
        RebindAntiRagdoll.Visible = true
    end,
})

RebindAntiRagdoll = CreateRebindButton("AntiRagdoll")

do
    Connections.StateConnections = {}

	local function UpdateStates()
		local Char = GetChar(Plr)
		local Humanoid = GetHumanoid(Char)
		if Char and Humanoid then
			local HumanoidStates = Enum.HumanoidStateType:GetEnumItems()
			table.remove(HumanoidStates, 17)
			for i, v in ipairs(HumanoidStates) do
				if table.find(Connections.Storage.StatesDisabled, v.Name) then
					if DisableState then
						Humanoid:SetStateEnabled(v, false)
					end
				else
					Humanoid:SetStateEnabled(v, true)
				end
			end
		end
	end
	
	ToggleDisableState = PlayerCategory:CreateToggle({
		Text = "Disable State",
		Info = "Disables States",
		MouseButton1Click = function(Args)
			DisableState = not DisableState
			ModuleToggled(ToggleDisableState, "Disable State", DisableState, Args.NoNotify)
			if DisableState then
				local Char = GetChar(Plr)
				local Humanoid = GetHumanoid(Char)
				for i, v in pairs(Connections.Storage.StatesDisabled) do
					Connections.StateConnections[v] = Humanoid and Humanoid.StateEnabledChanged:Connect(function(State, Enabled)
						if Enabled and table.find(Connections.Storage.StatesDisabled, State.Name) then
							Humanoid:SetStateEnabled(State, false)
						end
					end)
				end
			else
				for i, v in pairs(Connections.StateConnections) do
					v:Disconnect()
					v = nil
				end
                table.clear(StateConnections)
			end
		end,
		MouseButton2Click = function()
			HumanoidStatesDropdown.MainFrame.Visible = true
            RebindDisableState.Visible = true
		end,
	})
end

RebindDisableState = CreateRebindButton("DisableState")

HumanoidStatesDropdown = CreateDropdown({
    Text = "State",
    Default = "",
})

HumanoidStatesDropdown:CreateButton({
    Text = "FallingDown",
    On = function()
        if not table.find(StatesDisabled, "FallingDown") then
            table.insert(StatesDisabled, "FallingDown")
        end
    end,
    Off = function()
        if table.find(StatesDisabled, "FallingDown") then
            table.remove(StatesDisabled, table.find(StatesDisabled, "FallingDown"))
        end
    end,
})

HumanoidStatesDropdown:CreateButton({
    Text = "Ragdoll",
    On = function()
        if not table.find(StatesDisabled, "Ragdoll") then
            table.insert(StatesDisabled, "Ragdoll")
        end
    end,
    Off = function()
        if table.find(StatesDisabled, "Ragdoll") then
            table.remove(StatesDisabled, table.find(StatesDisabled, "Ragdoll"))
        end
    end,
})

HumanoidStatesDropdown:CreateButton({
    Text = "GettingUp",
    On = function()
        if not table.find(StatesDisabled, "GettingUp") then
            table.insert(StatesDisabled, "GettingUp")
        end
    end,
    Off = function()
        if table.find(StatesDisabled, "GettingUp") then
            table.remove(StatesDisabled, table.find(StatesDisabled, "GettingUp"))
        end
    end,
})

HumanoidStatesDropdown:CreateButton({
    Text = "Jumping",
    On = function()
        if not table.find(StatesDisabled, "Jumping") then
            table.insert(StatesDisabled, "Jumping")
        end
    end,
    Off = function()
        if table.find(StatesDisabled, "Jumping") then
            table.remove(StatesDisabled, table.find(StatesDisabled, "Jumping"))
        end
    end,
})

HumanoidStatesDropdown:CreateButton({
    Text = "Swimming",
    On = function()
        if not table.find(StatesDisabled, "Swimming") then
            table.insert(StatesDisabled, "Swimming")
        end
    end,
    Off = function()
        if table.find(StatesDisabled, "Swimming") then
            table.remove(StatesDisabled, table.find(StatesDisabled, "Swimming"))
        end
    end,
})

HumanoidStatesDropdown:CreateButton({
    Text = "FreeFall",
    On = function()
        if not table.find(StatesDisabled, "Freefall") then
            table.insert(StatesDisabled, "Freefall")
        end
    end,
    Off = function()
        if table.find(StatesDisabled, "Freefall") then
            table.remove(StatesDisabled, table.find(StatesDisabled, "Freefall"))
        end
    end,
})

HumanoidStatesDropdown:CreateButton({
    Text = "Flying",
    On = function()
        if not table.find(StatesDisabled, "Flying") then
            table.insert(StatesDisabled, "Flying")
        end
    end,
    Off = function()
        if table.find(StatesDisabled, "Flying") then
            table.remove(StatesDisabled, table.find(StatesDisabled, "Flying"))
        end
    end,
})

HumanoidStatesDropdown:CreateButton({
    Text = "Landed",
    On = function()
        if not table.find(StatesDisabled, "Landed") then
            table.insert(StatesDisabled, "Landed")
        end
    end,
    Off = function()
        if table.find(StatesDisabled, "Landed") then
            table.remove(StatesDisabled, table.find(StatesDisabled, "Landed"))
        end
    end,
})

HumanoidStatesDropdown:CreateButton({
    Text = "Running",
    On = function()
        if not table.find(StatesDisabled, "Running") then
            table.insert(StatesDisabled, "Running")
        end
    end,
    Off = function()
        if table.find(StatesDisabled, "Running") then
            table.remove(StatesDisabled, table.find(StatesDisabled, "Running"))
        end
    end,
})

HumanoidStatesDropdown:CreateButton({
    Text = "RunningNoPhysics",
    On = function()
        if not table.find(StatesDisabled, "RunningNoPhysics") then
            table.insert(StatesDisabled, "RunningNoPhysics")
        end
    end,
    Off = function()
        if table.find(StatesDisabled, "RunningNoPhysics") then
            table.remove(StatesDisabled, table.find(StatesDisabled, "RunningNoPhysics"))
        end
    end,
})

HumanoidStatesDropdown:CreateButton({
    Text = "StrafingNoPhysics",
    On = function()
        if not table.find(StatesDisabled, "StrafingNoPhysics") then
            table.insert(StatesDisabled, "StrafingNoPhysics")
        end
    end,
    Off = function()
        if table.find(StatesDisabled, "StrafingNoPhysics") then
            table.remove(StatesDisabled, table.find(StatesDisabled, "StrafingNoPhysics"))
        end
    end,
})

HumanoidStatesDropdown:CreateButton({
    Text = "Climbing",
    On = function()
        if not table.find(StatesDisabled, "Climbing") then
            table.insert(StatesDisabled, "Climbing")
        end
    end,
    Off = function()
        if table.find(StatesDisabled, "Climbing") then
            table.remove(StatesDisabled, table.find(StatesDisabled, "Climbing"))
        end
    end,
})

HumanoidStatesDropdown:CreateButton({
    Text = "Seated",
    On = function()
        if not table.find(StatesDisabled, "Seated") then
            table.insert(StatesDisabled, "Seated")
        end
    end,
    Off = function()
        if table.find(StatesDisabled, "Seated") then
            table.remove(StatesDisabled, table.find(StatesDisabled, "Seated"))
        end
    end,
})

HumanoidStatesDropdown:CreateButton({
    Text = "PlatformStanding",
    On = function()
        if not table.find(StatesDisabled, "PlatformStanding") then
            table.insert(StatesDisabled, "PlatformStanding")
        end
    end,
    Off = function()
        if table.find(StatesDisabled, "PlatformStanding") then
            table.remove(StatesDisabled, table.find(StatesDisabled, "PlatformStanding"))
        end
    end,
})

HumanoidStatesDropdown:CreateButton({
    Text = "Dead",
    On = function()
        if not table.find(StatesDisabled, "Dead") then
            table.insert(StatesDisabled, "Dead")
        end
    end,
    Off = function()
        if table.find(StatesDisabled, "Dead") then
            table.remove(StatesDisabled, table.find(StatesDisabled, "Dead"))
        end
    end,
})

HumanoidStatesDropdown:CreateButton({
    Text = "Physics",
    On = function()
        if not table.find(StatesDisabled, "Physics") then
            table.insert(StatesDisabled, "Physics")
        end
    end,
    Off = function()
        if table.find(StatesDisabled, "Physics") then
            table.remove(StatesDisabled, table.find(StatesDisabled, "Physics"))
        end
    end,
})

DropTools = PlayerCategory:CreateButton({
	Text = "Drop Tools",
	Info = "Might Lag Depending On How Many Tools You Have",
	MouseButton1Click = function()
		local Backpack = Plr:FindFirstChildWhichIsA("Backpack")
		local Char = GetChar(Plr)
		if not (Char or Backpack) then return end
		for i, v in pairs(Backpack:GetChildren()) do
			if v:IsA("Tool") then
				v.Parent = Char
				if SlowDropTools and i % DropToolsInterval == 0 then
					task.wait()
				end
			end
		end
		task.wait(0.1)
		RunService.Heartbeat:Wait()
		for i, v in pairs(Char:GetChildren()) do
			if v:IsA("Tool") then
				v.Parent = workspace
				if SlowDropTools and i % DropToolsInterval == 0 then
					task.wait()
				end
			end
		end
	end,
	MouseButton2Click = function()
		ToggleSlowDropTools.MainFrame.Visible = true
		DropToolsIntervalSlider.Visible = true
        RebindDropTools.Visible = true
	end,
})

RebindDropTools = CreateRebindButton("DropTools")

ToggleSlowDropTools = CreateToggle({
    Text = "Slow Drop Tools",
    Info = "Slowly Drops Tools Improving Performance But Might Take A Long Time To Drop Tools",
    Function = function()
        SlowDropTools = not SlowDropTools
        ToggleButtonColor(ToggleSlowDropTools, SlowDropTools)
    end,
})

DropToolsIntervalSlider = CreateSlider({
    Text = "Interval",
    Min = 0,
    Default = 30,
    Max = 300,
    Function = function(Val)
        DropToolsInterval = math.round(Val)
    end,
    Function2 = function(Val)
        DropToolsInterval = math.round(Val)
    end,
})

do
	local BangAnim = nil
	local LoadedBangAnim = nil

	BangPlayer = PlayerCategory:CreateTextbox({
		ButtonText = "Bang",
		PlaceholderText = "Player Name",
		EnabledIndicator = true,
		MouseButton1Click = function(Args)
			BangEnabled = not BangEnabled
			ModuleToggled(BangPlayer, "Bang", BangEnabled, Args.NoNotify)
			if BangEnabled then
				local Char = GetChar(Plr)
				local Root = GetRoot(Char)
				local Humanoid = GetHumanoid(Char)

				if not (Char and Root and Humanoid) then return end

				BangAnim = Instance.new("Animation")
				BangAnim.AnimationId = not R15(Plr) and "rbxassetid://148840371" or "rbxassetid://5918726674"
				
				LoadedBangAnim = Humanoid:LoadAnimation(BangAnim)
                LoadedBangAnim.Priority = Enum.AnimationPriority.Action4
				LoadedBangAnim.Looped = true
				LoadedBangAnim:Play(0.1, 1, 1)
				LoadedBangAnim:AdjustSpeed(3)
				
				local BangOffset = CFrame.new(0, 0, 1.1)

				if Args.Text == "" then return end

				local Player = FindPlayer(Args.Text)
				local PlayerChar = GetChar(Player)
				local PlayerRoot = GetRoot(PlayerChar)

				Connections.Player.BangLoop = RunService.Heartbeat:Connect(function()
					Char = GetChar(Plr)
					Root = GetRoot(Char)
					Humanoid = GetHumanoid(Char)
					Player = FindPlayer(Args.Text)
					PlayerChar = GetChar(Player)
					PlayerRoot = GetRoot(PlayerChar)
					if not (Char and Root and Humanoid and Player and PlayerChar and PlayerRoot) then return end 
					Root.CFrame = PlayerRoot.CFrame * BangOffset
				end)
			else
				if Connections.Player.BangLoop then
					Connections.Player.BangLoop:Disconnect()
					Connections.Player.BangLoop = nil
				end
				if BangAnim then
					BangAnim:Destroy()
					BangAnim = nil
				end
				if LoadedBangAnim then
					LoadedBangAnim:Stop()
					LoadedBangAnim = nil
				end
			end
		end,
        MouseButton2Click = function()
            RebindBang.Visible = true
        end,
	})

    RebindBang = CreateRebindButton("Bang")

	local JerkAnim = nil
	local LoadedJerkAnim = nil

	ToggleJerk = PlayerCategory:CreateToggle({
		Text = "Jerk",
		MouseButton1Click = function(Args)
			Jerking = not Jerking
			ModuleToggled(ToggleJerk, "Jerk", Jerking, Args.NoNotify)
			if Jerking then
				local Char = GetChar(Plr)
				local Humanoid = GetHumanoid(Char)
				if not (Char and Humanoid) then return end
                local IsR15 = R15(Plr)
				JerkAnim = Instance.new("Animation")
            	JerkAnim.AnimationId = IsR15 and "rbxassetid://698251653" or "rbxassetid://72042024"
				LoadedJerkAnim = Humanoid:LoadAnimation(JerkAnim)
                LoadedJerkAnim.Priority = Enum.AnimationPriority.Action4
				LoadedJerkAnim.Looped = true
				LoadedJerkAnim:Play()
				LoadedJerkAnim:AdjustSpeed(IsR15 and 0.7 or 0.65)
                LoadedJerkAnim.TimePosition = 0.6
				task.spawn(function()
                    while Jerking do
                        task.wait(IsR15 and 0.2 or 0.15)
						Char = GetChar(Plr)
						Humanoid = GetHumanoid(Char)
						if not (Char and Humanoid) or not Jerking then continue end
						LoadedJerkAnim.TimePosition = 0.6
                    end
				end)
			else
				if JerkAnim then
					JerkAnim:Destroy()
					JerkAnim = nil
				end
				if LoadedJerkAnim then
					LoadedJerkAnim:Stop()
					LoadedJerkAnim = nil
				end
			end
		end,
        MouseButton2Click = function()
            RebindJerk.Visible = true
        end,
	})

    RebindJerk = CreateRebindButton("Jerk")
end

do
	local Anim = nil
	local LoadedAnim = nil
	
	PlayAnimation = PlayerCategory:CreateTextbox({
		ButtonText = "Play Anim",
		PlaceholderText = "Anim Id",
		EnabledIndicator = true,
		MouseButton1Click = function(Args)
			AnimPlaying = not AnimPlaying
			ModuleToggled(PlayAnimation, "Play Anim", AnimPlaying, Args.NoNotify)
			if AnimPlaying then
				local Char = GetChar(Plr)
				local Humanoid = GetHumanoid(Char)
				if not (Char and Humanoid) then return end
				local Anim = Instance.new("Animation")
				if string.find(Args.Text, "rbxassetid://") then
					Anim.AnimationId = Args.Text
				else
					Anim.AnimationId = "rbxassetid://" .. Args.Text
				end
				LoadedAnim = Humanoid:LoadAnimation(Anim)
                LoadedAnim.Priority = Enum.AnimationPriority.Action4
				LoadedAnim.Looped = true
				LoadedAnim:Play()
			else
				if Anim then
					Anim:Destroy()
					Anim = nil
				end
				if LoadedAnim then
					LoadedAnim:Stop()
					LoadedAnim = nil
				end
			end
		end,
	})
end

do
	local Anim = nil
	local LoadedAnim = nil
	local R6Dance = "27789359"
	local R15Dance = "3333432454"

	ToggleDance = PlayerCategory:CreateToggle({
		Text = "Dance",
		Info = "It Makes You Dance",
		MouseButton1Click = function(Args)
			Dancing = not Dancing
			ModuleToggled(ToggleDance, "Dance", Dancing, Args.NoNotify)
			if Dancing then
				local Char = GetChar(Plr)
				local Humanoid = GetHumanoid(Char)
				if not (Char and Humanoid) then return end
				Anim = Instance.new("Animation")
				Anim.AnimationId = R15(Plr) and "rbxassetid://" .. R15Dance or not R15(Plr) and "rbxassetid://" .. R6Dance
				LoadedAnim = Humanoid:LoadAnimation(Anim)
                LoadedAnim.Priority = Enum.AnimationPriority.Action4
				LoadedAnim.Looped = true
				LoadedAnim:Play()
			else
				if Anim then
					Anim:Destroy()
					Anim = nil
				end
				if LoadedAnim then
					LoadedAnim:Stop()
					LoadedAnim = nil
				end
			end
		end,
		MouseButton2Click = function()
			R6DancesDropdown.MainFrame.Visible = true
			R15DancesDropdown.MainFrame.Visible = true
		end,
	})

	R6DancesDropdown = CreateDropdown({
		Text = "R6 Dances",
		Default = "27789359",
		AutoUpdateText = true,
	})
	R6DancesDropdown:CreateButton({
		Text = "27789359",
		Function = function()
			R6Dance = "27789359"
		end,
	})
	R6DancesDropdown:CreateButton({
		Text = "30196114",
		Function = function()
			R6Dance = "30196114"
		end,
	})
	R6DancesDropdown:CreateButton({
		Text = "248263260",
		Function = function()
			R6Dance = "248263260"
		end,
	})
	R6DancesDropdown:CreateButton({
		Text = "45834924",
		Function = function()
			R6Dance = "45834924"
		end,
	})
	R6DancesDropdown:CreateButton({
		Text = "33796059",
		Function = function()
			R6Dance = "33796059"
		end,
	})
	R6DancesDropdown:CreateButton({
		Text = "28488254",
		Function = function()
			R6Dance = "28488254"
		end,
	})
	R6DancesDropdown:CreateButton({
		Text = "52155728",
		Function = function()
			R6Dance = "52155728"
		end,
	})

	R15DancesDropdown = CreateDropdown({
		Text = "R15 Dances",
		Default = "3333432454",
		AutoUpdateText = true,
	})
	R15DancesDropdown:CreateButton({
		Text = "3333432454",
		Function = function()
			R15Dance = "3333432454"
		end,
	})
	R15DancesDropdown:CreateButton({
		Text = "4555808220",
		Function = function()
			R15Dance = "4555808220"
		end,
	})
	R15DancesDropdown:CreateButton({
		Text = "4049037604",
		Function = function()
			R15Dance = "4049037604"
		end,
	})
	R15DancesDropdown:CreateButton({
		Text = "4555782893",
		Function = function()
			R15Dance = "4555782893"
		end,
	})
	R15DancesDropdown:CreateButton({
		Text = "Break Dance",
		Function = function()
			R15Dance = "10214311282"
		end,
	})
	R15DancesDropdown:CreateButton({
		Text = "10714010337",
		Function = function()
			R15Dance = "10714010337"
		end,
	})
	R15DancesDropdown:CreateButton({
		Text = "10713981723",
		Function = function()
			R15Dance = "10713981723"
		end,
	})
	R15DancesDropdown:CreateButton({
		Text = "10714372526",
		Function = function()
			R15Dance = "10714372526"
		end,
	})
	R15DancesDropdown:CreateButton({
		Text = "10714076981",
		Function = function()
			R15Dance = "10714076981"
		end,
	})
	R15DancesDropdown:CreateButton({
		Text = "10714392151",
		Function = function()
			R15Dance = "10714392151"
		end,
	})
	R15DancesDropdown:CreateButton({
		Text = "11444443576",
		Function = function()
			R15Dance = "11444443576"
		end,
	})
end

----------------------------------------------------------------------------------------------------- Movement Category

do
	local LinearVel
	local VectorForce
	local BodyForce
	local BodyVel
	local PrevSpeed
	local AlignPos
	local BodyThrust
	local LineForce
	local LineForcePart
	local Attachment0
	local Attachment1
    
	local function ChangeWalkSpeed()
		if SpeedHack and SpeedHackMethod == "WalkSpeed" then
			local Char = GetChar(Plr)
			local Humanoid = GetHumanoid(Char)
			if Char and Humanoid then
				if PrevSpeed and OnlyWhenSpeedLowered and PrevSpeed < Humanoid.WalkSpeed then return end
				Humanoid.WalkSpeed = WalkSpeed
				PrevSpeed = Humanoid.WalkSpeed
			end
		else
			if Connections.Movement.SpeedHackLoop then
				Connections.Movement.SpeedHackLoop:Disconnect()
			end
		end
	end

	local function DestroyAllMovers()
		if LinearVel then
			LinearVel:Destroy()
			LinearVel = nil
		end
		if VectorForce then
			VectorForce:Destroy()
			VectorForce = nil
		end
		if BodyForce then
			BodyForce:Destroy()
			BodyForce = nil
		end
		if BodyVel then
			BodyVel:Destroy()
			BodyVel = nil
		end
		if AlignPos then
			AlignPos:Destroy()
			AlignPos = nil
		end
		if BodyThrust then
			BodyThrust:Destroy()
			BodyThrust = nil
		end
        if LineForce then
            LineForce:Destroy()
            LineForce = nil
        end
        if Attachment0 then
			Attachment0:Destroy()
			Attachment0 = nil
		end
		if Attachment1 then
			Attachment1:Destroy()
			Attachment1 = nil
		end
        if LineForcePart then
            LineForcePart:Destroy()
            LineForcePart = nil
        end
	end
    
	ToggleSpeedHack = Movement:CreateToggle({
		Text = "Speed Hack",
		Info = "Sets Your Walk Speed To The Specified Value.",
		MouseButton1Click = function(Args)
			SpeedHack = not SpeedHack
			ModuleToggled(ToggleSpeedHack, "Speed Hack", SpeedHack, Args.NoNotify)
			if SpeedHack then
				local Char = GetChar(Plr)
				local Humanoid = GetHumanoid(Char)
                local Root = GetRoot(Char)

				if SpeedHackMethod == "WalkSpeed" then
					ChangeWalkSpeed()
					Connections.Movement.SpeedHackLoop = Humanoid and Humanoid:GetPropertyChangedSignal("WalkSpeed"):Connect(ChangeWalkSpeed)
					return
				end
                
				Connections.Movement.SpeedHackLoop = RunService.Heartbeat:Connect(function(Delta)
					Char = GetChar(Plr)
					Root = GetRoot(Char)
					Humanoid = GetHumanoid(Char)
					if not (Char and Root and Humanoid) then return end

                    local MoveDirection = Humanoid.MoveDirection

					if SpeedHackMethod == "LinearVelocity" then
						if LinearVel then
							LinearVel.VectorVelocity = MoveDirection * WalkSpeed
						else
							DestroyAllMovers()
							LinearVel = Instance.new("LinearVelocity")
							LinearVel.VectorVelocity = Vector3.new(0, 0, 0)
                            LinearVel.Parent = Root
							Attachment0 = Instance.new("Attachment")
                            Attachment0.Parent = Root
							LinearVel.Attachment0 = Attachment0
							LinearVel.ForceLimitMode = Enum.ForceLimitMode.PerAxis
							LinearVel.MaxAxesForce = Vector3.new(math.huge, 0, math.huge)
							LinearVel.RelativeTo = Enum.ActuatorRelativeTo.World
							LinearVel.AncestryChanged:Once(DestroyAllMovers)
							Attachment0.AncestryChanged:Once(DestroyAllMovers)
						end
					elseif SpeedHackMethod == "VectorForce" then
						if VectorForce then
							VectorForce.Force = MoveDirection * (50 * WalkSpeed)
						else
							DestroyAllMovers()
							VectorForce = Instance.new("VectorForce")
							VectorForce.Force = Vector3.new(0, 0, 0)
                            VectorForce.Parent = Root
							Attachment0 = Instance.new("Attachment")
                            Attachment0.Parent = Root
							VectorForce.Attachment0 = Attachment0
							VectorForce.RelativeTo = Enum.ActuatorRelativeTo.World
							VectorForce.AncestryChanged:Once(DestroyAllMovers)
							Attachment0.AncestryChanged:Once(DestroyAllMovers)
						end
					elseif SpeedHackMethod == "BodyForce" then
						if BodyForce then
							BodyForce.Force = MoveDirection * (250 * WalkSpeed)
						else
							DestroyAllMovers()
							BodyForce = Instance.new("BodyForce")
							BodyForce.Force = Vector3.new(0, 0, 0)
                            BodyForce.Parent = Root
							BodyForce.AncestryChanged:Once(DestroyAllMovers)
						end
					elseif SpeedHackMethod == "BodyVelocity" then
						if BodyVel then
							BodyVel.Velocity = MoveDirection * WalkSpeed
						else
							DestroyAllMovers()
							BodyVel = Instance.new("BodyVelocity")
							BodyVel.Velocity = Vector3.new(0, 0, 0)
							BodyVel.MaxForce = Vector3.new(math.huge, 0, math.huge)
                            BodyVel.Parent = Root
							BodyVel.AncestryChanged:Once(DestroyAllMovers)
						end
					elseif SpeedHackMethod == "AlignPosition" then
						if AlignPos then
							AlignPos.Position = Root.Position + (MoveDirection * WalkSpeed) / 60
						else
							DestroyAllMovers()
                            Attachment0 = Instance.new("Attachment")
                            Attachment0.Parent = Root
							AlignPos = Instance.new("AlignPosition")
							AlignPos.Position = Root.Position
							AlignPos.Attachment0 = Attachment0
							AlignPos.Mode = Enum.PositionAlignmentMode.OneAttachment
							AlignPos.ForceLimitMode = Enum.ForceLimitMode.PerAxis
							AlignPos.MaxAxesForce = Vector3.new(math.huge, 0, math.huge)
							AlignPos.Responsiveness = 200
                            AlignPos.ApplyAtCenterOfMass = true
                            AlignPos.Parent = Root
							AlignPos.AncestryChanged:Once(DestroyAllMovers)
							Attachment0.AncestryChanged:Once(DestroyAllMovers)
						end
					elseif SpeedHackMethod == "TpWalk" then
                        if TpWalkUsePercentage then
                            Char:TranslateBy((MoveDirection * (Humanoid.WalkSpeed * (TpWalkSpeedPercentage / 100))) * Delta)
                        else
                            Char:TranslateBy((MoveDirection * WalkSpeed) * Delta)
                        end
					elseif SpeedHackMethod == "AssemblyLinearVelocity" then
						Root.AssemblyLinearVelocity = Vector3.new(MoveDirection.X * WalkSpeed, Root.AssemblyLinearVelocity.Y, MoveDirection.Z * WalkSpeed)
					elseif SpeedHackMethod == "BodyThrust" then
						if BodyThrust then
							Root.CFrame = LookTowards(Root.Position, Camera.CFrame.Position) * CFrame.Angles(0, math.rad(180), 0)
							BodyThrust.Force = Vector3.new(0, 0, 0)
							if UIS:IsKeyDown(Enum.KeyCode.W) then
								BodyThrust.Force += Vector3.new(0, 0, -1)
							end
							if UIS:IsKeyDown(Enum.KeyCode.A) then
								BodyThrust.Force -= Vector3.new(-1, 0, 0)
							end
							if UIS:IsKeyDown(Enum.KeyCode.S) then
								BodyThrust.Force -= Vector3.new(0, 0, 1)
							end
							if UIS:IsKeyDown(Enum.KeyCode.D) then
								BodyThrust.Force += Vector3.new(1, 0, 0)
							end
							BodyThrust.Force *= WalkSpeed * 100
						else
                            DestroyAllMovers()
							BodyThrust = Instance.new("BodyThrust")
							BodyThrust.Force = Vector3.new(0, 0, 0)
                            BodyThrust.Parent = Root
							BodyThrust.AncestryChanged:Once(DestroyAllMovers)
						end
					elseif SpeedHackMethod == "LineForce" then
						if LineForce then
							Attachment1.WorldPosition = Root.Position + MoveDirection
							LineForce.Magnitude = MoveDirection.Magnitude * WalkSpeed * 100
						else
                            DestroyLineForceInstances()
							Attachment0 = Instance.new("Attachment")
                            Attachment0.Parent = Root
							LineForcePart = Instance.new("Part")
							LineForcePart.Transparency = 1
							LineForcePart.CastShadow = false
							LineForcePart.CanCollide = false
							LineForcePart.CanTouch = false
							LineForcePart.CanQuery = false
							LineForcePart.Size = Vector3.new(0, 0, 0)
                            LineForcePart.Parent = workspace
							Attachment1 = Instance.new("Attachment")
                            Attachment1.Parent = LineForcePart
							LineForce = Instance.new("LineForce")
							LineForce.Attachment0 = Attachment0
							LineForce.Attachment1 = Attachment1
							LineForce.Magnitude = 0
                            LineForce.Parent = Root

							LineForce.AncestryChanged:Once(DestroyAllMovers)
							LineForcePart.AncestryChanged:Once(DestroyAllMovers)
							Attachment0.AncestryChanged:Once(DestroyAllMovers)
							Attachment1.AncestryChanged:Once(DestroyAllMovers)
						end
					end
				end)
			else
				DestroyAllMovers()
				if Connections.Movement.SpeedHackLoop then
					Connections.Movement.SpeedHackLoop:Disconnect()
					Connections.Movement.SpeedHackLoop = nil
				end
			end
		end,
		MouseButton2Click = function()
			RebindSpeedHack.Visible = true
			WalkSpeedSlider.Visible = true
			SpeedHackMethodDropdown.MainFrame.Visible = true
			ToggleOnlyWhenSpeedLowers.MainFrame.Visible = true
            ToggleTpWalkUsePercentage.MainFrame.Visible = true
            TpWalkSpeedPercentageSlider.Visible = true
		end,
	})

    RebindSpeedHack = CreateRebindButton("SpeedHack")
    WalkSpeedSlider = CreateSlider({
        Text = "Speed",
        Min = 0,
        Default = 16,
        Max = 160,
        Function = function(Val)
            WalkSpeed = Val
            if SpeedHack and SpeedHackMethod == "WalkSpeed" then
                ChangeWalkSpeed()
            end
        end,
        Function2 = function(Val)
            WalkSpeed = Val
            if SpeedHack and SpeedHackMethod == "WalkSpeed" then
                ChangeWalkSpeed()
            end
        end,
    })

    SpeedHackMethodDropdown = CreateDropdown({
        Text = "Speed Hack Method",
        Default = "Walk Speed",
        AutoUpdateText = true,
    })
    SpeedHackMethodDropdown:CreateButton({
        Text = "WalkSpeed",
        Info = "It Walk Speed",
        Function = function()
            SpeedHackMethod = "WalkSpeed"
        end,
    })
    SpeedHackMethodDropdown:CreateButton({
        Text = "Linear Velocity",
        Info = "Is Simular To Body Velocity And Accelerates Pretty Much Instantly But Is Slightly Worse (Requires An Attachment)",
        Function = function()
            SpeedHackMethod = "LinearVelocity"
        end,
    })
    SpeedHackMethodDropdown:CreateButton({
        Text = "Vector Force",
        Info = "Is Simular To Body Force With Slow Acceleration And Fast Speed But Way Weaker (Requires An Attachment)",
        Function = function()
            SpeedHackMethod = "VectorForce"
        end,
    })
    SpeedHackMethodDropdown:CreateButton({
        Text = "Body Force",
        Info = "Accelerates Slow But Has The Highest Top Speed Of Them All (Does Not Require Attachment)",
        Function = function()
            SpeedHackMethod = "BodyForce"
        end,
    })
    SpeedHackMethodDropdown:CreateButton({
        Text = "Body Velocity",
        Info = "Accelerates Instantly And Is Smooth Probably The Best Out Of All Of Them (Does Not Require Attachment)",
        Function = function()
            SpeedHackMethod = "BodyVelocity"
        end,
    })
    SpeedHackMethodDropdown:CreateButton({
        Text = "Align Position",
        Info = "It Aligns Your Position",
        Function = function()
            SpeedHackMethod = "AlignPosition"
        end,
    })
    SpeedHackMethodDropdown:CreateButton({
        Text = "Assembly Linear Velocity",
        Function = function()
            SpeedHackMethod = "AssemblyLinearVelocity"
        end,
    })
    SpeedHackMethodDropdown:CreateButton({
        Text = "Tp Walk",
        Info = "Does Small Teleports idk man",
        Function = function()
            SpeedHackMethod = "TpWalk"
        end,
    })
    SpeedHackMethodDropdown:CreateButton({
        Text = "Body Thrust",
        Function = function()
            SpeedHackMethod = "BodyThrust"
        end,
    })
    SpeedHackMethodDropdown:CreateButton({
        Text = "Line Force",
        Function = function()
            SpeedHackMethod = "LineForce"
        end,
    })

    ToggleOnlyWhenSpeedLowers = CreateToggle({
        Text = "Only When Speed Gets Lowered",
        Info = "Only Changes Speed When It Gets Lowered",
        Function = function()
            OnlyWhenSpeedLowered = not OnlyWhenSpeedLowered
            ToggleButtonColor(ToggleOnlyWhenSpeedLowers, OnlyWhenSpeedLowered)
        end,
    })

    ToggleTpWalkUsePercentage = CreateToggle({
        Text = "TP Walk Use Percentage",
        Info = "Increases Your Speed By A Specified Percentage Of Your Current Speed",
        MouseButton1Click = function()
            TpWalkUsePercentage = not TpWalkUsePercentage
            ToggleButtonColor(ToggleTpWalkUsePercentage, TpWalkUsePercentage)
        end,
    })

    TpWalkSpeedPercentageSlider = CreateSlider({
        Text = "Tp Walk Speed Percentage",
        Min = 0,
        Default = 10,
        Max = 100,
        Function = function(Val)
            TpWalkSpeedPercentage = Val
        end,
        Function2 = function(Val)
            TpWalkSpeedPercentage = Val
        end,
    })
end

do
    local function UpdateJumpPower()
        local Char = GetChar(Plr)
        local Humanoid = GetHumanoid(Char)
        if not (Char and Humanoid and JumpPowerEnabled) then return end
        Humanoid.JumpPower = JumpPower
        Humanoid.UseJumpPower = true
    end

    ToggleJumpPower = Movement:CreateToggle({
        Text = "Jump Power",
        Info = "Sets Your Jump Power To The Specified Value.",
        Function = function(Args)
            JumpPowerEnabled = not JumpPowerEnabled
            ModuleToggled(ToggleJumpPower, "Jump Power", JumpPowerEnabled, Args.NoNotify)
            if JumpPowerEnabled then
                local Char = GetChar(Plr)
                local Humanoid = GetHumanoid(Char)
                local function ChangeJumpPower()
                    local Char = GetChar(Plr)
                    local Humaonid = GetHumanoid(Char)
                    if Char and Humanoid then
                        Humanoid.JumpPower = JumpPower
                        Humanoid.UseJumpPower = true
                    end
                end
                ChangeJumpPower()
                Connections.Movement.JumpPowerLoop = Humanoid and Humanoid:GetPropertyChangedSignal("JumpPower"):Connect(ChangeJumpPower)
            else
                if Connections.Movement.JumpPowerLoop then
                    Connections.Movement.JumpPowerLoop:Disconnect()
                    Connections.Movement.JumpPowerLoop = nil
                end
            end
        end,
        Function2 = function()
            RebindJumpPower.Visible = true
            JumpPowerSlider.Visible = true
        end,
    })

    RebindJumpPower = CreateRebindButton("JumpPower")
    JumpPowerSlider = CreateSlider({
        Text = "Jump Power",
        Min = 0,
        Default = 50,
        Max = 500,
        Function = function(Val)
            JumpPower = Val
            UpdateJumpPower()
        end,
        Function2 = function(Val)
            JumpPower = Val
            UpdateJumpPower()
        end,
    })
end

do
    local function UpdateGravity()
        if not GravityEnabled then return end
        workspace.Gravity = Gravity
    end
    ToggleGravity = Movement:CreateToggle({
        Text = "Gravity",
        Info = "Sets Your Gravity To The Specified Value.",
        Function = function(Args)
            GravityEnabled = not GravityEnabled
            ModuleToggled(ToggleGravity, "Gravity", GravityEnabled, Args.NoNotify)
            if GravityEnabled then
                workspace.Gravity = Gravity
                Connections.Movement.GravityLoop = workspace:GetPropertyChangedSignal("Gravity"):Connect(function()
                    workspace.Gravity = Gravity
                end)
            else
                if Connections.Movement.GravityLoop then 
                    Connections.Movement.GravityLoop:Disconnect()
                    Connections.Movement.GravityLoop = nil
                end
            end
        end,
        Function2 = function()
            RebindGravity.Visible = true
            GravitySlider.Visible = true
        end,
    })

    RebindGravity = CreateRebindButton("Gravity")
    GravitySlider = CreateSlider({
        Text = "Gravity",
        Min = 0,
        Default = 196.2,
        Max = 1000,
        Function = function(Val)
            Gravity = Val
            UpdateGravity()
        end,
        Function2 = function(Val)
            Gravity = Val
            UpdateGravity()
        end,
    })
end

ToggleInfiniteJump = Movement:CreateToggle({
	Text = "Infinite Jump",
	Info = "Allows You To Jump Infinitly Even While Midair.",
	Function = function(Args)
		InfiniteJump = not InfiniteJump
		ModuleToggled(ToggleInfiniteJump, "Infinite Jump", InfiniteJump, Args.NoNotify)
	end,
	Function2 = function()
		RebindInfiniteJump.Visible = true
		ToggleJumpWhileTyping.MainFrame.Visible = true
	end,
})

RebindInfiniteJump = CreateRebindButton("InfinteJump")
ToggleJumpWhileTyping = CreateToggle({
    Text = "Jump While Typing",
    Function = function()
        JumpWhileTyping = not JumpWhileTyping
        ToggleButtonColor(ToggleJumpWhileTyping, JumpWhileTyping)
    end,
})

do
	local PrevSpeedHackEnabled
	local BodyVel
	local LinearVel
	local VectorForce
	local BodyForce
	local AlignPos
	local AlignOrientation
	local BodyThrust
	local LineForce
	local LineForcePart
	local Attachment0
	local Attachment1

	local function DestroyMovers()
		if BodyVel then
			BodyVel:Destroy()
			BodyVel = nil
		end
		if LinearVel then
			LinearVel:Destroy()
			LinearVel = nil
		end
		if VectorForce then
			VectorForce:Destroy()
			VectorForce = nil
		end
		if BodyForce then
			BodyForce:Destroy()
			BodyForce = nil
		end
		if AlignPos then
			AlignPos:Destroy()
			AlignPos = nil
		end
		if AlignOrientation then
			AlignOrientation:Destroy()
			AlignOrientation = nil
		end
		if BodyThrust then
			BodyThrust:Destroy()
			BodyThrust = nil
		end
        if Attachment0 then
			Attachment0:Destroy()
			Attachment0 = nil
		end
		if Attachment1 then
			Attachment1:Destroy()
			Attachment1 = nil
		end
        if LineForce then
			LineForce:Destroy()
			LineForce = nil
		end
        if LineForcePart then
			LineForcePart:Destroy()
			LineForcePart = nil
		end
	end
	
	ToggleFly = Movement:CreateToggle({
		Text = "Fly",
		Info = "Its Fly What Do You Expect.",
		Function = function(Args)
			Fly = not Fly
			ModuleToggled(ToggleFly, "Fly", Fly, Args.NoNotify)
			if Fly then
				PrevSpeedHackEnabled = SpeedHack

				if SpeedHack then
					ToggleSpeedHack:Toggle({NoNotify = true})
					task.wait()
				end

				local Char = GetChar(Plr)
				local Root = GetRoot(Char)
				local Humanoid = GetHumanoid(Char)
				local Vel = Vector3.new(0, 0, 0)
				
				Connections.Movement.FlyLoop = RunService.Heartbeat:Connect(function(Delta)
					Char = GetChar(Plr)
					Root = GetRoot(Char)
					Humanoid = GetHumanoid(Char)
					if not (Char and Root) then return end
                    if UseFlyAlignOrientation then
                        if AlignOrientation then
                            AlignOrientation.CFrame = Camera.CFrame
                        else
                            AlignOrientation = Instance.new("AlignOrientation")
                            AlignOrientation.Mode = Enum.OrientationAlignmentMode.OneAttachment
                            Attachment0 = Instance.new("Attachment")
                            Attachment0.Parent = Root
                            AlignOrientation.Attachment0 = Attachment0
                            AlignOrientation.RigidityEnabled = true
                            AlignOrientation.CFrame = Root.CFrame
                            AlignOrientation.Name = "TidalWaveFlyAlignOrientation"
                            AlignOrientation.Parent = Root
                            AlignOrientation.AncestryChanged:Once(DestroyMovers)
                        end
                    else
                        if AlignOrientation then
                            AlignOrientation:Destroy()
                            AlignOrientation = nil
                        end
                    end
					
                    Vel = Vector3.new(0, 0, 0)

					if not (ChatboxFocused() and TidalWaveFocused) then
						if UIS:IsKeyDown(Enum.KeyCode.E) or UIS:IsKeyDown(Enum.KeyCode.R) or UIS:IsKeyDown(Enum.KeyCode.Space) then
							Vel += Camera.CFrame.UpVector
						end
						if UIS:IsKeyDown(Enum.KeyCode.Q) then
							Vel -= Camera.CFrame.UpVector
						end
						if UIS:IsKeyDown(Enum.KeyCode.W) then
							Vel += Camera.CFrame.LookVector
						end
						if UIS:IsKeyDown(Enum.KeyCode.A) then
							Vel -= Camera.CFrame.RightVector
						end
						if UIS:IsKeyDown(Enum.KeyCode.S) then
							Vel -= Camera.CFrame.LookVector
						end
						if UIS:IsKeyDown(Enum.KeyCode.D) then
							Vel += Camera.CFrame.RightVector
						end
					end
					if FlyMethod == "BodyVelocity" then
						if BodyVel then
							BodyVel.Velocity = Vel * FlySpeed
						else
							BodyVel = Instance.new("BodyVelocity")
							BodyVel.MaxForce = Vector3.new(math.huge, math.huge, math.huge)
							BodyVel.Velocity = Vector3.new(0, 0, 0)
							BodyVel.Name = "TidalWaveFlyBodyVelocity"
                            BodyVel.Parent = Root
							BodyVel.AncestryChanged:Once(DestroyMovers)
						end
					elseif FlyMethod == "LinearVelocity" then
						if LinearVel then
							LinearVel.VectorVelocity = Vel * FlySpeed
						else
							LinearVel = Instance.new("LinearVelocity")
							LinearVel.VectorVelocity = Vector3.new(0, 0, 0)
                            Attachment0 = Instance.new("Attachment")
                            Attachment0.Parent = Root
							LinearVel.Attachment0 = Attachment0
							LinearVel.ForceLimitMode = Enum.ForceLimitMode.PerAxis
							LinearVel.MaxAxesForce = Vector3.new(math.huge, math.huge, math.huge)
							LinearVel.RelativeTo = Enum.ActuatorRelativeTo.World
							LinearVel.Name = "SpeedHackLinearVel"
                            LinearVel.Parent = Root
							LinearVel.AncestryChanged:Once(DestroyMovers)
						end
					elseif FlyMethod == "VectorForce" then
						if VectorForce then
							VectorForce.Force = Vector3.new(Vel.X * (50 * FlySpeed), Vel.Y * (75 * FlySpeed), Vel.Z * (50 * FlySpeed))
						else
							VectorForce = Instance.new("VectorForce")
							VectorForce.Force = Vector3.new(0, 0, 0)
                            Attachment0 = Instance.new("Attachment")
                            Attachment0.Parent = Root
							VectorForce.Attachment0 = Attachment0
							VectorForce.RelativeTo = Enum.ActuatorRelativeTo.World
							VectorForce.Name = "SpeedHackVectorForce"
                            VectorForce.Parent = Root
							VectorForce.AncestryChanged:Once(DestroyMovers)
						end
					elseif FlyMethod == "BodyForce" then
						if BodyForce then
							BodyForce.Force = Vector3.new(Vel.X * (50 * FlySpeed), Vel.Y * (75 * FlySpeed), Vel.Z * (50 * FlySpeed))
						else
							BodyForce = Instance.new("BodyForce")
							BodyForce.Force = Vector3.new(0, 0, 0)
							BodyForce.Name = "SpeedHackBodyForce"
                            BodyForce.Parent = Root
							BodyForce.AncestryChanged:Once(DestroyMovers)
						end
					elseif FlyMethod == "AlignPosition" then
						if AlignPos then
							AlignPos.Position = Root.Position + Vel * FlySpeed / 40
						else
							AlignPos = Instance.new("AlignPosition")
							AlignPos.Position = Root.Position
                            Attachment0 = Instance.new("Attachment")
                            Attachment0.Parent = Root
							AlignPos.Attachment0 = Attachment0
							AlignPos.Mode = Enum.PositionAlignmentMode.OneAttachment
							AlignPos.ForceLimitMode = Enum.ForceLimitMode.PerAxis
							AlignPos.MaxAxesForce = Vector3.new(math.huge, math.huge, math.huge)
							AlignPos.Responsiveness = 200
                            AlignPos.Parent = Root
							AlignPos.AncestryChanged:Once(DestroyMovers)
						end
					elseif FlyMethod == "TpFly" then
						Root.AssemblyLinearVelocity = Vector3.new(0, 0, 0)
                        if TpFlyUsePercentage and Humanoid then
                            Char:TranslateBy((Vel * Humanoid.WalkSpeed) * Delta * 2)
                        else
                            Char:TranslateBy((Vel * FlySpeed) * Delta * 2)
                        end
                        RunService.Stepped:Wait()
                        Root.AssemblyLinearVelocity = Vector3.new(0, 0, 0)
					elseif FlyMethod == "AssemblyLinearVelocity" then
						Root.AssemblyLinearVelocity = Vel * FlySpeed
					elseif FlyMethod == "BodyThrust" then
						if BodyThrust then
							BodyThrust.Force = Vel * FlySpeed * 100
						else
							BodyThrust = Instance.new("BodyThrust")
							BodyThrust.Force = Vector3.new(0, 0, 0)
                            BodyThrust.Parent = Root
							BodyThrust.AncestryChanged:Once(DestroyMovers)
						end
					elseif FlyMethod == "LineForce" then
						if LineForce then
							Attachment1.WorldPosition = Root.Position + Vel
							LineForce.Magnitude = Vector3.new(Vel.X, Vel.Y * 5, Vel.Z).Magnitude * FlySpeed * 15
						else
							LineForcePart = Instance.new("Part")
							LineForcePart.Transparency = 1
							LineForcePart.CanCollide = false
							LineForcePart.CanTouch = false
							LineForcePart.CanQuery = false
                            LineForcePart.Parent = workspace

                            Attachment0 = Instance.new("Attachment")
                            Attachment0.Parent = Root

                            Attachment1 = Instance.new("Attachment")
                            Attachment1.Parent = LineForcePart

							LineForce = Instance.new("LineForce")
							LineForce.Attachment0 = Attachment0
							LineForce.Attachment1 = Attachment1
							LineForce.Magnitude = 0
                            LineForce.Parent = Root

							LineForce.AncestryChanged:Once(DestroyMovers)
							Attachment0.AncestryChanged:Once(DestroyMovers)
							Attachment1.AncestryChanged:Once(DestroyMovers)
							LineForcePart.AncestryChanged:Once(DestroyMovers)
						end
					end
				end)
			else
				if Connections.Movement.FlyLoop then
					Connections.Movement.FlyLoop:Disconnect()
					Connections.Movement.FlyLoop = nil
				end
                DestroyMovers()
				if not SpeedHack and PrevSpeedHackEnabled then
					ToggleSpeedHack:Toggle({NoNotify = true})
					PrevSpeedHackEnabled = nil
				end
			end
		end,
		Function2 = function()
			RebindFly.Visible = true
			ChangeFlySpeedSlider.Visible = true
			ToggleUseFlyAlignOrientation.MainFrame.Visible = true
			FlyMethodDropdown.MainFrame.Visible = true
		end,
	})

    RebindFly = CreateRebindButton("Fly")
    ChangeFlySpeedSlider = CreateSlider({
        Text = "Fly Speed",
        Min = 0,
        Default = 50,
        Max = 500,
        Function = function(Val)
            FlySpeed = Val
        end,
        Function2 = function(Val)
            FlySpeed = Val
        end,
    })

    ToggleUseFlyAlignOrientation = CreateToggle({
        Text = "Use Align Orientation",
        EnabledIndicatorDefault = true,
        Function = function()
            UseFlyAlignOrientation = not UseFlyAlignOrientation
            ToggleButtonColor(ToggleUseFlyAlignOrientation, UseFlyAlignOrientation)
        end,
    })

    ToggleTpFlyUsePercentage = CreateToggle({
        Text = "Tp Fly Use Percentage",
        MouseButton1Click = function()
            TpFlyUsePercentage = not TpFlyUsePercentage
            ToggleButtonColor(ToggleTpFlyUsePercentage, TpFlyUsePercentage)
        end,
    })

    FlyMethodDropdown = CreateDropdown({
        Text = "Fly Method",
        Default = "Body Velocity",
        AutoUpdateText = true,
    })
    FlyMethodDropdown:CreateButton({
        Text = "Body Velocity",
        Function = function()
            FlyMethod = "BodyVelocity"
        end,
    })
    FlyMethodDropdown:CreateButton({
        Text = "Linear Velocity",
        Function = function()
            FlyMethod = "LinearVelocity"
        end,
    })
    FlyMethodDropdown:CreateButton({
        Text = "Vector Force",
        Function = function()
            FlyMethod = "VectorForce"
        end,
    })
    FlyMethodDropdown:CreateButton({
        Text = "Body Force",
        Function = function()
            FlyMethod = "BodyForce"
        end,
    })
    FlyMethodDropdown:CreateButton({
        Text = "Align Position",
        Function = function()
            FlyMethod = "AlignPosition"
        end,
    })
    FlyMethodDropdown:CreateButton({
        Text = "Tp Fly",
        Info = "Does Lots Of Small Teleports",
        Function = function()
            FlyMethod = "TpFly"
        end,
    })
    FlyMethodDropdown:CreateButton({
        Text = "Assembly Linear Velocity",
        Function = function()
            FlyMethod = "AssemblyLinearVelocity"
        end,
    })
    FlyMethodDropdown:CreateButton({
        Text = "Body Thrust",
        Function = function()
            FlyMethod = "BodyThrust"
        end,
    })
    FlyMethodDropdown:CreateButton({
        Text = "Line Force",
        Function = function()
            FlyMethod = "LineForce"
        end,
    })
end

do
	local FloatPart

	local function DisconnectAllFloatConnections()
		if Connections.Movement.FloatKeysBegan then
			Connections.Movement.FloatKeysBegan:Disconnect()
			Connections.Movement.FloatKeysBegan = nil
		end
		if Connections.Movement.FloatKeysEnded then
			Connections.Movement.FloatKeysEnded:Disconnect()
			Connections.Movement.FloatKeysEnded = nil
		end
		if Connections.Movement.FloatFunction then
			Connections.Movement.FloatFunction:Disconnect()
			Connections.Movement.FloatFunction = nil
		end
		if FloatPart then
			FloatPart:Destroy()
			FloatPart = nil
		end
	end
	
	ToggleFloat = Movement:CreateToggle({
		Text = "Float",
		Info = "Creates An Invisible Part Below You Allowing You To Float",
		Function = function(Args)
			Float = not Float
			ModuleToggled(ToggleFloat, "Float", Float, Args.NoNotify)
			if Float then
				local Char = GetChar(Plr)
				local Root = GetRoot(Char)

				local FloatVal = -3.1
				
				Connections.Movement.FloatKeysBegan = UIS.InputBegan:Connect(function(Input)
					if ChatboxFocused() or TidalWaveFocused then return end
					if Input.KeyCode == Enum.KeyCode.Q then 
						FloatVal -= 0.5
					elseif Input.KeyCode == Enum.KeyCode.E or Input.KeyCode == Enum.KeyCode.R then
						FloatVal += 1.5
					end
				end)
				Connections.Movement.FloatKeysEnded = UIS.InputEnded:Connect(function(Input)
					if ChatboxFocused() or TidalWaveFocused then return end
					if Input.KeyCode == Enum.KeyCode.Q then
						FloatVal += 0.5
					elseif Input.KeyCode == Enum.KeyCode.E or Input.KeyCode == Enum.KeyCode.R  then
						FloatVal -= 1.5
					end
				end)
				Connections.Movement.FloatFunction = RunService.Heartbeat:Connect(function()
					if FloatPart then
						FloatPart.CFrame = Root.CFrame * CFrame.new(0, FloatVal, 0)
					else
						Char = GetChar(Plr)
						Root = GetRoot(Char)
						if not (Char and Root) then return end
						FloatPart = Instance.new("Part")
						FloatPart.Transparency = FloatPartTransparency
						FloatPart.Size = Vector3.new(2, 0.2, 1.5)
						FloatPart.Anchored = true
                        FloatPart.Parent = workspace
					end
				end)
			else
				DisconnectAllFloatConnections()
			end
		end,
		Function2 = function()
			RebindFloat.Visible = true
			FloatPartTransparencySlider.Visible = true
		end,
	})

    RebindFloat = CreateRebindButton("Float")
    FloatPartTransparencySlider = CreateSlider({
        Text = "Float Part Transparency",
        Min = 0,
        Default = 1,
        Max = 1,
        Function = function(Val)
            FloatPart.Transparency = Val
        end,
        Function2 = function(Val)
            FloatPart.Transparency = Val
        end,
    })
end

TeleportToPlayer = Movement:CreateTextbox({
	ButtonText = "Teleport To Player",
	PlaceholderText = "Player Name",
	Info = "Teleports You To The Specified Player",
	MouseButton1Click = function(Args)
		PlayerToTeleportTo = FindPlayer(Args.Text)
		if PlayerToTeleportTo == Plr or not PlayerToTeleportTo then return end
		local Char = GetChar(Plr)
		local RootPart = GetRootPart(Char)
		local PlayerChar = GetChar(PlayerToTeleportTo)
		local PlayerRootPart = GetRootPart(PlayerChar)

		if not (Char and RootPart and PlayerChar and PlayerRootPart) then return end

		local PrevPos = RootPart.CFrame
		RootPart.CFrame = PlayerRootPart.CFrame

		if not PulseTeleport then return end

		task.delay(PulseTeleportTime, function()
			RootPart.CFrame = PrevPos
		end)
	end,
	MouseButton2Click = function()
		RebindTeleportToPlayer.Visible = true
		TogglePulseTeleport.MainFrame.Visible = true
		PulseTeleportSpeedSlider.Visible = true
	end,
})

RebindTeleportToPlayer = CreateRebindButton("TeleportToPlayer")
TogglePulseTeleport = CreateToggle({
    Text = "Pulse Teleport",
    Function = function()
        PulseTeleport = not PulseTeleport
        ToggleButtonColor(TogglePulseTeleport, PulseTeleport)
    end,
})

PulseTeleportSpeedSlider = CreateSlider({
    Text = "Pulse Teleport Speed (In Seconds)",
    Min = 0,
    Default = 0,
    Max = 10,
    Function = function(Val)
        PulseTeleportTime = Val
    end,
    Function2 = function(Val)
        PulseTeleportTime = Val
    end,
})

ToggleLoopTeleportToPlayer = Movement:CreateTextbox({
	PlaceholderText = "Player Name",
	ButtonText = "Loop Teleport To Player",
	EnabledIndicator = true,
	MouseButton1Click = function(Args)
		TeleportEnabled = not TeleportEnabled
		ModuleToggled(ToggleLoopTeleportToPlayer, "Loop Teleport", TeleportEnabled, Args.NoNotify)
		if TeleportEnabled then
			Connections.Movement.LoopTeleportToPlayer = RunService.Stepped:Connect(function()
				local Char = GetChar(Plr)
				local Root = GetRoot(Char)
				local PlayerChar = GetChar(PlayerToLoopTeleportTo)
				local PlayerRoot = GetRoot(PlayerChar)
				if Char and Root and PlayerChar and PlayerRoot then
					Root.CFrame = PlayerRoot.CFrame
				end
			end)
		else
			if Connections.Movement.LoopTeleportToPlayer then
				Connections.Movement.LoopTeleportToPlayer:Disconnect()
				Connections.Movement.LoopTeleportToPlayer = nil
			end
		end
	end,
    MouseButton2Click = function()
        RebindLoopTeleport.Visible = true
    end,
	FocusLost = function(Args)
		PlayerToLoopTeleportTo = FindPlayer(Args.Text)
	end,
})

RebindLoopTeleport = CreateRebindButton("LoopTeleport")

ToggleClickTeleport = Movement:CreateToggle({
	Text = "Click Teleport",
	Info = "Teleports You To Your Mouses Position When You Have Your Binded Key Down And Mouse Button 1 Down.",
	Function = function(Args)
		ClickTeleportEnabled = not ClickTeleportEnabled
		ModuleToggled(ToggleClickTeleport, "Click Teleport", ClickTeleportEnabled, Args.NoNotify)
	end,
	Function2 = function()
		RebindToggleClickTeleport.Visible = true
		ToggleClickTeleportSound.MainFrame.Visible = true
	end,
})

RebindToggleClickTeleport = CreateRebindButton("ClickTeleport")

ToggleClickTeleportSound = CreateToggle({
    Text = "Teleport Sound",
    Info = "Play Sound When Teleport Happen :D",
    Function = function()
        ClickTeleportSoundEnabled = not ClickTeleportSoundEnabled
        ToggleButtonColor(ToggleClickTeleportSound, ClickTeleportSoundEnabled)
    end,
})

ToggleCFrameFly = Movement:CreateToggle({
	Text = "CFrame Fly",
	Info = "Works Like Normal Fly Except It Will Not Update Your Position For Other Players Until You Stop Flying (This Will Bypass Fly Anticheats But Will Most Likely Be Detected From A Teleport Anticheat)",
	Function = function(Args)
		CFrameFly = not CFrameFly
		ModuleToggled(ToggleCFrameFly, "CFrame Fly", CFrameFly, Args.NoNotify)
		if CFrameFly then
			local Char = GetChar(Plr)
			if Char then
				local Head = Char:WaitForChild("Head", 5)
				if Head then
					Head.Anchored = true
					Connections.Movement.CFrameFlyLoop = RunService.Heartbeat:Connect(function(DeltaTime)
						local Char = GetChar(Plr)
						local Humanoid = GetHumanoid(Char)
						if Char and Humanoid and Head then
							local CameraOffset = Head.CFrame:ToObjectSpace(Camera.CFrame).Position
							Camera.CFrame = Camera.CFrame * CFrame.new(-CameraOffset.X, -CameraOffset.Y, -CameraOffset.Z + 1)
							local ObjectSpaceVelocity = CFrame.new(Camera.CFrame.Position, Vector3.new(Head.CFrame.Position.X,  Camera.CFrame.Position.Y, Head.CFrame.Position.Z)):VectorToObjectSpace(Humanoid.MoveDirection * (CFrameFlySpeed * DeltaTime))
							Head.CFrame = CFrame.new(Head.CFrame.Position) * (Camera.CFrame -  Camera.CFrame.Position) * CFrame.new(ObjectSpaceVelocity)
						end
					end)
				end
			end
		else
			if Connections.Movement.CFrameFlyLoop then
				Connections.Movement.CFrameFlyLoop:Disconnect()
				Connections.Movement.CFrameFlyLoop = nil
			end
			local Char = GetChar(Plr)
			if not Char then return end
			local Head = Char:WaitForChild("Head", 3)
			if not Head then return end
			Head.Anchored = false
		end
	end,
    MouseButton2Click = function()
        RebindCFrameFly.Visible = true
    end,
})

RebindCFrameFly = CreateRebindButton("CFrameFly")

ToggleSwim = Movement:CreateToggle({
	Text = "Swim",
	Info = "Force Makes Your Character To Swim Allowing To To Swim In The Air",
	Function = function(Args)
		Swimming = not Swimming
		ModuleToggled(ToggleSwim, "Swim", Swimming, Args.NoNotify)
		local OldGravity
		if Swimming then
			OldGravity = workspace.Gravity
			local Char = GetChar(Plr)
			local Humanoid = GetHumanoid(Char)
			workspace.Gravity = 0
			Connections.Movement.SwimHumanoidDied = Humanoid and Humanoid.Died:Once(function()
				workspace.Gravity = OldGravity or 196.2
				Swimming = false
			end)
			local States = Enum.HumanoidStateType:GetEnumItems()
			table.remove(States, table.find(States, Enum.HumanoidStateType.None))
			for i, v in pairs(States) do
				Humanoid:SetStateEnabled(v, false)
			end
			Humanoid:ChangeState(Enum.HumanoidStateType.Swimming)
			Connections.Movement.SwimLoop = RunService.Heartbeat:Connect(function()
				local Char = GetChar(Plr)
				local Root = GetRootPart(Char)
				pcall(function()
					Root.Velocity = ((Humanoid.MoveDirection ~= Vector3.new(0, 0, 0) or UIS:IsKeyDown(Enum.KeyCode.Space)) and Root.Velocity or Vector3.new())
				end)
			end)
		else
			if Connections.Movement.SwimLoop then
				Connections.Movement.SwimLoop:Disconnect()
				Connections.Movement.SwimLoop = nil
			end
			Swimming = false
			local States = Enum.HumanoidStateType:GetEnumItems()
			table.remove(States, table.find(States, Enum.HumanoidStateType.None))
			workspace.Gravity = OldGravity or 196.2
			local Times = 0
			local Char = GetChar(Plr)
			local Humanoid = GetHumanoid(Char)
			if not (Char or Humanoid) then return end
			for i, v in pairs(States) do
				Humanoid:SetStateEnabled(v, true)
			end
		end
	end,
})

ToggleFreecam = Movement:CreateToggle({
	Text = "Freecam",
	Info = "Allows Your Camera To Fly Around Freely",
	Function = function()
		FreecamEnabled = not FreecamEnabled
		ToggleButtonColor(ToggleFreecam, FreecamEnabled)
		if FreecamEnabled then
			StartFreecam()
		else
			StopFreecam()
		end
	end,
	Function2 = function()
		FreecamSpeedSlider.Visible = true
	end,
})

FreecamSpeedSlider = CreateSlider({
    Text = "Freecam Speed",
    Min = 0,
    Default = 10,
    Max = 100,
    Function = function(Val)
        FreecamSpeed = Vector3.new(Val, Val, Val)
    end,
    Function2 = function(Val)
        FreecamSpeed = Vector3.new(Val, Val, Val)
    end,
})

ChangeFreecamPosition = Movement:CreateTextbox({
	ButtonText = "Freecam TP",
	PlaceholderText = "X, Y, Z",
	Info = "Sets The Position Of Freecam",
	MouseButton1Click = function(Args)
		local SplitText = string.split(Args.Text, ",")
		if #SplitText < 3 then
			SplitText = string.split(Args.Text, " ")
		end
		if tonumber(SplitText[1]) and tonumber(SplitText[2]) and tonumber(SplitText[3]) then
			StartFreecam(CFrame.new(tonumber(SplitText[1]), tonumber(SplitText[2]), tonumber(SplitText[3])))
		end
	end,
})

FreecamGoto = Movement:CreateTextbox({
	ButtonText = "Freecam Goto",
	PlaceholderText = "Player Name",
	Info = "Teleports Freecam To The Specified Player",
	MouseButton1Click = function(Args)
		local Player = FindPlayer(Args.Text)
		local Char = GetChar(Player)
		local Root = GetRootPart(Char)
		if not (Player and Char and Root) then return end
		StartFreecam(Root.CFrame)
	end,
})

NotifyFreecamPosition = Movement:CreateButton({
	Text = "Notify Freecam Position",
	Function = function()
		if FreecamRunning then
			Notify({
				Text = tostring(Camera.CFrame.Position.X) .. ", " .. tostring(Camera.CFrame.Position.X) .. ", " .. tostring(Camera.CFrame.Position.X),
				Duration = 5,
				Button2 = "Copy",
				Function2 = function()
					SetClipboard(tostring(Camera.CFrame.Position.X) ", " .. tostring(Camera.CFrame.Position.X) .. ", " .. tostring(Camera.CFrame.Position.X))
				end,
			})
			warn(tostring(Camera.CFrame.Position.X) ", " .. tostring(Camera.CFrame.Position.X) .. ", " .. tostring(Camera.CFrame.Position.X))
		else
			Notify({
				Text = "Freecam Is Not On",
			})
		end
	end,
})

GotoCamera = Movement:CreateButton({
	Text = "Goto Camera Position",
	Info = "Teleports Your Character To Your Camera Position",
	Function = function()
		local Char = GetChar(Plr)
		local Root = GetRootPart(Char)
		if not (Char and Root) then return end
		if TweenGotoCameraEnabled then
			TweenService:Create(Root, TweenInfo.new(GotoCameraTweenTime, Enum.EasingStyle.Linear), {CFrame = Camera.CFrame}):Play()
		else
			Root.CFrame = Camera.CFrame
		end
	end,
	Function2 = function()
		ToggleTweenGotoCamera.MainFrame.Visible = true
		TweenGotoCameraTimeSlider.Visible = true
	end,
})

ToggleTweenGotoCamera = CreateToggle({
    Text = "Tween Goto",
    Info = "Toggles Whether Or Not It Tweens Your Character To Your Camera Position",
    Function = function()
        TweenGotoCameraEnabled = not TweenGotoCameraEnabled
        ToggleButtonColor(ToggleTweenGotoCamera, TweenGotoCameraEnabled)
    end,
})

TweenGotoCameraTimeSlider = CreateSlider({
    Text = "Tween Time",
    Min = 0,
    Default = 1,
    Max = 10,
    Function = function(Val)
        GotoCameraTweenTime = Val
    end,
    Function2 = function(Val)
        GotoCameraTweenTime = Val
    end,
})

ToggleWalkFling = Movement:CreateToggle({
	Text = "Walk Fling",
	Info = "Flings Players Without Spinning",
	Function = function(Args)
		WalkFling = not WalkFling
		ModuleToggled(ToggleWalkFling, "Walk Fling", WalkFling, Args.NoNotify)
		if not WalkFling then return end
		if not Noclip then
			ToggleNoclip:Toggle({NoNotify = true})
		end
		local Char = GetChar(Plr)
		local Root = GetRootPart(Char)
		task.spawn(function()
			while WalkFling and not StopScript do
				local Char = GetChar(Plr)
				local Root = GetRootPart(Char)
				local Vel
				if not (Char and Root) then return end
				RunService.Heartbeat:Wait()
				Vel = Root.AssemblyLinearVelocity
				Root.AssemblyLinearVelocity = Vel * 10000 + Vector3.new(0, 10000, 0)
				RunService.RenderStepped:Wait()
				Root.AssemblyLinearVelocity = Vel
			end
		end)
	end,
})

ToggleSpiderHack = Movement:CreateToggle({
	Text = "Spider Hack",
	Info = "Allows You To Climb Up Walls (Hold Shift To Use Noclip Over Spider Hack)",
	Function = function(Args)
		SpiderHack = not SpiderHack
		ModuleToggled(ToggleSpiderHack, "Spider Hack", SpiderHack, Args.NoNotify)
		if SpiderHack then
			local Params = RaycastParams.new()
			Params.FilterType = Enum.RaycastFilterType.Exclude
			Connections.Movement.SpiderHackLoop = RunService.Stepped:Connect(function()
				if TidalWaveKeybinds.UseNoclipOverSpiderHack and UIS:IsKeyDown(TidalWaveKeybinds.UseNoclipOverSpiderHack) and Noclip then return end
				local Char = GetChar(Plr)
				local Root = GetRootPart(Char)
				local Humanoid = GetHumanoid(Char)
				if Char and Root and Humanoid then
					Params.FilterDescendantsInstances = GetAllCharacters()
					local Raycast = workspace:Raycast(Root.Position, Humanoid.MoveDirection * SpiderHackRadius, Params)
					if Raycast then
						Root.AssemblyLinearVelocity = Vector3.new(0, SpiderHackSpeed, 0)
					end
				end
			end)
		else
			if Connections.Movement.SpiderHackLoop then
				Connections.Movement.SpiderHackLoop:Disconnect()
				Connections.Movement.SpiderHackLoop = nil
			end
		end
	end,
	Function2 = function()
		SpiderHackRadiusSlider.Visible = true
		SpiderHackSpeedSlider.Visible = true
		RebindUseNoclipOverSpiderHack.Visible = true
        RebindSpiderHack.Visible = true
	end,
})

RebindUseNoclipOverSpiderHack = CreateRebindButton("UseNoclipOverSpiderHack")

RebindSpiderHack = CreateRebindButton("SpiderHack")
SpiderHackRadiusSlider = CreateSlider({
    Text = "Radius",
    Min = 0,
    Default = 3,
    Max = 30,
    Function = function(Val)
        SpiderHackRadius = Val
    end,
    Function2 = function(Val)
        SpiderHackRadius = Val
    end,
})

SpiderHackSpeedSlider = CreateSlider({
    Text = "Speed",
    Min = 0,
    Default = 50,
    Max = 500,
    Function = function(Val)
        SpiderHackSpeed = Val
    end,
    Function2 = function(Val)
        SpiderHackSpeed = Val
    end,
})

do
	local PrevUseFlyAlignOrientation = nil
	local PrevFly = nil
	
	ToggleFlyFling = Movement:CreateToggle({
		Text = "Fly Fling",
		Info = "Walk Fling But You Are Flying",
		Function = function(Args)
			FlyFling = not FlyFling
			ModuleToggled(ToggleFlyFling, "Fly Fling", FlyFling, Args.NoNotify)
			if FlyFling then
				local Char = GetChar(Plr)
				local Root = GetRootPart(Char)
				PrevFly = Fly
				if not Fly then
					ToggleFly:Toggle({NoNotify = true})
				end
				if not WalkFling then
					ToggleWalkFling:Toggle()
				end
			else
				if Fly and not PrevFly then
					ToggleFly:Toggle({NoNotify = true})
				end
				local Char = GetChar(Plr)
				local Root = GetRoot(Char)
				local Humanoid = GetHumanoid(Char)
				if Char and Humanoid then
					if Root then
						Root.AssemblyLinearVelocity = Vector3.new(0, 0, 0)
					end
					Humanoid:ChangeState(Enum.HumanoidStateType.Freefall)
				end
			end
		end,
		Function2 = function()
			ChangeFlySpeedSlider.Visible = true
		end,
	})

    ChangeFlySpeedSlider = CreateSlider({
        Text = "Fly Speed",
        Min = 0,
        Default = 50,
        Max = 500,
        Function = function(Val)
            FlySpeed = Val
        end,
        Function2 = function(Val)
            FlySpeed = Val
        end,
    })
end

ToggleFollowPlayer = Movement:CreateToggle({
	Text = "Follow Player",
	Info = "Follows The Specified Player",
	Function = function(Args)
		FollowPlayer = not FollowPlayer
		ModuleToggled(ToggleFollowPlayer, "Follow Player", FollowPlayer, Args.NoNotify)
		if PlayerToFollow == Plr then
			Notify({
				Text = "Why Tryna Follow Your Self",
			})
			return
		end
		if FollowPlayer then
			local Path
			task.spawn(function()
				while FollowPlayer and not StopScript do
					local S, Er = pcall(function()
						local Char = GetChar(Plr)
						local Root = GetRootPart(Char)
						local Humanoid = GetHumanoid(Char)
						local PlayerChar = GetChar(PlayerToFollow)
						local PlayerRoot = GetRootPart(PlayerChar)
						if Char and Root and Humanoid and PlayerChar and PlayerRoot then
							if (Root.Position - PlayerRoot.Position).Magnitude > 4 then
								if PathfindFollowPlayer then
									Path = PathfindingService:CreatePath()
									Path:ComputeAsync(Root.Position, PlayerRoot.Position)
									local Waypoints = Path:GetWaypoints()
									for i, Waypoint in pairs(Waypoints) do
										if Waypoint.Action == Enum.PathWaypointAction.Jump and Humanoid then
											Humanoid:ChangeState(Enum.HumanoidStateType.Jumping)
										end
										Humanoid:MoveTo(Waypoint.Position)
									end
								else
									Humanoid:MoveTo(PlayerRoot.Position)
								end
							end
						end
					end)
					task.wait()
				end
			end)
		end
	end,
	Function2 = function()
		PickPlayerToFollowDropdown.MainFrame.Visible = true
		TogglePathfind.MainFrame.Visible = true
	end,
})

PickPlayerToFollowDropdown = CreateDropdown({
    Text = "Player To Follow",
    Default = "nil",
})
PickPlayerToFollowDropdown.OpenBtn.MouseButton1Click:Connect(function()
    for i, v in pairs(PickPlayerToFollowDropdown.DropdownScrollingFrame:GetChildren()) do
        if not v:IsA("UIGridLayout") then
            v:Destroy()
        end
    end
    for i, Player in pairs(Players:GetPlayers()) do
        PickPlayerToFollowDropdown.AddButton({Text = Player.Name}, function()
            PlayerToFollow = Player
        end)
    end
end)

TogglePathfind = CreateToggle({
    Text = "Pathfind",
    Function = function()
        PathfindFollowPlayer = not PathfindFollowPlayer
        ToggleButtonColor(TogglePathfind, PathfindFollowPlayer)
    end,
})

ToggleOrbitPlayer = Movement:CreateTextbox({
	ButtonText = "Orbit",
	PlaceholderText = "Player Name",
	Info = "Orbits Around The Specfied Player",
	EnabledIndicator = true,
	Function = function(Args)
		OrbitEnabled = not OrbitEnabled
		ModuleToggled(ToggleOrbitPlayer, "Orbit", OrbitEnabled, Args.NoNotify)
		if OrbitEnabled then
			local Rotation = 0
			Connections.Movement.OrbitLoop = RunService.Heartbeat:Connect(function()
				local Player = FindPlayer(Args.Textbox.Text)
				local PlayerChar = GetChar(Player)
				local PlayerRoot = GetRootPart(PlayerChar)
				local Char = GetChar(Plr)
				local Root = GetRootPart(Char)
				if not (Player and Player ~= Plr and PlayerChar and PlayerRoot and Char and Root) then return end
				Rotation += OrbitSpeed
				Root.CFrame = CFrame.new(PlayerRoot.Position) * CFrame.Angles(0, math.rad(Rotation), 0) * CFrame.new(OrbitDistance, 0, 0)
				if not OrbitLookAtEnabled then return end
				Root.CFrame = CFrame.lookAt(Root.Position, PlayerRoot.Position)
			end)
		else
			if Connections.Movement.OrbitLoop then
				Connections.Movement.OrbitLoop:Disconnect()
				Connections.Movement.OrbitLoop = nil
			end
		end
	end,
	Function2 = function()
		OrbitDistanceSlider.Visible = true
		OrbitSpeedSlider.Visible = true
		ToggleOrbitLookAt.MainFrame.Visible = true
        RebindOrbitPlayer.Visible = true
	end,
})

RebindOrbitPlayer = CreateRebindButton("OrbitPlayer")
OrbitDistanceSlider = CreateSlider({
    Text = "Orbit Distance",
    Min = 0,
    Default = 6,
    Max = 60,
    Function = function(Val)
        OrbitDistance = Val
    end,
    Function2 = function(Val)
        OrbitDistance = Val
    end,
})

OrbitSpeedSlider = CreateSlider({
    Text = "Orbit Speed",
    Min = 0,
    Default = 0.2,
    Max = 2,
    Function = function(Val)
        OrbitSpeed = Val
    end,
    Function2 = function(Val)
        OrbitSpeed = Val
    end,
})

ToggleOrbitLookAt = CreateToggle({
    Text = "Orbit Look At",
    Info = "Orbits Around The Specfied Player And Looks At Them",
    Function = function()
        OrbitLookAtEnabled = not OrbitLookAtEnabled
        ToggleButtonColor(ToggleOrbitLookAt, OrbitLookAtEnabled)
    end,
})

ToggleFlyJump = Movement:CreateToggle({
	Text = "Fly Jump",
	Info = "Makes Your Character Jump Higher When Flying",
	Function = function(Args)
		FlyJump = not FlyJump
		ModuleToggled(ToggleFlyJump, "Fly Jump", FlyJump, Args.NoNotify)
		if FlyJump then
			Connections.Movement.FlyJump = UIS.JumpRequest:Connect(function()
				local Char = GetChar(Plr)
				local Humanoid = GetHumanoid(Char)
				if Char and Humanoid then
					Humanoid:ChangeState(Enum.HumanoidStateType.Jumping)
				end
			end)
		else
			if Connections.Movement.FlyJump then
				Connections.Movement.FlyJump:Disconnect()
				Connections.Movement.FlyJump = nil
			end
		end
	end,
})

do
	local Path = nil

	ToggleWalkToPos = Movement:CreateTextbox({
		ButtonText = "Walk To Pos",
		Info = "Walks To The Specified Position",
		PlaceholderText = "X, Y, Z",
		EnabledIndicator = true,
		MouseButton1Click = function(Args)
			WalkToPosEnabled = not WalkToPosEnabled
			ModuleToggled(ToggleWalkToPos, "Walk To Position", WalkToPosEnabled, Args.NoNotify)
			if not WalkToPosEnabled then return end
			local Char = GetChar(Plr)
			local Root = GetRootPart(Char)
			local Humanoid = GetHumanoid(Char)
			if not (Char and Root and Humanoid and PosToWalkTo) then return end
			task.spawn(function()
				if PathfindWalkToPosEnabled then
					while WalkToPosEnabled and not StopScript do
						Path = PathfindingService:CreatePath()
						Path:ComputeAsync(Root.Position, PosToWalkTo)
						local Waypoints = Path:GetWaypoints()
						if (Root.Position - PosToWalkTo).Magnitude < 5 then
							for i, Waypoint in pairs(Waypoints) do
								Humanoid:MoveTo(Waypoint.Position)
								if Waypoint.Action == Enum.PathWaypointAction.Jump then
									Humanoid:ChangeState(Enum.HumanoidStateType.Jumping)
								end
								Humanoid.MoveToFinished:Wait()
							end
						end
						task.wait()
					end
				else
					while WalkToPosEnabled and not StopScript do
						Humanoid:MoveTo(PosToWalkTo)
						task.wait()
					end
				end
			end)
		end,
		MouseButton2Click = function()
			TogglePathFindWalkToPos.MainFrame.Visible = true
		end,
		FocusLost = function(Args)
			local Pos = string.split(Args.Text, ",")
			if #Pos == 3 then
				if tonumber(Pos[1]) and tonumber(Pos[2]) and tonumber(Pos[3]) then
					PosToWalkTo = Vector3.new(tonumber(Pos[1]), tonumber(Pos[2]), tonumber(Pos[3]))
				end
			end
		end,
	})

	TogglePathFindWalkToPos = CreateToggle({
		Text = "Pathfind Walk To Pos",
		Info = "Toggles Pathfinding For Walk To Position",
		Function = function(Args)
			PathfindWalkToPosEnabled = not PathfindWalkToPosEnabled
			ToggleButtonColor(TogglePathFindWalkToPos, PathfindWalkToPosEnabled)
		end,
	})
end

do
	local AngVel = nil

    local function DestroyAngleVel()
        if AngVel then
            AngVel:Destroy()
            AngVel = nil
        end
    end

    local function UpdateAngleVel()
		if AngVel then
            AngVel.AngularVelocity = Vector3.new(0, SpinSpeed, 0)
        end
	end

	ToggleSpin = Movement:CreateToggle({
		Text = "Spin",
		Info = "Makes Your Character Spin",
		Function = function(Args)
			Spinning = not Spinning
			ModuleToggled(ToggleSpin, "Spin", Spinning, Args.NoNotify)
			if Spinning then
				local Char = GetChar(Plr)
				local Root = GetRoot(Char)
				if not (Char or Root) then return end
                DestroyAngleVel()
				AngVel = Instance.new("BodyAngularVelocity")
				AngVel.MaxTorque = Vector3.new(0, math.huge, 0)
				AngVel.AngularVelocity = Vector3.new(0, SpinSpeed, 0)
                AngVel.Parent = Root
			else
				DestroyAngleVel()
			end
		end,
		Function2 = function()
			SpinSpeedSlider.Visible = true
		end,
	})

    SpinSpeedSlider = CreateSlider({
        Text = "Speed",
        Min = 0,
        Default = 10,
        Max = 100,
        Function = function(Val)
            SpinSpeed = Val
            UpdateAngleVel()
        end,
        Function2 = function(Val)
            SpinSpeed = Val
            UpdateAngleVel()
        end,
    })
end

TeleportToPosition = Movement:CreateTextbox({
	ButtonText = "TP To Pos",
	PlaceholderText = "X, Y, Z",
	Info = "Teleports You To The Specified Position",
	Function = function(Args)
		local Char = GetChar(Plr)
		local Root = GetRootPart(Char)
		local Position = string.split(Args.Text, ",")
		if Char and Root and Position[1] and Position[2] and Position[3] and tonumber(Position[1]) and tonumber(Position[2]) and tonumber(Position[3]) then
			local Pos =  Vector3.new(tonumber(Position[1]), tonumber(Position[2]), tonumber(Position[3]))
			if TeleportTweenTime == 0 then
				Root.CFrame = CFrame.new(Pos)
			else
				local Tween = TweenService:Create(Root, TweenInfo.new(TeleportTweenTime, Enum.EasingStyle.Linear), {CFrame = CFrame.new(Pos)})
				Tween:Play()
			end
			Notify({
				Text = "Teleported To Position: " .. tostring(Pos),
			})
		end
	end,
	Function2 = function()
		TeleportTweenTimeSlider.Visible = true
	end,
})

TeleportTweenTimeSlider = CreateSlider({
    Text = "Teleport Tween Time",
    Min = 0,
    Default = 0,
    Max = 10,
    Function = function(Val)
        TeleportTweenTime = Val
    end,
    Function2 = function(Val)
        TeleportTweenTime = Val
    end,
})

TeleportTool = Movement:CreateButton({
	Text = "Teleport Tool",
	Info = "Gives You A Tool That Teleports Your Character To Your Mouse When Activated",
	Function = function()
		local Backpack = Plr:FindFirstChildWhichIsA("Backpack")
        if not Backpack then return end
		local Tool = Instance.new("Tool")
        Tool.Name = "Teleport Tool"
        Tool.RequiresHandle = false
        Tool.CanBeDropped = false
        Tool.Parent = Backpack
        Tool.Activated:Connect(function()
            local Char = GetChar(Plr)
            local Root = GetRootPart(Char)
            if not (Char or Root) then return end
            Root.CFrame = CFrame.new(Mouse.Hit.Position + Vector3.new(0, 2, 0))
        end)
	end,
})

ToggleStareAt = Movement:CreateToggle({
	Text = "Stare At",
	Info = "Stares At The Specified Player",
	Function = function(Args)
		StareAt = not StareAt
		ModuleToggled(ToggleStareAt, "Stare At", StareAt, Args.NoNotify)
		if StareAt then
			Connections.Movement.StareAtLoop = RunService.RenderStepped:Connect(function()
				local PlayerChar = GetChar(PlayerToStareAt)
				local PlayerRoot = GetRoot(PlayerChar)
				local Char = GetChar(Plr)
				local Root = GetRoot(Char)
				if not (Char or Root or PlayerChar or PlayerRoot) then return end
				Root.CFrame = LookTowards(Root.Position, PlayerRoot.Position)
			end)
		else
			if Connections.Movement.StareAtLoop then
				Connections.Movement.StareAtLoop:Disconnect()
				Connections.Movement.StareAtLoop = nil
			end
		end
	end,
	Function2 = function()
		PickPlayerToStareAtDropdown.MainFrame.Visible = true
	end,
})

PickPlayerToStareAtDropdown = CreateDropdown({
    Text = "Player To Stare At",
    Default = "nil",
})
PickPlayerToStareAtDropdown.OpenBtn.MouseButton1Click:Connect(function()
    for i, v in pairs(PickPlayerToStareAtDropdown.DropdownScrollingFrame:GetChildren()) do 
        if not v:IsA("UIGridLayout") then
            v:Destroy()
        end
    end
    for i, Player in pairs(Players:GetPlayers()) do
        PickPlayerToStareAtDropdown.AddButton({Text = Player.Name}, function()
            PlayerToStareAt = Player.Name
        end)
    end
end)

TeleportToRandomPlayer = Movement:CreateButton({
	Text = "Tp To Random Player",
	MouseButton1Click = function()
		local Char = GetChar(Plr)
		local Root = GetRoot(Char)

		if not (Char and Root) then return end

		local Player = nil
		local PlayerChar = nil
		local PlayerRoot = nil
		repeat
			Player = Players:GetPlayers()[math.random(1, #Players:GetPlayers())]
			PlayerChar = GetChar(Player)
			PlayerRoot = GetRoot(PlayerChar)
			task.wait()
		until (Player and PlayerChar and PlayerRoot) or #Players:GetPlayers() <= 1
		
		Root.CFrame = PlayerRoot.CFrame
	end,
})

ToggleHeadSit = Movement:CreateTextbox({
	ButtonText = "Head Sit",
	PlaceholderText = "Player Name",
	Info = "Sits On The Specified Players Head (Jump To Turn Off)",
	EnabledIndicator = true,
	MouseButton1Click = function(Args)
		HeadSit = not HeadSit
		ModuleToggled(ToggleHeadSit, "Head Sit", HeadSit, Args.NoNotify)
		if HeadSit then
			local Player = FindPlayer(Args.Text)
			local PlayerChar = GetChar(Player)
			local PlayerRoot = GetRoot(PlayerChar)
			local Char = GetChar(Plr)
			local Root = GetRoot(Char)
			local Humanoid = GetHumanoid(Char)

			if not (Player and PlayerChar and PlayerRoot and Char and Root and Humanoid) then return end

			Humanoid.Sit = true

			task.spawn(function()
				while HeadSit and Player and PlayerChar and PlayerRoot and Char and Root and Humanoid and Humanoid.Sit and not StopScript do
					RunService.Stepped:Wait()
					Root.AssemblyLinearVelocity = Vector3.new(0, 0, 0)
					Root.CFrame = PlayerRoot.CFrame:ToWorldSpace(CFrame.new(0, 1.6, 0.4))
                    RunService.Heartbeat:Wait()
                    Root.AssemblyLinearVelocity = Vector3.new(0, 0, 0)
					Root.CFrame = PlayerRoot.CFrame:ToWorldSpace(CFrame.new(0, 1.6, 0.4))
				end
                if Humanoid then
                    Humanoid.Sit = false
                end
			end)
		end
	end,
})

do
	local Anim = nil
	local LoadedAnim = nil

	ToggleCarpet = Movement:CreateTextbox({
		ButtonText = "Carpet",
		PlaceholderText = "Player Name",
		Info = "You Become Someones Carpet",
		EnabledIndicator = true,
		MouseButton1Click = function(Args)
			Carpet = not Carpet
			ModuleToggled(ToggleCarpet, "Carpet", Carpet, Args.NoNotify)
			if Carpet then
				local Player = FindPlayer(Args.Text)
				local PlayerChar = GetChar(Player)
				local PlayerRoot = GetRoot(PlayerChar)
				local Char = GetChar(Plr)
				local Root = GetRoot(Char)
				local Humanoid = GetHumanoid(Char)
				if not (Char and Root and Humanoid and PlayerChar and PlayerRoot) then return end
				Anim = Instance.new("Animation")
				Anim.AnimationId = "rbxassetid://282574440"
				LoadedAnim = Humanoid:LoadAnimation(Anim)
                LoadedAnim.Priority = Enum.AnimationPriority.Action4
				LoadedAnim:Play(0.1, 1, 1)
				Connections.Movement.CarpetLoop = RunService.Heartbeat:Connect(function()
					Root.CFrame = PlayerRoot.CFrame
				end)
			else
				if Anim then
					Anim = nil
				end
				if LoadedAnim then
					LoadedAnim:Stop()
					LoadedAnim = nil
				end
				if Connections.Movement.CarpetLoop then
					Connections.Movement.CarpetLoop:Disconnect()
				end
			end
		end,
	})
end

------------------------------------------------------------------------------------------------------------------------------------- Custom Games

IsSkywars = game.GameId == 3258873704
IsChickNCoop = game.GameId == 6911629372
IsStairClimbingSimulator = game.GameId == 632417465
IsFleeTheFacility = game.GameId == 372226183
IsStrongmanSimulator = game.GameId == 2564505263
IsDeadByRoblox = game.GameId == 5135096867
IsOutNIn = game.GameId == 7012121531
IsViolenceDistrict = game.GameId == 6739698191

if IsSkywars then -- Skywars
    SkywarsCategory = CreateCategory({
        Name = "Skywars",
        Size = UDim2.fromScale(1, 0.5),
        Pos = UDim2.fromScale(0.77, 0),
        ClosedPos = UDim2.fromScale(0.45, 1),
    })
	KillESP = false
	LevelESP = false
	WinsESP = false
	WinStreakESP = false
	HelmetESP = false
	ChestplateESP = false
	LeggingESP = false
	RankESP = false
	TitleESP = false
	KillAura = false
	AutoLoot = false
	EggNuker = false
	AutoBuyWeapons = false
	AutoBuyItems = false
	AutoQueue = false
	PlaySwordAnimationDuringKillAura = false
	SilentAimbot = false
	AutoWin = false
	AutoConsume = false
	SpawnKill = false

	AmountOfChestsToLoot = 5
	SwordAnimationPlayRate = 0.1

	local ItemsToBuy = {}
	local WeaponsToBuy = {}

	ModeToAutoQueue = "SkyWarsSolo"

	local IsEggWars = game.PlaceId == 8951451142
	local IsSkywars = game.PlaceId == 8542275097 or game.PlaceId == 8592115909
    local IsBridgeDuels = game.PlaceId == 13246639586

	TeleportToGoal = SkywarsCategory:CreateButton({
		Text = "Teleport To Goal",
		Info = 'Instantly Teleports You To Your Opponents Goal In Bridge Duels Or Uses "FireTouchInterest" If Your Exploit Supports It',
		Function = function()
            local Success, Portals = pcall(function()
                return workspace.BlockContainer.Map.Portals
            end)
			if Success then
				local Char = GetChar(Plr)
				local Root = GetRoot(Char)
				if not (Char and Root) then return end
				for i, Part in ipairs(Portals:GetChildren()) do
					if not Part:IsA("BasePart") then continue end
					if FireTouchInterest() then
						FireTouchInterest(Part, Root, true)
						task.wait()
						FireTouchInterest(Part, Root, false)
					else
						Root.CFrame = Part.CFrame
					end
					task.wait(0.05)
				end
			else
				Notify({
					Text = "Failed To Find Goals",
					Duartion = 2,
				})
			end
		end,
	})

	ToggleKillESP = SkywarsCategory:CreateToggle({
		Text = "Kills ESP",
		Info = "Shows Players Kills",
		Function = function(Args)
			KillESP = not KillESP
			ModuleToggled(ToggleKillESP, "Kill ESP", KillESP, Args.NoNotify)
		end,
	})

	ToggleWinESP = SkywarsCategory:CreateToggle({
		Text = "Wins ESP",
		Info = "Shows Players Wins",
		Function = function(Args)
			WinsESP = not WinsESP
			ModuleToggled(ToggleWinESP, "Win ESP", WinsESP, Args.NoNotify)
		end,
	})

	ToggleWinStreakESP = SkywarsCategory:CreateToggle({
		Text = "Win Streak ESP",
		Info = "Shows Players Winstreak",
		Function = function(Args)
			WinStreakESP = not WinStreakESP
			ModuleToggled(ToggleWinStreakESP, "Win Streak ESP", WinStreakESP, Args.NoNotify)
		end,
	})

	ToggleLevelESP = SkywarsCategory:CreateToggle({
		Text = "Level ESP",
		Info = "Shows Players Level",
		Function = function(Args)
			LevelESP = not LevelESP
			ModuleToggled(ToggleLevelESP, "Level ESP", LevelESP, Args.NoNotify)
		end,
	})

	ToggleRankESP = SkywarsCategory:CreateToggle({
		Text = "Rank ESP",
		Info = "Shows Players Rank",
		Function = function(Args)
			RankESP = not RankESP
			ModuleToggled(ToggleRankESP, "Rank ESP", RankESP, Args.NoNotify)
		end,
	})

	ToggleTitleESP = SkywarsCategory:CreateToggle({
		Text = "Title ESP",
		Info = "Shows Players Title",
		Function = function(Args)
			TitleESP = not TitleESP
			ModuleToggled(ToggleTitleESP, "Title ESP", TitleESP, Args.NoNotify)
		end,
	})

	ToggleHelmetESP = SkywarsCategory:CreateToggle({
		Text = "Helmet ESP",
		Info = "Shows Players Helmet",
		Function = function(Args)
			HelmetESP = not HelmetESP
			ModuleToggled(ToggleHelmetESP, "Helmet ESP", HelmetESP, Args.NoNotify)
		end,
	})

	ToggleChestplateESP = SkywarsCategory:CreateToggle({
		Text = "Chestplate ESP",
		Info = "Shows Players Chestplate",
		Function = function(Args)
			ChestplateESP = not ChestplateESP
			ModuleToggled(ToggleChestplateESP, "Chestplate ESP", ChestplateESP, Args.NoNotify)
		end,
	})

	ToggleLeggingsESP = SkywarsCategory:CreateToggle({
		Text = "Helemt ESP",
		Info = "Shows Players Leggings",
		Function = function(Args)
			LeggingESP = not LeggingESP
			ModuleToggled(ToggleLeggingsESP, "Leggings ESP", LeggingESP, Args.NoNotify)
		end,
	})

	local function GetRemoteFolder()
		for i, v in pairs(ReplicatedStorage:GetChildren()) do
			if #GetChildrenOfClass(v, "RemoteEvent") > 5 then
				return v
			end
		end
	end

	local RemoteFolder = GetRemoteFolder()

	local EquipRemote = RemoteFolder:FindFirstChild("8dd94a0e-0dd9-409c-8847-de1054173265") or RemoteFolder:FindFirstChild("5002e4bf-6aeb-4897-8103-b9be6d3a3e54")
	local AttackRemote = RemoteFolder:FindFirstChild("0f825f49-002e-4b7b-8d8c-24dbb3494845") or RemoteFolder:FindFirstChild("93b2718b-2b2a-4859-b36e-fd4614c7f0c9")
	local OpenChestRemote = RemoteFolder:FindFirstChild("1b702374-6e55-4aa2-a7fa-4531cb9af1df") or IsEggWars
	local CloseChestRemote = RemoteFolder:FindFirstChild("9d37e94c-2ed5-4889-8451-678bc8ad00ea") or IsEggWars
	local LootChestRemote = RemoteFolder:FindFirstChild("41b07193-ec28-449b-8542-fff50405a58e") or IsEggWars
	local MineEggRemote = RemoteFolder:FindFirstChild("39860ba3-e6f8-42ab-bfc2-49a7fcc8aa23") or IsSkywars
	local SwordMineEggRemote = RemoteFolder:FindFirstChild("f32c9bc1-cb4b-4616-96ac-bddaefd35e92") or IsSkywars
	local BlackSmithWeaponRemote = RemoteFolder:FindFirstChild("97c8fa11-dd8b-479e-ac76-ee2d8b654971") or IsSkywars
	local BlackSmithItemRemote = RemoteFolder:FindFirstChild("11788c3d-970c-4db8-a442-8a6f6e823b72") or IsSkywars
	local MerchantRemote = RemoteFolder:FindFirstChild("2fc3b306-ea1f-4b39-95ce-a7b0298a2d7f") or IsSkywars
	local QueueRemote = RemoteFolder:FindFirstChild("75e73d87-08a4-4086-bf6a-4be26d0af348") or RemoteFolder:FindFirstChild("f77d9402-9920-4322-8846-d72e6dd27c51")
	local ProjectileRemote = RemoteFolder:FindFirstChild("443626f4-a246-470c-b6da-b3c7feaa187f") or RemoteFolder:FindFirstChild("6775cddb-fefc-4342-976d-7cbf66bd0196")
	
	local Swords = {
		[1] = "BronzeSword",
		[2] = "IronSword",
		[3] = "GoldSword",
		[4] = "DiamondSword",
		[5] = "OnyxSword",
	}
	
	local SwingAnimation = Instance.new("Animation")
	SwingAnimation.AnimationId = "rbxassetid://8542350607"
	local LoadedAnimation = nil
	
	ToggleKillAura = SkywarsCategory:CreateToggle({
		Text = "Kill Aura",
		Info = "Automatically Attacks The Closest Player",
		Function = function(Args)
			if not AttackRemote then return end
			KillAura = not KillAura
			ModuleToggled(ToggleKillAura, "Kill Aura", KillAura, Args.NoNotify)
			if KillAura then
				local AnimLastRan = tick()
				Connections.Skywars.KillAuraLoop = RunService.Heartbeat:Connect(function()
					local Player = GetClosestPlayer()
					local PlayerChar = GetChar(Player)
					local PlayerRoot = GetRoot(PlayerChar)
					local Char = GetChar(Plr)
					local Root = GetRoot(Char)
					if Player and Player:GetAttribute("TeamId") ~= Plr:GetAttribute("TeamId") and PlayerChar and PlayerRoot and Char and Root and (Root.Position - PlayerRoot.Position).Magnitude < 20 then
						for i, Sword in ipairs(Swords) do
							EquipRemote:FireServer(Sword) -- Equipping Sword
						end
						AttackRemote:FireServer(Player) -- Attacking The Player
						if LoadedAnimation and tick() - AnimLastRan > SwordAnimationPlayRate then
							LoadedAnimation:Play()
							AnimLastRan = tick()
						end
					end
				end)
			else
				if Connections.Skywars.KillAuraLoop then
					Connections.Skywars.KillAuraLoop:Disconnect()
					Connections.Skywars.KillAuraLoop = nil
				end
			end
		end,
		Function2 = function()
			ToggleSwordAnimationDuringKillAura.MainFrame.Visible = true
			SwordAnimationPlayRateSlider.Visible = true
		end,
	})

    ToggleSwordAnimationDuringKillAura = CreateToggle({
        Text = "Sword Animation",
        Info = "Determines Whether Kill Aura Will Play The Sword Animation Or Not",
        Function = function()
            PlaySwordAnimationDuringKillAura = not PlaySwordAnimationDuringKillAura
            ToggleButtonColor(ToggleSwordAnimationDuringKillAura, PlaySwordAnimationDuringKillAura)
            if PlaySwordAnimationDuringKillAura then
                local Char = GetChar(Plr)
                local Humanoid = GetHumanoid(Char)
                local Animator = nil
                if not (Char and Humanoid) then return end
                Animator = Humanoid:FindFirstChildWhichIsA("Animator", true) or Humanoid
                if Animator then
                    LoadedAnimation = Animator:LoadAnimation(SwingAnimation)
                    LoadedAnimation.Priority = Enum.AnimationPriority.Action4
                else
                    Notify({
                        Text = "Failed To Load Animation",
                    })
                end
            else
                LoadedAnimation = nil
            end
        end,
    })
    
    SwordAnimationPlayRateSlider = CreateSlider({
        Text = "Animation Play Rate",
        Min = 0,
        Default = 0.1,
        Max = 1,
        Function = function(Val)
            SwordAnimationPlayRate = Val
        end,
        Function2 = function(Val)
            SwordAnimationPlayRate = Val
        end,
    })
	
	local Items = {
		-- Onyx Loot
		[1] = "OnyxSword",
		[2] = "OnyxChestplate",
		[3] = "OnyxLeggings",
		[4] = "OnyxHelmet",
		-- Diamond Loot
		[5] = "DiamondSword",
		[6] = "DiamondChestplate",
		[7] = "DiamondLeggings",
		[8] = "DiamondHelmet",
		-- Gold Loot
		[9] = "GoldSword",
		[10] = "GoldChestplate",
		[11] = "GoldLeggings",
		[12] = "GoldHelmet",
		-- Iron Loot
		[13] = "IronSword",
		[14] = "IronChestplate",
		[15] = "IronLeggings",
		[16] = "IronHelmet",
		-- Bronze Loot
		[17] = "BronzeSword",
		[18] = "BronzeChestplate",
		[19] = "BronzeLeggings",
		[20] = "BronzeHelmet",
		-- Other Loot
		[21] = "Bow",
		[22] = "Arrow",
		[23] = "Capybara",
		[24] = "Teleporter",
		[25] = "TeamConcrete",
		[26] = "Shield",
		[27] = "SpeedBoost",
		[28] = "JumpBoost",
		-- Pickaxes
		[29] = "OnyxPickaxe",
		[30] = "DiamondPickaxe",
		[31] = "GoldPickaxe",
		[32] = "IronPickaxe",
		[33] = "BronzePickaxe",
	}
	
	function GetClosestChest()
		local Success, ChestFolder = pcall(function()
            return workspace.BlockContainer.Map.Chests
        end)
		if not Success then return end
		local Char = GetChar(Plr)
		local Root = GetRoot(Char)
		if not (Char and Root) then return end
		local ClosestChest = nil
		local ClosestChestDistance = 100000
		for i, Chest in pairs(ChestFolder:GetChildren()) do
			if not Chest:IsA("Model") then continue end
			if not Chest.PrimaryPart then continue end
			
			local Mag = (Root.Position - Chest.PrimaryPart.Position).Magnitude
			
			if Mag < ClosestChestDistance then
				ClosestChest = Chest
				ClosestChestDistance = Mag
			end
		end
		return ClosestChest, ClosestChestDistance
	end
	
	ToggleAutoLoot = SkywarsCategory:CreateToggle({
		Text = "Auto Loot",
		Info = "Automatically Loots For You (Wont Work If The Remotes Have Been Updated)",
		Function = function(Args)
			AutoLoot = not AutoLoot
			ModuleToggled(ToggleAutoLoot, "Auto Loot", AutoLoot, Args.NoNotify)
			if not AutoLoot or not (OpenChestRemote and LootChestRemote and CloseChestRemote) or IsEggWars then return end
			task.spawn(function()
				while AutoLoot do
					local Chest, Mag = GetClosestChest()
					
					local Char = GetChar(Plr)
					local Root = GetRoot(Char)
					
					if not (Char and Root and Chest) or Mag > 12 then RunService.Heartbeat:Wait() continue end
					
					RunService.Heartbeat:Wait()
					OpenChestRemote:FireServer(Chest) -- Opening The Chest
					
					for i, Item in ipairs(Items) do
						LootChestRemote:FireServer(Chest, Item, -1) -- Looting The Chest
						RunService.RenderStepped:Wait()
					end
					
					RunService.Stepped:Wait()
					CloseChestRemote:FireServer(Chest) -- Closing The Chest
				end
			end)
		end,
	})
	
	local Pickaxes = {
		[1] = "BronzePickaxe",
		[2] = "IronPickaxe",
		[3] = "GoldPickaxe",
		[4] = "DiamondPickaxe",
		[5] = "OnyxPickaxe",
	}
	
	ToggleEggNuker = SkywarsCategory:CreateToggle({
		Text = "Egg Nuker",
		Info = "Automatically Mines Eggs (Wont Work If The Remotes Have Been Updated)",
		Function = function(Args)
			EggNuker = not EggNuker
			ModuleToggled(ToggleEggNuker, "Egg Nuker", EggNuker, Args.NoNotify)
			if not (EquipRemote and MineEggRemote) or IsSkywars then return end
			if EggNuker then
				Connections.Skywars.EggNukerLoop = RunService.Heartbeat:Connect(function()
					if not workspace:FindFirstChild("Eggs") then return end
					
					local Char = GetChar(Plr)
					local Root = GetRoot(Char)
					
					if not (Char and Root) then return end
					
					for i, Egg in pairs(workspace.Eggs:GetChildren()) do
						if Egg.PrimaryPart and (Egg.PrimaryPart.Position - Root.Position).Magnitude < 20 and Egg:GetAttribute("TeamId") ~= Plr:GetAttribute("TeamId") and Egg:GetAttribute("Health") > 0 then
							for i2, Pickaxe in ipairs(Pickaxes) do
								EquipRemote:FireServer(Pickaxe) -- Equipping The Pickaxe
							end
							MineEggRemote:FireServer(Egg.PrimaryPart.Position + Vector3.new(0, 1.5, 0)) -- Attacking The Egg
						end
					end
				end)
			else
				if Connections.Skywars.EggNukerLoop then
					Connections.Skywars.EggNukerLoop:Disconnect()
					Connections.Skywars.EggNukerLoop = nil
				end
			end
		end,
	})
	
	ToggleAutoQueue = SkywarsCategory:CreateToggle({
		Text = "Auto Queue",
		Info = "Automatically Queues You For The Specified Game Mode",
		Function = function(Args)
			AutoQueue = not AutoQueue
			ModuleToggled(ToggleAutoQueue, "Auto Queue", AutoQueue, Args.NoNotify)
		end,
		Function2 = function()
			GameModeDropdown.MainFrame.Visible = true
		end,
	})

    GameModeDropdown = CreateDropdown({
        Text = "Mode To Auto Queue",
        Default = "SkyWarsSolo",
    })
    
    GameModeDropdown:CreateButton({
        Text = "SkyWarsSolo",
        Function = function()
            ModeToAutoQueue = "SkyWarsSolo"
        end,
    })
    
    GameModeDropdown:CreateButton({
        Text = "SkyWarsDuos",
        Function = function()
            ModeToAutoQueue = "SkyWarsDuos"
        end,
    })
    
    GameModeDropdown:CreateButton({
        Text = "EggWarsQuads",
        Function = function()
            ModeToAutoQueue = "EggWarsQuads"
        end,
    })
    
    GameModeDropdown:CreateButton({
        Text = "DuelsSolo",
        Function = function()
            ModeToAutoQueue = "DuelsSolo"
        end,
    })
	
	local QueueCheck = false
	
	Plr:FindFirstChildWhichIsA("PlayerGui").ChildAdded:Connect(function(Child)
		if QueueCheck then return end
		if Child.Name == "Lobby" and Child:IsA("ScreenGui") and AutoQueue and QueueRemote then
			QueueCheck = true
			QueueRemote:FireServer(true, ModeToAutoQueue)
		end
	end)
	
	ToggleAutoBuyWeapons = SkywarsCategory:CreateToggle({
		Text = "Auto Buy Weapons",
		Info = "Automatially Upgrades Your Armor And Weapons",
		Function = function(Args)
			AutoBuyWeapons = not AutoBuyWeapons
			ModuleToggled(ToggleAutoBuyWeapons, "Auto Buy Weapons", AutoBuyWeapons, Args.NoNotify)
			if not BlackSmithWeaponRemote or not AutoBuyWeapons then return end
			task.spawn(function()
				while AutoBuyWeapons do
					for i, Weapon in pairs(WeaponsToBuy) do
						BlackSmithWeaponRemote:FireServer("Blacksmith", Weapon)
						task.wait()
					end
					task.wait()
				end
			end)
		end,
		Function2 = function()
			WeaponsDropdown.MainFrame.Visible = true
		end,
	})

    WeaponsDropdown = CreateDropdown({
        Text = "Add Weapon",
        Default = "nil",
    })
    
    WeaponsDropdown:CreateButton({
        Text = "Sword",
        On = function()
            if not table.find(WeaponsToBuy, 0) then
                table.insert(WeaponsToBuy, 0)
            end
        end,
        Off = function()
            if table.find(WeaponsToBuy, 0) then
                table.remove(WeaponsToBuy, table.find(WeaponsToBuy, 0))
            end
        end,
    })
    
    WeaponsDropdown:CreateButton({
        Text = "Armor",
        On = function()
            if not table.find(WeaponsToBuy, 1) then
                table.insert(WeaponsToBuy, 1)
            end
        end,
        Off = function()
            if table.find(WeaponsToBuy, 1) then
                table.remove(WeaponsToBuy, table.find(WeaponsToBuy, 1))
            end
        end,
    })
    
    WeaponsDropdown:CreateButton({
        Text = "Pickaxe",
        On = function()
            if not table.find(WeaponsToBuy, 2) then
                table.insert(WeaponsToBuy, 2)
            end
        end,
        Off = function()
            if table.find(WeaponsToBuy, 2) then
                table.remove(WeaponsToBuy, table.find(WeaponsToBuy, 2))
            end
        end,
    })
	
	ToggleAutoBuyItems = SkywarsCategory:CreateToggle({
		Text = "Auto Buy Items",
		Info = "Automatically Buys Items",
		Function = function(Args)
			AutoBuyItems = not AutoBuyItems
			ModuleToggled(ToggleAutoBuyItems, "Auto Buy Items", AutoBuyItems, Args.NoNotify)
			if not BlackSmithItemRemote or not AutoBuyItems then return end
			task.spawn(function()
				while AutoBuyItems do
					for i, Item in pairs(ItemsToBuy) do
						BlackSmithItemRemote:FireServer("Blacksmith", Item)
						task.wait()
					end
				end
			end)
		end,
		Function2 = function()
			ItemsDropdown.MainFrame.Visible = true
		end,
	})

    ItemsDropdown = CreateDropdown({
        Text = "Add Item",
        Default = "nil"
    })
    
    ItemsDropdown:CreateButton({
        Text = "Concrete",
        On = function()
            if not table.find(ItemsToBuy, 0) then
                table.insert(ItemsToBuy, 0)
            end
        end,
        Off = function()
            if table.find(ItemsToBuy, 0) then
                table.remove(ItemsToBuy, table.find(ItemsToBuy, 0))
            end
        end,
    })
    
    ItemsDropdown:CreateButton({
        Text = "Wood",
        On = function()
            if not table.find(ItemsToBuy, 1) then
                table.insert(ItemsToBuy, 1)
            end
        end,
        Off = function()
            if table.find(ItemsToBuy, 1) then
                table.remove(ItemsToBuy, table.find(ItemsToBuy, 1))
            end
        end,
    })
    
    ItemsDropdown:CreateButton({
        Text = "Stone Bricks",
        On = function()
            if not table.find(ItemsToBuy, 2) then
                table.insert(ItemsToBuy, 2)
            end
        end,
        Off = function()
            if table.find(ItemsToBuy, 2) then
                table.remove(ItemsToBuy, table.find(ItemsToBuy, 2))
            end
        end,
    })
    
    ItemsDropdown:CreateButton({
        Text = "Aquamarine Bricks?? idk",
        On = function()
            if not table.find(ItemsToBuy, 3) then
                table.insert(ItemsToBuy, 3)
            end
        end,
        Off = function()
            if table.find(ItemsToBuy, 3) then
                table.remove(ItemsToBuy, table.find(ItemsToBuy, 3))
            end
        end,
    })
    
    ItemsDropdown:CreateButton({
        Text = "Silver Bricks",
        On = function()
            if not table.find(ItemsToBuy, 4) then
                table.insert(ItemsToBuy, 4)
            end
        end,
        Off = function()
            if table.find(ItemsToBuy, 4) then
                table.remove(ItemsToBuy, table.find(ItemsToBuy, 4))
            end
        end,
    })
    
    ItemsDropdown:CreateButton({
        Text = "Snow Ball",
        On = function()
            if not table.find(ItemsToBuy, 5) then
                table.insert(ItemsToBuy, 5)
            end
        end,
        Off = function()
            if table.find(ItemsToBuy, 5) then
                table.remove(ItemsToBuy, table.find(ItemsToBuy, 5))
            end
        end,
    })
    
    ItemsDropdown:CreateButton({
        Text = "Bow",
        On = function()
            if not table.find(ItemsToBuy, 6) then
                table.insert(ItemsToBuy, 6)
            end
        end,
        Off = function()
            if table.find(ItemsToBuy, 6) then
                table.remove(ItemsToBuy, table.find(ItemsToBuy, 6))
            end
        end,
    })
    
    ItemsDropdown:CreateButton({
        Text = "Arrow",
        On = function()
            if not table.find(ItemsToBuy, 7) then
                table.insert(ItemsToBuy, 7)
            end
        end,
        Off = function()
            if table.find(ItemsToBuy, 7) then
                table.remove(ItemsToBuy, table.find(ItemsToBuy, 7))
            end
        end,
    })
    
    ItemsDropdown:CreateButton({
        Text = "Teleporter (idk why they named it that)",
        On = function()
            if not table.find(ItemsToBuy, 8) then
                table.insert(ItemsToBuy, 8)
            end
        end,
        Off = function()
            if table.find(ItemsToBuy, 8) then
                table.remove(ItemsToBuy, table.find(ItemsToBuy, 8))
            end
        end,
    })
    
    ItemsDropdown:CreateButton({
        Text = "Dynamite",
        On = function()
            if not table.find(ItemsToBuy, 9) then
                table.insert(ItemsToBuy, 9)
            end
        end,
        Off = function()
            if table.find(ItemsToBuy, 9) then
                table.remove(ItemsToBuy, table.find(ItemsToBuy, 9))
            end
        end,
    })
    
    ItemsDropdown:CreateButton({
        Text = "Syringe",
        On = function()
            if not table.find(ItemsToBuy, 10) then
                table.insert(ItemsToBuy, 10)
            end
        end,
        Off = function()
            if table.find(ItemsToBuy, 10) then
                table.remove(ItemsToBuy, table.find(ItemsToBuy, 10))
            end
        end,
    })
    
    ItemsDropdown:CreateButton({
        Text = "Land Mine",
        On = function()
            if not table.find(ItemsToBuy, 11) then
                table.insert(ItemsToBuy, 11)
            end
        end,
        Off = function()
            if table.find(ItemsToBuy, 11) then
                table.remove(ItemsToBuy, table.find(ItemsToBuy, 11))
            end
        end,
    })
    
    ItemsDropdown:CreateButton({
        Text = "Some Like Pulse Thing Idk",
        On = function()
            if not table.find(ItemsToBuy, 12) then
                table.insert(ItemsToBuy, 12)
            end
        end,
        Off = function()
            if table.find(ItemsToBuy, 12) then
                table.remove(ItemsToBuy, table.find(ItemsToBuy, 12))
            end
        end,
    })
    
    ItemsDropdown:CreateButton({
        Text = "A Fishing Rod?? idk",
        On = function()
            if not table.find(ItemsToBuy, 13) then
                table.insert(ItemsToBuy, 13)
            end
        end,
        Off = function()
            if table.find(ItemsToBuy, 13) then
                table.remove(ItemsToBuy, table.find(ItemsToBuy, 13))
            end
        end,
    })
	
	ToggleSilentAimbot = SkywarsCategory:CreateToggle({
		Text = "Silent Aimbot",
		Info = "It Shoot Bow For You :D",
		Function = function(Args)
			SilentAimbot = not SilentAimbot
			ModuleToggled(ToggleSilentAimbot, "Silent Aimbot", SilentAimbot, Args.NoNotify)
			if not (EquipRemote and ProjectileRemote) or not SilentAimbot then return end
			task.spawn(function()
				local Params = RaycastParams.new()
				Params.FilterType = Enum.RaycastFilterType.Exclude
				while SilentAimbot do
					local Player = GetClosestPlayer()
					local PlayerChar = GetChar(Player)
					local PlayerRoot = GetRoot(PlayerChar)
					local Char = GetChar(Plr)
					local Root = GetRoot(Char)
					
					if not (Player and PlayerChar and PlayerRoot and Char and Root) or (Root.Position - PlayerRoot.Position).Magnitude > 75 then RunService.Heartbeat:Wait() continue end
					
					Params.FilterDescendantsInstances = GetAllCharacters()
					local Raycast = workspace:Raycast(Root.Position, (PlayerRoot.Position - Root.Position).Unit * 1000, Params)
					if Raycast and Raycast.Instance and Raycast.Instance.CanCollide then RunService.Heartbeat:Wait() continue end
					
					EquipRemote:FireServer("Bow")
					
					local Direction = (PlayerRoot.Position - Root.Position).Unit
					ProjectileRemote:FireServer(Direction, 1)
					
					task.wait(0.3)
				end
			end)
		end,
	})

    local GameInProgress = false
    local SkywarsSignal = Signal.new()
    
    task.spawn(function()
        local Connection; Connection = workspace:WaitForChild("BlockContainer"):WaitForChild("Map"):WaitForChild("SpawnLocations").ChildAdded:Connect(function(Child)
            if #Child:GetChildren() > 0 then
                GameInProgress = false
                SkywarsSignal:Fire({
                    Event = "GameEnded",
                })
                Connection:Disconnect()
                Connection = nil
            end
        end)

        local Connection; Connection = workspace.BlockContainer.Map.SpawnLocations.ChildRemoving:Connect(function(Child)
            if #Child:GetChildren() <= 0 then
                GameInProgress = true
                SkywarsSignal:Fire({
                    Event = "GameStarted",
                })
                Connection:Disconnect()
                Connection = nil
            end
        end)
    end)
	
	ToggleAutoWin = SkywarsCategory:CreateToggle({
		Text = "Auto Win",
		Info = "It Win For You (:",
		MouseButton1Click = function(Args)
			AutoWin = not AutoWin
			ModuleToggled(ToggleAutoWin, "Auto Win", AutoWin, Args.NoNotify)
			if AutoWin then
				if SpawnKill then
					SpawnKill:Toggle({NoNotify = true})
				end
				if not KillAura then
					ToggleKillAura:Toggle({NoNotify = true})
				end
				if not SilentAimbot then
					ToggleSilentAimbot:Toggle({NoNotify = true})
				end
				task.spawn(function()
                    while true do
                        local Args = SkywarsSignal:Wait()
                        if Args.Event == "GameStarted" then
                            break
                        end
                    end
					if not AutoWin then return end
					local Char = GetChar(Plr)
					local Root = GetRoot(Char)
					local Found = 0
                    local Success, Chests = pcall(function()
                        return workspace.BlockContainer.Map.Chests
                    end)
                    local Success, Eggs = pcall(function()
                        return workspace.Eggs
                    end)
					if IsSkywars and Chests then
						if not AutoLoot then
							ToggleAutoLoot:Toggle({NoNotify = true})
						end
						for i, Chest in ipairs(Chests:GetChildren()) do
							if Chest:IsA("Model") and Chest.PrimaryPart and Chest.Name == "ChestTierFour" and Root then
								Root.CFrame = Chest.PrimaryPart.CFrame
								Found += 1
								task.wait(0.5)
								if Found >= AmountOfChestsToLoot then break end
							end
						end
					elseif IsEggWars and Success then
						if not EggNuker then
							ToggleEggNuker:Toggle({NoNotify = true})
						end
						for i, Egg in pairs(Eggs:GetChildren()) do
							if not Egg:IsA("Model") then continue end
							if not Egg.PrimaryPart then continue end
							if Egg:GetAttribute("TeamId") == Plr:GetAttribute("TeamId") then continue end
							local On = true
							task.delay(3, function()
								On = false
							end)
							while On and AutoWin do
                                if not (Char and Root) then RunService.Heartbeat:Wait() Char = GetChar(Plr) Root = GetRoot(Char) continue end
								RunService.Stepped:Wait()
								Root.CFrame = Egg.PrimaryPart.CFrame:ToWorldSpace(CFrame.new(0, -10, 0))
								Root.Velocity = Vector3.new(0, 0, 0)
                                RunService.Heartbeat:Wait()
                                Root.CFrame = Egg.PrimaryPart.CFrame:ToWorldSpace(CFrame.new(0, -10, 0))
								Root.Velocity = Vector3.new(0, 0, 0)
							end
						end
                    elseif IsBridgeDuels and AutoWin then
                        while GameInProgress do
                            local Success, SpawnLocations = pcall(function()
                                return workspace.BlockContainer.Map.SpawnLocations
                            end)
                            if not (Success and SpawnLocations) then task.wait() continue end
                            for i, SpawnLocation in ipairs(SpawnLocations:GetChildren()) do
                                if #SpawnLocation:GetChildren() == 0 then
                                    TeleportToGoal:Toggle({NoNotify = true})
                                    task.wait(0.1)
                                    break
                                end
                            end
                            task.wait()
                        end
                        return
					end
					if not AutoWin then return end
                    local AllPlayers = Players:GetPlayers()
                    if table.find(AllPlayers, Plr) then
                        table.remove(AllPlayers, table.find(AllPlayers, Plr))
                    end
                    local Target = 1
                    local Offset = Vector3.new(0, 0, 0)
                    local Params = RaycastParams.new()
                    Params.FilterType = Enum.RaycastFilterType.Exclude
                    Connections.Skywars.AutoWinLoop = RunService.Stepped:Connect(function()
                        AllPlayers = Players:GetPlayers()
                        if table.find(AllPlayers, Plr) then
                            table.remove(AllPlayers, table.find(AllPlayers, Plr))
                        end
                        if #AllPlayers == 0 then return end
                        if AllPlayers[Target] and not AllPlayers[Target]:GetAttribute("Alive") or AllPlayers[Target] and AllPlayers[Target]:GetAttribute("TeamId") == Plr:GetAttribute("TeamId") then Target += 1 end
                        if Target > #AllPlayers then Target = 1 end
                        local PlayerChar = GetChar(AllPlayers[Target])
                        local PlayerRoot = GetRoot(PlayerChar)
                        Char = GetChar(Plr)
                        Root = GetRoot(Char)
                        if not (Char and Root and PlayerChar and PlayerRoot) then return end
                        Root.Velocity = Vector3.new(0, 0, 0)
                        Params.FilterDescendantsInstances = GetAllCharacters()
                        local Raycast = workspace:Raycast(PlayerRoot.Position, PlayerRoot.Position + Vector3.new(0, -1000, 0), Params)
                        if not Raycast then Target += 1 return end
                        if Plr:GetAttribute("Health") < 25 then
                            Offset = Vector3.new(0, 250, 0)
                        else
                            Offset = Vector3.new(0, 0, 0)
                        end
                        Root.CFrame = PlayerRoot.CFrame:ToWorldSpace(CFrame.new(0, 3, 6)) + Offset
                        RunService.Heartbeat:Wait()

                        --- Heartbeat ---

                        local Raycast = workspace:Raycast(PlayerRoot.Position, PlayerRoot.Position + Vector3.new(0, -1000, 0), Params)
                        if not Raycast then Target += 1 return end
                        if Plr:GetAttribute("Health") < 25 then
                            Offset = Vector3.new(0, 250, 0)
                        else
                            Offset = Vector3.new(0, 0, 0)
                        end
                        Root.CFrame = PlayerRoot.CFrame:ToWorldSpace(CFrame.new(0, 3, 6)) + Offset
                    end)
				end)
			else
				if Connections.Skywars.AutoWinLoop then
					Connections.Skywars.AutoWinLoop:Disconnect()
					Connections.Skywars.AutoWinLoop = nil
				end
			end
		end,
		MouseButton2Click = function()
			AmountOfChestsToLootSlider.Visible = true
		end,
	})

    AmountOfChestsToLootSlider = CreateSlider({
        Text = "Amount Of Chests To Loot",
        Min = 1,
        Default = 5,
        Max = 25,
        Function = function(Val)
            AmountOfChestsToLoot = Val
        end,
        Function2 = function(Val)
            AmountOfChestsToLoot = Val
        end,
    })

	ToggleSpawnKill = SkywarsCategory:CreateToggle({
		Text = "Spawn Kill",
		MouseButton1Click = function(Args)
			SpawnKill = not SpawnKill
			ModuleToggled(ToggleSpawnKill, "Spawn Kill", SpawnKill, Args.NoNotify)
			if SpawnKill then
				if AutoWin then
					ToggleAutoWin:Toggle({NoNotify = true})
				end
				if not KillAura then
					ToggleKillAura:Toggle({NoNotify = true})
				end
				if not SilentAimbot then
					ToggleSilentAimbot:Toggle({NoNotify = true})
				end
				task.spawn(function()
					while true do
                        local Args = SkywarsSignal:Wait()
                        if Args.Event == "GameStarted" then
                            break
                        end
                    end
					if not SpawnKill then return end
					local Target = 1
					local Offset = Vector3.new(0, 0, 0)
					local Params = RaycastParams.new()
					Params.FilterType = Enum.RaycastFilterType.Exclude
					Connections.Skywars.SpawnKillLoop = RunService.Stepped:Connect(function()
						local AllPlayers = Players:GetPlayers()
						if table.find(AllPlayers, Plr) then
							table.remove(AllPlayers, table.find(AllPlayers, Plr))
						end
						if AllPlayers[Target] and not AllPlayers[Target]:GetAttribute("Alive") or AllPlayers[Target] and AllPlayers[Target]:GetAttribute("TeamId") == Plr:GetAttribute("TeamId") then Target += 1 end
						if Target > #AllPlayers then Target = 1 end
						local PlayerChar = GetChar(AllPlayers[Target])
						local PlayerRoot = GetRoot(PlayerChar)
						local Char = GetChar(Plr)
						local Root = GetRoot(Char)
						if not (Char and Root and PlayerChar and PlayerRoot) then return end
						Root.Velocity = Vector3.new(0, 0, 0)
						Params.FilterDescendantsInstances = GetAllCharacters()
						local Raycast = workspace:Raycast(PlayerRoot.Position, (PlayerRoot.Position + Vector3.new(0, -1000, 0)), Params)
						if not Raycast then Target += 1 return end
                        if Plr:GetAttribute("Health") < 25 then
							Offset = Vector3.new(0, 250, 0)
						else
							Offset = Vector3.new(0, 0, 0)
						end
						Root.CFrame = PlayerRoot.CFrame:ToWorldSpace(CFrame.new(0, 3, 6)) + Offset
                        RunService.Heartbeat:Wait()

                        --- Heartbeat ---
                        
                        local Raycast = workspace:Raycast(PlayerRoot.Position, (PlayerRoot.Position + Vector3.new(0, -1000, 0)), Params)
						if not Raycast then Target += 1 return end
                        if Plr:GetAttribute("Health") < 25 then
							Offset = Vector3.new(0, 250, 0)
						else
							Offset = Vector3.new(0, 0, 0)
						end
						Root.CFrame = PlayerRoot.CFrame:ToWorldSpace(CFrame.new(0, 3, 6)) + Offset
					end)
				end)
			else
				if Connections.Skywars.SpawnKillLoop then
					Connections.Skywars.SpawnKillLoop:Disconnect()
					Connections.Skywars.SpawnKillLoop = nil
				end
			end
		end,
	})
	
	CollectAllGenerators = SkywarsCategory:CreateButton({
		Text = "Collect All Gens",
		MouseButton1Click = function()
			local Char = GetChar(Plr)
			local Root = GetRoot(Char)
            local Success, Generators = pcall(function()
                return workspace.BlockContainer.Generators
            end)
			
			if not (Char and Root and Success) then return end
			
			local PrevPos = Root.CFrame
			
			for i, Gen in pairs(Generators:GetChildren()) do
				if not Gen:IsA("Model") then continue end
				if not Gen.PrimaryPart then continue end
				Root.CFrame = Gen.PrimaryPart.CFrame:ToWorldSpace(CFrame.new(0, -5, 0))
				task.wait(0.1)
			end
			RunService.Heartbeat:Wait()
			Root.CFrame = PrevPos
		end,
	})

	if not (EquipRemote and AttackRemote and OpenChestRemote and CloseChestRemote and LootChestRemote and MineEggRemote and SwordMineEggRemote and BlackSmithWeaponRemote and BlackSmithItemRemote and MerchantRemote and QueueRemote and ProjectileRemote) then
		Notify({
			Text = "<font color = 'rgb(255, 0, 0)'>Error</font> Loading Skywars Modules: Remotes Have Been Changed ):",
			Duration = 5,
		})
	else
		Notify({
			Text = "<font color = 'rgb(0, 255, 0)'>Successfully</font> Loaded Skywars Modules Have Fun (:"
		})
	end
elseif IsChickNCoop or IsOutNIn then -- Chick-n-Coop And Out-n-In
    local GameName = "nil"
    if IsChickNCoop then
        GameName = "Chick-n-Coop"
    elseif IsOutNIn then
        GameName = "Out-n-In"
    end
    ChickNCoopCategory = CreateCategory({
        Name = GameName,
        Size = UDim2.fromScale(1, 0.5),
        Pos = UDim2.fromScale(0.77, 0),
        ClosedPos = UDim2.fromScale(0.45, 1),
    })
	local ExcludeSelf = false

	local function RemotesChanged()
        local Success, Result = pcall(function()
            return ReplicatedStorage.VehicleSpawnerSystemReplicatedStorage.Events.SpawnVehicle.Vehicles.Category1["Honda Civic (Mobile Car)"].Vehicle["Honda Civic (Mobile Car)"]
        end)
		return not Success
	end

	KillPlayerTextbox = ChickNCoopCategory:CreateTextbox({
		ButtonText = "Kill",
		PlaceholderText = "Player Name",
		Function = function(Args)
			if RemotesChanged() then return end
            local Player = FindPlayer(Args.Text)
			if Player then
				if ExcludeSelf and FindPlayer(Args.Text) == Plr then return end
				ReplicatedStorage.VehicleSpawnerSystemReplicatedStorage.Events.SpawnVehicle:FireServer(Player.Character, ReplicatedStorage.VehicleSpawnerSystemReplicatedStorage.Vehicles.Category1["Honda Civic (Mobile Car)"].Vehicle["Honda Civic (Mobile Car)"])
			end
		end,
	})

	KillServer = ChickNCoopCategory:CreateButton({
		Text = "Kill Server",
		Info = "It Kill All Players In Server",
		Function = function()
			if RemotesChanged() then return end
			for i, Player in pairs(Players:GetPlayers()) do
				if ExcludeSelf and Player == Plr then continue end
				ReplicatedStorage.VehicleSpawnerSystemReplicatedStorage.Events.SpawnVehicle:FireServer(Player.Character, ReplicatedStorage.VehicleSpawnerSystemReplicatedStorage.Vehicles.Category1["Honda Civic (Mobile Car)"].Vehicle["Honda Civic (Mobile Car)"])
			end
		end,
        MouseButton2Click = function()
            ToggleExcludeSelf.MainFrame.Visible = true
        end,
	})

	ToggleExcludeSelf = CreateToggle({
		Text = "Exclude Self",
		Info = "Excludes You From Getting Killed",
		Function = function()
			ExcludeSelf = not ExcludeSelf
			ToggleButtonColor(ToggleExcludeSelf, ExcludeSelf)
		end,
	})

	ChickNCoopLagServer = ChickNCoopCategory:CreateButton({
		Text = "Lag Server",
		Info = "Kinda Make Server Laggy",
		Function = function()
			if RemotesChanged() then return end
			for i, v in pairs(workspace:GetDescendants()) do
				if v:IsA("BasePart") or v:IsA("Model") then
				    ReplicatedStorage.VehicleSpawnerSystemReplicatedStorage.Events.SpawnVehicle:FireServer(v, ReplicatedStorage.VehicleSpawnerSystemReplicatedStorage.Vehicles.Category1["Honda Civic (Mobile Car)"].Vehicle["Honda Civic (Mobile Car)"])
				end
			end
		end,
	})

	if RemotesChanged() then
		Notify({
			Text = "<font color = 'rgb(255, 0, 0)'>Error</font> Loading " .. GameName .. " Modules: Remotes Have Been Changed ):",
			Duration = 5,
		})
	else
		Notify({
			Text = "<font color = 'rgb(0, 255, 0)'>Successfully</font> Loaded " .. GameName .. " Modules Have Fun (:"
		})
	end
elseif IsStairClimbingSimulator then -- Stair Climbing Simulator
    StairClimbingSimulatorCategory = CreateCategory({
        Name = "Stair Climbing Simulator",
        Size = UDim2.fromScale(1, 0.5),
        Pos = UDim2.fromScale(0.77, 0),
        ClosedPos = UDim2.fromScale(0.45, 1),
    })
	AutoRebirth = false

	Connections.StairClimbingSimulator = {}

    local function TpToEnd()
        local Char = GetChar(Plr)
        local Root = GetRoot(Char)

        if not (Char and Root) then return end

        local Goal = {CFrame = CFrame.new(0, 15100, 40026)}
        local Info = TweenInfo.new(0.9, Enum.EasingStyle.Linear, Enum.EasingDirection.Out)
        local Tween = TweenService:Create(Root, Info, Goal)
        Tween:Play()
        Tween.Completed:Wait()
        RunService.Stepped:Wait()
        if Root then
            Root.AssemblyLinearVelocity = Vector3.new(0, 0, 0)
        end
        RunService.Heartbeat:Wait()
        if Root then
            Root.AssemblyLinearVelocity = Vector3.new(0, 0, 0)
        end
    end

	local TeleportToEnd
	TeleportToEnd = StairClimbingSimulatorCategory:CreateButton({
		Text = "Teleport To End",
		MouseButton1Click = function()
			TpToEnd()
		end,
	})
	local Rebirth
	Rebirth = StairClimbingSimulatorCategory:CreateButton({
		Text = "Rebirth",
		MouseButton1Click = function()
			TpToEnd()
            task.wait(0.2)

			local RebirthRemote = ReplicatedStorage:FindFirstChild("TurtleEvent")

			if RebirthRemote then
				RebirthRemote:FireServer()
			end
		end,
	})
    
	ToggleAutoRebirth = StairClimbingSimulatorCategory:CreateToggle({
		Text = "Auto Rebirth",
		MouseButton1Click = function(Args)
			AutoRebirth = not AutoRebirth
			ModuleToggled(ToggleAutoRebirth, "Auto Rebirth", AutoRebirth, Args.NoNotify)
			task.spawn(function()
				if not AutoRebirth then return end
				while AutoRebirth and not StopScript do
					TpToEnd()
                    task.wait(0.2)

					local RebirthRemote = ReplicatedStorage:FindFirstChild("TurtleEvent")

					if RebirthRemote then
						RebirthRemote:FireServer()
					end

					task.wait(0.2)
				end
			end)
		end,
	})

	Notify({
		Text = "<font color = 'rgb(0, 255, 0)'>Successfully</font> Loaded Stair Climbing Simulator Modules Have Fun (:"
	})
elseif IsFleeTheFacility then -- Flee The Facility
    FleeTheFacilityCategory = CreateCategory({
        Name = "Flee The Facility",
        Size = UDim2.fromScale(1, 0.5),
        Pos = UDim2.fromScale(0.77, 0),
        ClosedPos = UDim2.fromScale(0.45, 1),
    })
	Connections.FleeTheFacility = {}
	ComputerESP = false
	VentESP = false
	FreezePodESP = false
	ExitESP = false
	WindowESP = false
	DoorESP = false
	LockerESP = false
	SpawnESP = false
	DoorTriggerESP = false
	ExitTriggerESP = false
	FreezePodTriggerESP = false
	ComputerTriggerESP = false
	
	ComputerEspOutlineTransparency = 0
	ComputerEspFillTransparency = 0.5
	VentEspOutlineTransparency = 0
	VentEspFillTransparency = 0.5
	FreezePodEspOutlineTransparency = 0
	FreezePodEspFillTransparency = 0.5
	ExitEspOutlineTransparency = 0
	ExitEspFillTransparency = 0.5
	WindowEspOutlineTransparency = 0
	WindowEspFillTransparency = 0.5
	DoorEspOutlineTransparency = 0
	DoorEspFillTransparency = 0.5
	LockerEspOutlineTransparency = 0
	LockerEspFillTransparency = 0.5
	SpawnEspOutlineTransparency = 0
	SpawnEspFillTransparency = 0.5
	DoorTriggerEspTransparency = 0.5
	ExitTriggerEspTransparency = 0.5
	FreezePodTriggerEspTransparency = 0.5
	ComputerTriggerEspTransparency = 0.5

	VentEspOutlineColor = Color3.fromRGB(52, 54, 66)
	VentEspFillColor = Color3.fromRGB(52, 54, 66)
	FreezePodEspOutlineColor = Color3.fromRGB(0, 255, 255)
	FreezePodEspFillColor = Color3.fromRGB(0, 255, 255)
	ExitEspOutlineColor = Color3.fromRGB(255, 255, 0)
	ExitEspFillColor = Color3.fromRGB(255, 255, 0)
	WindowEspOutlineColor = Color3.fromRGB(85, 255, 255)
	WindowEspFillColor = Color3.fromRGB(85, 255, 255)
	DoorEspOutlineColor = Color3.fromRGB(167, 109, 70)
	DoorEspFillColor = Color3.fromRGB(167, 109, 70)
	LockerEspOutlineColor = Color3.fromRGB(52, 54, 66)
	LockerEspFillColor = Color3.fromRGB(52, 54, 66)
	SpawnEspOutlineColor = Color3.fromRGB(0, 85, 255)
	SpawnEspFillColor = Color3.fromRGB(0, 85, 255)

	local function GetMap()
		for i, Map in pairs(workspace:GetChildren()) do
			if Map:FindFirstChild("Thumbnail") or Map:FindFirstChild("_LightingSettings") or Map:FindFirstChild("Barriers") then
				return Map
			end
		end
		return nil
	end

	local function IsMap(Map)
		if Map:FindFirstChild("Thumbnail") or Map:FindFirstChild("_LightingSettings") or Map:FindFirstChild("Barriers") then
			return true
		else
			return false
		end
	end

	local function UpdateComputerEspTransparency()
		for i, v in ipairs(EspFolder:GetChildren()) do
			if string.find(v.Name, "FleeTheFacility_ComputerESP_") and v:IsA("Highlight") then
				v.OutlineTransparency = ComputerEspOutlineTransparency
				v.FillTransparency = ComputerEspFillTransparency
			end
		end
	end

	local function EspAllComputers(Map)
		if not Map then return end
		for i, Computer in pairs(Map:GetChildren()) do
			if Computer.Name == "ComputerTable" and Computer:FindFirstChild("MainComputerScript") then
                local Screen = Computer:FindFirstChild("Screen")
                if not Screen then return end
				local Highlight = Instance.new("Highlight")
                Highlight.OutlineColor = Screen.Color
				Highlight.FillColor = Highlight.OutlineColor
                Highlight.OutlineTransparency = ComputerEspOutlineTransparency
				Highlight.FillTransparency = ComputerEspFillTransparency
				Highlight.Adornee = Computer
				Highlight.Name = "FleeTheFacility_ComputerESP_" .. tostring(i)
                Highlight.Parent = EspFolder
				Connections.FleeTheFacility["ComputerESPLoop_" .. tostring(i)] = Screen:GetPropertyChangedSignal("Color"):Connect(function()
                    Highlight.OutlineColor = Screen.Color
					Highlight.FillColor = Highlight.OutlineColor
					Highlight.OutlineTransparency = ComputerEspOutlineTransparency
				    Highlight.FillTransparency = ComputerEspFillTransparency
				end)
			end
		end
	end
	
	local ComputerEspOutlineTransparencySlider
	local ComputerEspFillTransparencySlider
	local ComputerTriggerEspTransparencySlider
	ToggleComputerESP = FleeTheFacilityCategory:CreateToggle({
		Text = "Computer ESP",
		Info = "Creates Outlines Around Computers",
		MouseButton1Click = function(Args)
			ComputerESP = not ComputerESP
			ModuleToggled(ToggleComputerESP, "Computer ESP", ComputerESP, Args.NoNotify)
			if ComputerESP then
				local Map = GetMap()
				EspAllComputers(Map)

				Connections.FleeTheFacility.ComputerEspWorkspaceChildAddedConnection = workspace.ChildAdded:Connect(function(Child)
                    if IsMap(Child) then
                        EspAllComputers(Child)
                    end
				end)
			else
				if Connections.FleeTheFacility.ComputerEspWorkspaceChildAddedConnection then
					Connections.FleeTheFacility.ComputerEspWorkspaceChildAddedConnection:Disconnect()
					Connections.FleeTheFacility.ComputerEspWorkspaceChildAddedConnection = nil
				end
				for i, Highlight in pairs(EspFolder:GetChildren()) do
					if string.find(Highlight.Name, "FleeTheFacility_ComputerESP_") then
						Highlight:Destroy()
					end
				end
			end	
		end,
		MouseButton2Click = function()
			ComputerEspOutlineTransparencySlider.Visible = true
			ComputerEspFillTransparencySlider.Visible = true
			ToggleComputerTriggerESP.MainFrame.Visible = true
			ComputerTriggerEspTransparencySlider.Visible = true
		end,
	})

	ComputerEspOutlineTransparencySlider = CreateSlider({
		Text = "Outline Transparency",
        Min = 0,
		Default = 0,
		Max = 1,
		Function = function(Val)
			ComputerEspOutlineTransparency = Val
			UpdateComputerEspTransparency()
		end,
		Function2 = function(Val)
			ComputerEspOutlineTransparency = Val
			UpdateComputerEspTransparency()
		end,
	})

	ComputerEspFillTransparencySlider = CreateSlider({
		Text = "Fill Transparency",
        Min = 0,
		Default = 0.5,
		Max = 1,
		Function = function(Val)
			ComputerEspFillTransparency = Val
			UpdateComputerEspTransparency()
		end,
		Function2 = function(Val)
			ComputerEspFillTransparency = Val
			UpdateComputerEspTransparency()
		end,
	})

	local ShownComputerTriggers = {}
	ToggleComputerTriggerESP = CreateToggle({
		Text = "Trigger ESP",
		MouseButton1Click = function(Args)
			ComputerTriggerESP = not ComputerTriggerESP
			ModuleToggled(ToggleComputerTriggerESP, "Computer Trigger ESP", ComputerTriggerESP, Args.NoNotify)
			if ComputerTriggerESP then
				local Map = GetMap()
				if not Map then return end
				for i, Computer in ipairs(Map:GetChildren()) do
					if Computer.Name == "ComputerTable" then
						for i2, Trigger in ipairs(Computer:GetChildren()) do
							if Trigger:IsA("BasePart") and (Trigger:FindFirstChild("ActionSign") or Trigger:FindFirstChildWhichIsA("BindableEvent")) then
								Trigger.Transparency = ComputerTriggerEspTransparency
								table.insert(ShownComputerTriggers, Trigger)
							end
						end
					end
				end
			else
				for i, v in ipairs(ShownComputerTriggers) do
					v.Transparency = 1
				end
				table.clear(ShownComputerTriggers)
			end
		end,
	})

	local function UpdateComputerTriggerEspTransparency()
		for i, v in ipairs(ShownComputerTriggers) do
			v.Transparency = ComputerTriggerEspTransparency
		end
	end

	ComputerTriggerEspTransparencySlider = CreateSlider({
		Text = "Trigger ESP Transparency",
        Min = 0,
		Default = 0.5,
		Max = 1,
		Function = function(Val)
			ComputerTriggerEspTransparency = Val
			UpdateComputerTriggerEspTransparency()
		end,
		Function2 = function(Val)
			ComputerTriggerEspTransparency = Val
			UpdateComputerTriggerEspTransparency()
		end,
	})

	local function EspAllVents(Map)
		if not Map then return end
		for i, v in ipairs(Map:GetChildren()) do
            if v.Name == "AirVent" or v.Name == "Museum Vent" then
                local Highlight = Instance.new("Highlight")
                Highlight.OutlineColor = VentEspOutlineColor
                Highlight.FillColor = VentEspFillColor
                Highlight.OutlineTransparency = VentEspOutlineTransparency
                Highlight.FillTransparency = VentEspFillTransparency
                Highlight.Adornee = v
                Highlight.Name = "FleeTheFacility_VentESP_" .. tostring(i)
                Highlight.Parent = EspFolder
            end
		end
	end

	local function UpdateVentEspTransparency()
		for i, v in ipairs(EspFolder:GetChildren()) do
			if string.find(v.Name, "FleeTheFacility_VentESP_") and v:IsA("Highlight") then
				v.OutlineTransparency = VentEspOutlineTransparency
				v.FillTransparency = VentEspFillTransparency
			end
		end
	end

	local function UpdateVentEspColor()
		for i, v in ipairs(EspFolder:GetChildren()) do
			if string.find(v.Name, "FleeTheFacility_VentESP_") and v:IsA("Highlight") then
				v.OutlineColor = VentEspOutlineColor
				v.FillColor = VentEspFillColor
			end
		end
	end

	local VentEspOutlineColorPicker
	local VentEspFillColorPicker
	local VentEspOutlineTransparencySlider
	local VentEspFillTransparencySlider
	ToggleVentESP = FleeTheFacilityCategory:CreateToggle({
		Text = "Vent ESP",
		MouseButton1Click = function(Args)
			VentESP = not VentESP
			ModuleToggled(ToggleVentESP, "Vent ESP", VentESP, Args.NoNotify)
			if VentESP then
				local Map = GetMap()
				EspAllVents(Map)

				Connections.FleeTheFacility.VentEspWorkspaceChildAddedConnection = workspace.ChildAdded:Connect(function(Child)
					RunService.Heartbeat:Wait()
					if IsMap(Child) then
						EspAllVents(Child)
					end
				end)
			else
				if Connections.FleeTheFacility.VentEspWorkspaceChildAddedConnection then
					Connections.FleeTheFacility.VentEspWorkspaceChildAddedConnection:Disconnect()
					Connections.FleeTheFacility.VentEspWorkspaceChildAddedConnection = nil
				end
				for i, Highlight in pairs(EspFolder:GetChildren()) do
					if string.find(Highlight.Name, "FleeTheFacility_VentESP_") then
						Highlight:Destroy()
					end
				end
			end
		end,
		MouseButton2Click = function()
			VentEspOutlineColorPicker.Visible = true
			VentEspFillColorPicker.Visible = true
			VentEspOutlineTransparencySlider.Visible = true
			VentEspFillTransparencySlider.Visible = true
		end,
	})

	VentEspOutlineColorPicker = CreateColorPicker({
		Text = "Vent ESP Outline Color",
		Default = 0,
		Max = 1,
		Function = function(Color)
			VentEspOutlineColor = Color
			UpdateVentEspColor()
		end,
	})

	VentEspFillColorPicker = CreateColorPicker({
		Text = "Vent ESP Fill Color",
		Default = 0.5,
		Max = 1,
		Function = function(Color)
			VentEspFillColor = Color
			UpdateVentEspColor()
		end,
	})

	VentEspOutlineTransparencySlider = CreateSlider({
		Text = "Vent ESP Outline Transparency",
        Min = 0,
		Default = 0,
		Max = 1,
		Function = function(Val)
			VentEspOutlineTransparency = Val
			UpdateVentEspTransparency()
		end,
		Function2 = function(Val)
			VentEspOutlineTransparency = Val
			UpdateVentEspTransparency()
		end,
	})

	VentEspFillTransparencySlider = CreateSlider({
		Text = "Vent ESP Fill Transparency",
        Min = 0,
		Default = 0.5,
		Max = 1,
		Function = function(Val)
			VentEspFillTransparency = Val
			UpdateVentEspTransparency()
		end,
		Function2 = function(Val)
			VentEspFillTransparency = Val
			UpdateVentEspTransparency()
		end,
	})

	local function EspAllFreezePods(Map)
		if not Map then return end
		for i, v in ipairs(Map:GetChildren()) do
			if not (v:IsA("Model") and v.Name == "FreezePod") then continue end
			local Highlight = Instance.new("Highlight")
			Highlight.OutlineColor = FreezePodEspOutlineColor
			Highlight.FillColor = FreezePodEspFillColor
			Highlight.OutlineTransparency = FreezePodEspOutlineTransparency
			Highlight.FillTransparency = FreezePodEspFillTransparency
			Highlight.Adornee = v
			Highlight.Name = "FleeTheFacility_FreezePodESP_" .. tostring(i)
            Highlight.Parent = EspFolder
		end
	end
	
	local function UpdateFreezePodEspTransparency()
		for i, v in ipairs(EspFolder:GetChildren()) do
			if string.find(v.Name, "FleeTheFacility_FreezePodESP_") and v:IsA("Highlight") then
				v.OutlineTransparency = FreezePodEspOutlineTransparency
				v.FillTransparency = FreezePodEspFillTransparency
			end
		end
	end

	local function UpdateFreezePodEspColor()
		for i, v in ipairs(EspFolder:GetChildren()) do
			if string.find(v.Name, "FleeTheFacility_FreezePodESP_") and v:IsA("Highlight") then
				v.OutlineColor = FreezePodEspOutlineColor
				v.FillColor = FreezePodEspFillColor
			end
		end
	end

	local FreezePodEspOutlineTransparencySlider
	local FreezePodEspFillTransparencySlider
	local FreezePodEspOutlineColorPicker
	local FreezePodEspFillColorPicker
	local FreezePodTriggerEspTransparencySlider
	ToggleFreezePodESP = FleeTheFacilityCategory:CreateToggle({
		Text = "Freeze Pod ESP",
		MouseButton1Click = function(Args)
			FreezePodESP = not FreezePodESP
			ModuleToggled(ToggleFreezePodESP, "Freeze Pod ESP", FreezePodESP, Args.NoNotify)
			if FreezePodESP then
				local Map = GetMap()
				EspAllFreezePods(Map)

				Connections.FleeTheFacility.FreezePodEspWorkspaceChildAddedConnection = workspace.ChildAdded:Connect(function(Child)
					RunService.Heartbeat:Wait()
					if IsMap(Child) then
						EspAllFreezePods(Child)
					end
				end)
			else
				if Connections.FleeTheFacility.FreezePodEspWorkspaceChildAddedConnection then
					Connections.FleeTheFacility.FreezePodEspWorkspaceChildAddedConnection:Disconnect()
					Connections.FleeTheFacility.FreezePodEspWorkspaceChildAddedConnection = nil
				end
				for i, Highlight in pairs(EspFolder:GetChildren()) do
					if string.find(Highlight.Name, "FleeTheFacility_FreezePodESP_") then
						Highlight:Destroy()
					end
				end
			end
		end,
		MouseButton2Click = function()
			FreezePodEspOutlineTransparencySlider.Visible = true
			FreezePodEspFillTransparencySlider.Visible = true
			FreezePodEspOutlineColorPicker.Visible = true
			FreezePodEspFillColorPicker.Visible = true
			ToggleFreezePodTriggerESP.MainFrame.Visible = true
			FreezePodTriggerEspTransparencySlider.Visible = true
		end,
	})

	FreezePodEspOutlineTransparencySlider = CreateSlider({
		Text = "Freeze Pod ESP Outline Transparency",
        Min = 0,
		Default = 0,
		Max = 1,
		Function = function(Val)
			FreezePodEspOutlineTransparency = Val
			UpdateFreezePodEspTransparency()
		end,
		Function2 = function(Val)
			FreezePodEspOutlineTransparency = Val
			UpdateFreezePodEspTransparency()
		end,
	})

	FreezePodEspFillTransparencySlider = CreateSlider({
		Text = "Freeze Pod ESP Fill Transparency",
        Min = 0,
		Default = 0.5,
		Max = 1,
		Function = function(Val)
			FreezePodEspFillTransparency = Val
			UpdateFreezePodEspTransparency()
		end,
		Function2 = function(Val)
			FreezePodEspFillTransparency = Val
			UpdateFreezePodEspTransparency()
		end,
	})

	FreezePodEspOutlineColorPicker = CreateColorPicker({
		Text = "Freeze Pod ESP Outline Color",
		Function = function(Color)
			FreezePodEspOutlineColor = Color
			UpdateFreezePodEspColor()
		end,
	})

	FreezePodEspFillColorPicker = CreateColorPicker({
		Text = "Freeze Pod ESP Fill Color",
		Function = function(Color)
			FreezePodEspFillColor = Color
			UpdateFreezePodEspColor()
		end,
	})

	local ShownFreezePodTriggers = {}
	ToggleFreezePodTriggerESP = CreateToggle({
		Text = "Trigger ESP",
		MouseButton1Click = function(Args)
			FreezePodTriggerESP = not FreezePodTriggerESP
			ModuleToggled(ToggleFreezePodTriggerESP, "Freeze Pod Trigger ESP", FreezePodTriggerESP, Args.NoNotify)
			if FreezePodTriggerESP then
				local Map = GetMap()
				if not Map then return end
				for i, FreezePod in ipairs(Map:GetChildren()) do
					if FreezePod.Name == "FreezePod" then
						for i2, Trigger in ipairs(FreezePod:GetChildren()) do
							if Trigger:IsA("BasePart") and (Trigger:FindFirstChild("ActionSign") or Trigger:FindFirstChildWhichIsA("BindableEvent")) then
								Trigger.Transparency = FreezePodTriggerEspTransparency
								table.insert(ShownFreezePodTriggers, Trigger)
							end
						end
					end
				end
			else
				for i, v in ipairs(ShownFreezePodTriggers) do
					v.Transparency = 1
				end
				table.clear(ShownFreezePodTriggers)
			end
		end,
	})

	local function UpdateFreezePodTriggerEspTransparency()
		for i, v in ipairs(ShownFreezePodTriggers) do
			v.Transparency = FreezePodTriggerEspTransparency
		end
	end
	
	FreezePodTriggerEspTransparencySlider = CreateSlider({
		Text = "Trigger ESP Transparency",
        Min = 0,
		Default = 0.5,
		Max = 1,
		Function = function(Val)
			FreezePodTriggerEspTransparency = Val
			UpdateFreezePodTriggerEspTransparency()
		end,
		Function2 = function(Val)
			FreezePodTriggerEspTransparency = Val
			UpdateFreezePodTriggerEspTransparency()
		end,
	})

	local function EspAllExits(Map)
		if not Map then return end
		for i, v in ipairs(Map:GetChildren()) do
			if not (v:IsA("Model") and v.Name == "ExitDoor") then continue end
			local Highlight = Instance.new("Highlight")
			Highlight.OutlineColor = ExitEspOutlineColor
			Highlight.FillColor = ExitEspFillColor
			Highlight.OutlineTransparency = VentEspOutlineTransparency
			Highlight.FillTransparency = VentEspFillTransparency
			Highlight.Adornee = v
			Highlight.Name = "FleeTheFacility_ExitESP_" .. tostring(i)
            Highlight.Parent = EspFolder
		end
	end

	local function UpdateExitEspTransparency()
		for i, v in ipairs(EspFolder:GetChildren()) do
			if string.find(v.Name, "FleeTheFacility_ExitESP_") and v:IsA("Highlight") then
				v.OutlineTransparency = ExitEspOutlineTransparency
				v.FillTransparency = ExitEspFillTransparency
			end
		end
	end

	local function UpdateExitEspColor()
		for i, v in ipairs(EspFolder:GetChildren()) do
			if string.find(v.Name, "FleeTheFacility_ExitESP_") and v:IsA("Highlight") then
				v.OutlineColor = ExitEspOutlineColor
				v.FillColor = ExitEspFillColor
			end
		end
	end

	local ExitEspOutlineTransparencySlider
	local ExitEspFillTransparencySlider
	local ExitEspOutlineColorPicker
	local ExitEspFillColorPicker
	local ExitTriggerEspTransparencySlider
	ToggleExitESP = FleeTheFacilityCategory:CreateToggle({
		Text = "Exit ESP",
		MouseButton1Click = function(Args)
			ExitESP = not ExitESP
			ModuleToggled(ToggleExitESP, "ExitESP", ExitESP, Args.NoNotify)
			if ExitESP then

				local Map = GetMap()
				EspAllExits(Map)

				Connections.Visuals.FleeTheFacility.ExitEspWorkspaceChildAddedConnection = workspace.ChildAdded:Connect(function(Child)
					RunService.Heartbeat:Wait()
					if IsMap(Child) then
						EspAllExits(Child)
					end
				end)
			else
				if Connections.Visuals.FleeTheFacility.ExitEspWorkspaceChildAddedConnection then
					Connections.Visuals.FleeTheFacility.ExitEspWorkspaceChildAddedConnection:Disconnect()
					Connections.Visuals.FleeTheFacility.ExitEspWorkspaceChildAddedConnection = nil
				end
				for i, Highlight in pairs(EspFolder:GetChildren()) do
					if string.find(Highlight.Name, "FleeTheFacility_ExitESP_") then
						Highlight:Destroy()
					end
				end
			end
		end,
		MouseButton2Click = function()
			ExitEspOutlineTransparencySlider.Visible = true
			ExitEspFillTransparencySlider.Visible = true
			ExitEspOutlineColorPicker.Visible = true
			ExitEspFillColorPicker.Visible = true
			ToggleExitTriggerESP.MainFrame.Visible = true
			ExitTriggerEspTransparencySlider.Visible = true
		end,
	})
	
	ExitEspOutlineTransparencySlider = CreateSlider({
		Text = "Exit ESP Outline Transparency",
        Min = 0,
		Default = 0,
		Max = 1,
		Function = function(Val)
			ExitEspOutlineTransparency = Val
			UpdateExitEspTransparency()
		end,
		Function2 = function(Val)
			ExitEspOutlineTransparency = Val
			UpdateExitEspTransparency()
		end,
	})

	ExitEspFillTransparencySlider = CreateSlider({
		Text = "Exit ESP Fill Transparency",
        Min = 0,
		Default = 0.5,
		Max = 1,
		Function = function(Val)
			ExitEspFillTransparency = Val
			UpdateExitEspTransparency()
		end,
		Function2 = function(Val)
			ExitEspFillTransparency = Val
			UpdateExitEspTransparency()
		end,
	})

	ExitEspOutlineColorPicker = CreateColorPicker({
		Text = "Exit ESP Outline Color",
		Function = function(Color)
			ExitEspOutlineColor = Color
			UpdateExitEspColor()
		end,
	})

	ExitEspFillColorPicker = CreateColorPicker({
		Text = "Exit ESP Fill Color",
		Function = function(Color)
			ExitEspFillColor = Color
			UpdateExitEspColor()
		end,
	})

	local ShownExitTriggers = {}
	ToggleExitTriggerESP = CreateToggle({
		Text = "Trigger ESP",
		MouseButton1Click = function(Args)
			ExitTriggerESP = not ExitTriggerESP
			ModuleToggled(ToggleExitTriggerESP, "Exit Trigger ESP", ExitTriggerESP, Args.NoNotify)
			if ExitTriggerESP then
				local Map = GetMap()
				if not Map then return end
				for i, Exit in ipairs(Map:GetChildren()) do
					if Exit.Name == "ExitDoor" then
						for i2, Trigger in ipairs(Exit:GetChildren()) do
							if Trigger:IsA("BasePart") and (Trigger:FindFirstChild("ActionSign") or Trigger:FindFirstChildWhichIsA("BindableEvent")) then
								Trigger.Transparency = ExitTriggerEspTransparency
								table.insert(ShownExitTriggers, Trigger)
							end
						end
					end
				end
			else
				for i, v in ipairs(ShownExitTriggers) do
					v.Transparency = 1
				end
				table.clear(ShownExitTriggers)
			end
		end,
	})

	local function UpdateExitTriggerEspTransparency()
		for i, v in ipairs(ShownExitTriggers) do
			v.Transparency = ExitTriggerEspTransparency
		end
	end

	ExitTriggerEspTransparencySlider = CreateSlider({
		Text = "Trigger ESP Transparency",
        Min = 0,
		Default = 0.5,
		Max = 1,
		Function = function(Val)
			ExitTriggerEspTransparency = Val
			UpdateExitTriggerEspTransparency()
		end,
		Function2 = function(Val)
			ExitTriggerEspTransparency = Val
			UpdateExitTriggerEspTransparency()
		end,
	})

	local function EspAllWindows(Map)
		if not Map then return end
		for i, v in ipairs(Map:GetChildren()) do
			if not (v:IsA("Model") and v.Name == "Window") then continue end
			local Highlight = Instance.new("Highlight")
			Highlight.OutlineColor = WindowEspOutlineColor
			Highlight.FillColor = WindowEspFillColor
			Highlight.OutlineTransparency = WindowEspOutlineTransparency
			Highlight.FillTransparency = WindowEspFillTransparency
			Highlight.Adornee = v
			Highlight.Name = "FleeTheFacility_WindowESP_" .. tostring(i)
            Highlight.Parent = EspFolder
		end
	end

	local function UpdateWindowEspTransparency()
		for i, v in ipairs(EspFolder:GetChildren()) do
			if string.find(v.Name, "FleeTheFacility_WindowESP_") and v:IsA("Highlight") then
				v.OutlineTransparency = WindowEspOutlineTransparency
				v.FillTransparency = WindowEspFillTransparency
			end
		end
	end

	local function UpdateWindowEspColor()
		for i, v in ipairs(EspFolder:GetChildren()) do
			if string.find(v.Name, "FleeTheFacility_WindowESP_") and v:IsA("Highlight") then
				v.OutlineColor = WindowEspOutlineColor
				v.FillColor = WindowEspFillColor
			end
		end
	end

	local WindowEspOutlineTransparencySlider
	local WindowEspFillTransparencySlider
	local WindowEspOutlineColorPicker
	local WindowEspFillColorPicker
	ToggleWindowESP = FleeTheFacilityCategory:CreateToggle({
		Text = "Window ESP",
		MouseButton1Click = function(Args)
			WindowESP = not WindowESP
			ModuleToggled(ToggleWindowESP, "Window ESP", WindowESP, Args.NoNotify)
			if WindowESP then
				local Map = GetMap()
				EspAllWindows(Map)
				
				Connections.Visuals.FleeTheFacility.WindowEspWorkspaceChildAddedConnection = workspace.ChildAdded:Connect(function(Child)
					RunService.Heartbeat:Wait()
					if IsMap(Child) then
						EspAllWindows(Child)
					end
				end)
			else
				if Connections.Visuals.FleeTheFacility.WindowEspWorkspaceChildAddedConnection then
					Connections.Visuals.FleeTheFacility.WindowEspWorkspaceChildAddedConnection:Disconnect()
					Connections.Visuals.FleeTheFacility.WindowEspWorkspaceChildAddedConnection = nil
				end
				for i, Highlight in pairs(EspFolder:GetChildren()) do
					if string.find(Highlight.Name, "FleeTheFacility_WindowESP_") then
						Highlight:Destroy()
					end
				end
			end
		end,
		MouseButton2Click = function()
			WindowEspOutlineTransparencySlider.Visible = true
			WindowEspFillTransparencySlider.Visible = true
			WindowEspOutlineColorPicker.Visible = true
			WindowEspFillColorPicker.Visible = true
		end,
	})

	WindowEspOutlineTransparencySlider = CreateSlider({
		Text = "Window ESP Outline Transparency",
        Min = 0,
		Default = 0,
		Max = 1,
		Function = function(Val)
			WindowEspOutlineTransparency = Val
			UpdateWindowEspTransparency()
		end,
		Function2 = function(Val)
			WindowEspOutlineTransparency = Val
			UpdateWindowEspTransparency()
		end,
	})

	WindowEspFillTransparencySlider = CreateSlider({
		Text = "Window ESP Fill Transparency",
        Min = 0,
		Default = 0.5,
		Max = 1,
		Function = function(Val)
			WindowEspFillTransparency = Val
			UpdateWindowEspTransparency()
		end,
		Function2 = function(Val)
			WindowEspFillTransparency = Val
			UpdateWindowEspTransparency()
		end,
	})

	WindowEspOutlineColorPicker = CreateColorPicker({
		Text = "Window ESP Outline Color",
		Function = function(Color)
			WindowEspOutlineColor = Color
		end,
	})

	WindowEspFillColorPicker = CreateColorPicker({
		Text = "Window ESP Fill Color",
		Function = function(Color)
			WindowEspFillColor = Color
		end,
	})

	local function EspAllDoors(Map)
		if not Map then return end
		for i, v in ipairs(Map:GetChildren()) do
			if not (v:IsA("Model") and v.Name == "SingleDoor" or v.Name == "DoubleDoor") then continue end
			local Highlight = Instance.new("Highlight")
			Highlight.OutlineColor = DoorEspOutlineColor
			Highlight.FillColor = DoorEspFillColor
			Highlight.OutlineTransparency = DoorEspOutlineTransparency
			Highlight.FillTransparency = DoorEspFillTransparency
			Highlight.Adornee = v
			Highlight.Name = "FleeTheFacility_DoorESP_" .. tostring(i)
            Highlight.Parent = EspFolder
		end
	end
	
	local function UpdateDoorEspTransparency()
		for i, v in ipairs(EspFolder:GetChildren()) do
			if string.find(v.Name, "FleeTheFacility_DoorESP_") and v:IsA("Highlight") then
				v.OutlineTransparency = DoorEspOutlineTransparency
				v.FillTransparency = DoorEspFillTransparency
			end
		end
	end

	local function UpdateDoorEspColor()
		for i, v in ipairs(EspFolder:GetChildren()) do
			if string.find(v.Name, "FleeTheFacility_DoorESP_") and v:IsA("Highlight") then
				v.OutlineColor = DoorEspOutlineColor
				v.FillColor = DoorEspFillColor
			end
		end
	end

	local DoorEspOutlineTransparencySlider
	local DoorEspFillTransparencySlider
	local DoorEspOutlineColorPicker
	local DoorEspFillColorPicker
	local DoorTriggerEspTransparencySlider
	ToggleDoorESP = FleeTheFacilityCategory:CreateToggle({
		Text = "Door ESP",
		MouseButton1Click = function(Args)
			DoorESP = not DoorESP
			ModuleToggled(ToggleDoorESP, "Door ESP", DoorESP, Args.NoNotify)
			if DoorESP then
				local Map = GetMap()
				EspAllDoors(Map)

				Connections.Visuals.FleeTheFacility.DoorEspWorkspaceChildAddedConnection = workspace.ChildAdded:Connect(function(Child)
					RunService.Heartbeat:Wait()
					if IsMap(Child) then
						EspAllDoors(Child)
					end
				end)
			else
				if Connections.Visuals.FleeTheFacility.DoorEspWorkspaceChildAddedConnection then
					Connections.Visuals.FleeTheFacility.DoorEspWorkspaceChildAddedConnection:Disconnect()
					Connections.Visuals.FleeTheFacility.DoorEspWorkspaceChildAddedConnection = nil
				end
				for i, Highlight in pairs(EspFolder:GetChildren()) do
					if string.find(Highlight.Name, "FleeTheFacility_DoorESP_") then
						Highlight:Destroy()
					end
				end
			end
		end,
		MouseButton2Click = function()
			DoorEspOutlineTransparencySlider.Visible = true
			DoorEspFillTransparencySlider.Visible = true
			DoorEspOutlineColorPicker.Visible = true
			DoorEspFillColorPicker.Visible = true
			ToggleDoorTriggerESP.MainFrame.Visible = true
			DoorTriggerEspTransparencySlider.Visible = true
		end,
	})

	DoorEspOutlineTransparencySlider = CreateSlider({
		Text = "Door ESP Outline Transparency",
        Min = 0,
		Default = 0,
		Max = 1,
		Function = function(Val)
			DoorEspOutlineTransparency = Val
			UpdateDoorEspTransparency()
		end,
		Function2 = function(Val)
			DoorEspOutlineTransparency = Val
			UpdateDoorEspTransparency()
		end,
	})

	DoorEspFillTransparencySlider = CreateSlider({
		Text = "Door ESP Fill Transparency",
        Min = 0,
		Default = 0.5,
		Max = 1,
		Function = function(Val)
			DoorEspFillTransparency = Val
			UpdateDoorEspTransparency()
		end,
		Function2 = function(Val)
			DoorEspFillTransparency = Val
			UpdateDoorEspTransparency()
		end,
	})

	DoorEspOutlineColorPicker = CreateColorPicker({
		Text = "Door ESP Outline Color",
		Function = function(Color)
			DoorEspOutlineColor = Color
			UpdateDoorEspColor()
		end,
	})

	DoorEspFillColorPicker = CreateColorPicker({
		Text = "Door ESP Fill Color",
		Function = function(Color)
			DoorEspFillColor = Color
			UpdateDoorEspColor()
		end,
	})

	local ShownDoorTriggers = {}
	ToggleDoorTriggerESP = CreateToggle({
		Text = "Door Trigger ESP",
		MouseButton1Click = function(Args)
			DoorTriggerESP = not DoorTriggerESP
			ModuleToggled(ToggleDoorTriggerESP, "Door Trigger ESP", DoorTriggerESP, Args.NoNotify)
			if DoorTriggerESP then
				local Map = GetMap()
				if not Map then return end
				for i, Door in ipairs(Map:GetChildren()) do
					if Door.Name == "SingleDoor" or Door.Name == "DoubleDoor" then
						for i2, Trigger in ipairs(Door:GetChildren()) do
							if Trigger:IsA("BasePart") and (Trigger:FindFirstChild("ActionSign") or Trigger:FindFirstChildWhichIsA("BindableEvent")) then
								Trigger.Transparency = DoorTriggerEspTransparency
								table.insert(ShownDoorTriggers, Trigger)
							end
						end
					end
				end
			else
				for i, v in ipairs(ShownDoorTriggers) do
					v.Transparency = 1
				end
				table.clear(ShownDoorTriggers)
			end
		end,
	})

	local function UpdateDoorTriggerEspTransparency()
		for i, v in ipairs(ShownDoorTriggers) do
			v.Transparency = DoorTriggerEspTransparency
		end
	end

	DoorTriggerEspTransparencySlider = CreateSlider({
		Text = "Door Trigger ESP Transparency",
        Min = 0,
		Default = 0.5,
		Max = 1,
		Function = function(Val)
			DoorTriggerEspTransparency = Val
			UpdateDoorTriggerEspTransparency()
		end,
		Function2 = function(Val)
			DoorTriggerEspTransparency = Val
			UpdateDoorTriggerEspTransparency()
		end,
	})

	local function EspAllLockers(Map)
		if not Map then return end
		for i, v in ipairs(Map:GetChildren()) do
			if not (v:IsA("Model") and v.Name == "HidingCloset") then continue end
			local Highlight = Instance.new("Highlight")
			Highlight.OutlineColor = DoorEspOutlineColor
			Highlight.FillColor = DoorEspFillColor
			Highlight.OutlineTransparency = DoorEspOutlineTransparency
			Highlight.FillTransparency = DoorEspFillTransparency
			Highlight.Adornee = v
			Highlight.Name = "FleeTheFacility_LockerESP_" .. tostring(i)
            Highlight.Parent = EspFolder
		end
	end

	local function UpdateLockerEspTransparency()
		for i, v in ipairs(EspFolder:GetChildren()) do
			if string.find(v.Name, "FleeTheFacility_LockerESP_") and v:IsA("Highlight") then
				v.OutlineTransparency = LockerEspOutlineTransparency
				v.FillTransparency = LockerEspFillTransparency
			end
		end
	end

	local function UpdateLockerEspColor()
		for i, v in ipairs(EspFolder:GetChildren()) do
			if string.find(v.Name, "FleeTheFacility_LockerESP_") and v:IsA("Highlight") then
				v.OutlineColor = LockerEspOutlineColor
				v.FillColor = LockerEspFillColor
			end
		end
	end
	
	local LockerEspOutlineTransparencySlider
	local LockerEspFillTransparencySlider
	local LockerEspOutlineColorPicker
	local LockerEspFillColorPicker
	ToggleLockerESP = FleeTheFacilityCategory:CreateToggle({
		Text = "Locker ESP",
		MouseButton1Click = function(Args)
			LockerESP = not LockerESP
			ModuleToggled(ToggleLockerESP, "Locker ESP", LockerESP, Args.NoNotify)
			if LockerESP then
				local Map = GetMap()
				EspAllLockers(Map)

				Connections.Visuals.FleeTheFacility.LockerEspWorkspaceChildAddedConnection = workspace.ChildAdded:Connect(function(Child)
					RunService.Heartbeat:Wait()
					if IsMap(Child) then
						EspAllLockers(Child)
					end
				end)
			else
				if Connections.Visuals.FleeTheFacility.LockerEspWorkspaceChildAddedConnection then
					Connections.Visuals.FleeTheFacility.LockerEspWorkspaceChildAddedConnection:Disconnect()
					Connections.Visuals.FleeTheFacility.LockerEspWorkspaceChildAddedConnection = nil
				end
				for i, Highlight in pairs(EspFolder:GetChildren()) do
					if string.find(Highlight.Name, "FleeTheFacility_LockerESP_") then
						Highlight:Destroy()
					end
				end
			end
		end,
		MouseButton2Click = function()
			LockerEspOutlineTransparencySlider.Visible = true
			LockerEspFillTransparencySlider.Visible = true
			LockerEspOutlineColorPicker.Visible = true
			LockerEspFillColorPicker.Visible = true
		end,
	})

	LockerEspOutlineTransparencySlider = CreateSlider({
		Text = "Locker ESP Outline Transparency",
        Min = 0,
		Default = 0,
		Max = 1,
		Function = function(Val)
			LockerEspOutlineTransparency = Val
			UpdateLockerEspTransparency()
		end,
		Function2 = function(Val)
			LockerEspOutlineTransparency = Val
			UpdateLockerEspTransparency()
		end,
	})

	LockerEspFillTransparencySlider = CreateSlider({
		Text = "Locker ESP Fill Transparency",
        Min = 0,
		Default = 0.5,
		Max = 1,
		Function = function(Val)
			LockerEspFillTransparency = Val
			UpdateLockerEspTransparency()
		end,
		Function2 = function(Val)
			LockerEspFillTransparency = Val
			UpdateLockerEspTransparency()
		end,
	})

	LockerEspOutlineColorPicker = CreateColorPicker({
		Text = "Locker ESP Outline Color",
		Function = function(Color)
			DoorEspOutlineColor = Color
			UpdateLockerEspColor()
		end,
	})

	LockerEspFillColorPicker = CreateColorPicker({
		Text = "Locker ESP Fill Color",
		Function = function(Color)
			DoorEspFillColor = Color
			UpdateLockerEspColor()
		end,
	})

	local function EspAllSpawns(Map)
		if not Map then return end
		for i, v in ipairs(Map:GetChildren()) do
			if not (v:IsA("Model") and v.Name == "GameSpawnPads") then continue end
			local Highlight = Instance.new("Highlight")
			Highlight.OutlineColor = DoorEspOutlineColor
			Highlight.FillColor = DoorEspFillColor
			Highlight.OutlineTransparency = DoorEspOutlineTransparency
			Highlight.FillTransparency = DoorEspFillTransparency
			Highlight.Adornee = v
			Highlight.Name = "FleeTheFacility_SpawnESP_" .. tostring(i)
            Highlight.Parent = EspFolder
			for i2, v2 in ipairs(v:GetChildren()) do
				if v2:IsA("BasePart") then
					v2.Transparency = 0
				end
			end
		end
	end
	
	local function UpdateSpawnEspTransparency()
		for i, v in ipairs(EspFolder:GetChildren()) do
			if string.find(v.Name, "FleeTheFacility_SpawnESP_") and v:IsA("Highlight") then
				v.OutlineTransparency = SpawnEspOutlineTransparency
				v.FillTransparency = SpawnEspFillTransparency
			end
		end
	end
	
	local function UpdateSpawnEspColor()
		for i, v in ipairs(EspFolder:GetChildren()) do
			if string.find(v.Name, "FleeTheFacility_SpawnESP_") and v:IsA("Highlight") then
				v.OutlineColor = SpawnEspOutlineColor
				v.FillColor = SpawnEspFillColor
			end
		end
	end
	
	local SpawnEspOutlineTransparencySlider
	local SpawnEspFillTransparencySlider
	local SpawnEspOutlineColorPicker
	local SpawnEspFillColorPicker
	ToggleSpawnESP = FleeTheFacilityCategory:CreateToggle({
		Text = "Spawn ESP",
		MouseButton1Click = function(Args)
			SpawnESP = not SpawnESP
			ModuleToggled(ToggleSpawnESP, "Door ESP", SpawnESP, Args.NoNotify)
			if SpawnESP then
				local Map = GetMap()
				EspAllSpawns(Map)

				Connections.Visuals.FleeTheFacility.SpawnEspWorkspaceChildAddedConnection = workspace.ChildAdded:Connect(function(Child)
					RunService.Heartbeat:Wait()
					if IsMap(Child) then
						EspAllSpawns(Child)
					end
				end)
			else
				if Connections.Visuals.FleeTheFacility.SpawnEspWorkspaceChildAddedConnection then
					Connections.Visuals.FleeTheFacility.SpawnEspWorkspaceChildAddedConnection:Disconnect()
					Connections.Visuals.FleeTheFacility.SpawnEspWorkspaceChildAddedConnection = nil
				end
				for i, Highlight in pairs(EspFolder:GetChildren()) do
					if string.find(Highlight.Name, "FleeTheFacility_SpawnESP_") then
						Highlight:Destroy()
					end
				end
			end
		end,
		MouseButton2Click = function()
			SpawnEspOutlineTransparencySlider.Visible = true
			SpawnEspFillTransparencySlider.Visible = true
			SpawnEspOutlineColorPicker.Visible = true
			SpawnEspFillColorPicker.Visible = true
		end,
	})

	SpawnEspOutlineTransparencySlider = CreateSlider({
		Text = "Locker ESP Outline Transparency",
        Min = 0,
		Default = 0,
		Max = 1,
		Function = function(Val)
			LockerEspOutlineTransparency = Val
			UpdateSpawnEspTransparency()
		end,
		Function2 = function(Val)
			LockerEspOutlineTransparency = Val
			UpdateSpawnEspTransparency()
		end,
	})

	SpawnEspFillTransparencySlider = CreateSlider({
		Text = "Locker ESP Fill Transparency",
        Min = 0,
		Default = 0.5,
		Max = 1,
		Function = function(Val)
			LockerEspFillTransparency = Val
			UpdateSpawnEspTransparency()
		end,
		Function2 = function(Val)
			LockerEspFillTransparency = Val
			UpdateSpawnEspTransparency()
		end,
	})

	SpawnEspOutlineColorPicker = CreateColorPicker({
		Text = "Spawn ESP Outline Color",
		Function = function(Color)
			DoorEspOutlineColor = Color
			UpdateSpawnEspColor()
		end,
	})

	SpawnEspFillColorPicker = CreateColorPicker({
		Text = "Spawn ESP Fill Color",
		Function = function(Color)
			DoorEspFillColor = Color
			UpdateSpawnEspColor()
		end,
	})

	local function GetClosestComputer()
		local ClosestComputerDistance = math.huge
		local ClosestComputer
		local Map = GetMap()
		if not Map then return nil end
		local Char = GetChar(Plr)
		local Root = GetRoot(Char)
		if not (Char and Root) then return nil end
		
		for i, v in ipairs(Map:GetChildren()) do
			if not (v:IsA("Model") and v.Name == "ComputerTable") then continue end
			local Computer = GetRoot(v) or v:FindFirstChild("BasePart") or v:FindFirstChild("ClearTable") or v:FindFirstChild("Table")
			if not Computer then continue end
			local Mag = (Root.Position - Computer.Position).Magnitde
			if Mag < ClosestComputerDistance then
				ClosestComputerDistance = Mag
				ClosestComputer = Computer
			end
		end
		
		return ClosestComputer
	end
    
	KillAura = false

    ToggleKillAura = FleeTheFacilityCategory:CreateToggle({
        Text = "Kill Aura",
        MouseButton1Click = function(Args)
            KillAura = not KillAura
            ModuleToggled(ToggleKillAura, "Kill Aura", KillAura, Args.NoNotify)
            if KillAura then
                Connections.Combat.FleeTheFacilityKillAuraLoop = RunService.Heartbeat:Connect(function()
                    local Player = GetClosestPlayer()
                    local PlayerChar = GetChar(Player)
                    local PlayerRoot = GetRoot(PlayerChar)
                    local Char = GetChar(Plr)
                    if not (Player and PlayerChar and PlayerRoot and Char) then return end
                    if Char:FindFirstChild("Hammer") and Char.Hammer:FindFirstChild("HammerEvent") then
                        Char.Hammer.HammerEvent:FireServer("HammerHit", PlayerRoot)
                    end
                end)
            else
                if Connections.Combat.FleeTheFacilityKillAuraLoop then
                    Connections.Combat.FleeTheFacilityKillAuraLoop:Disconnect()
                    Connections.Combat.FleeTheFacilityKillAuraLoop = nil
                end
            end
        end,
    })

    CrouchAsBeast = false

    ToggleCrouchAsBeast = FleeTheFacilityCategory:CreateToggle({
        Text = "Crouch As Beast",
        MouseButton1Click = function(Args)
            CrouchAsBeast = not CrouchAsBeast
            ModuleToggled(ToggleCrouchAsBeast, "Crouch As Beast", CrouchAsBeast, Args.NoNotify)
            if CrouchAsBeast then
                local Char = GetChar(Plr)
                local CrawlScript = Char:FindFirstChild("CrawlScript")
                if CrawlScript then
                    CrawlScript.Enabled = true
                    Connections.Other.CrouchAsBeastConnection = CrawlScript:GetPropertyChangedSignal("Enabled"):Connect(function()
                        CrawlScript.Enabled = true
                    end)
                end
            else
                local Char = GetChar(Plr)
                local CrawlScript = Char:FindFirstChild("CrawlScript")
                if CrawlScript then
                    CrawlScript.Enabled = false
                end
                if Connections.Other.CrouchAsBeastConnection then
                    Connections.Other.CrouchAsBeastConnection:Disconnect()
                    Connections.Other.CrouchAsBeastConnection = nil
                end
            end
        end,
    })

    AutoWin = false

    ToggleAutoWin = FleeTheFacilityCategory:CreateToggle({
        Text = "Auto Win",
        Info = "Only Works As Beast",
        MouseButton1Click = function()
            AutoWin = not AutoWin
            ModuleToggled(ToggleAutoWin, "Auto Win", AutoWin)
            task.spawn(function()
                if KillAura then
                    ToggleKillAura:Toggle({NoNotify = true})
                end
                while AutoWin do
                    RunService.Heartbeat:Wait()
                    if not ReplicatedStorage.IsGameActive.Value then continue end
                    local Char = GetChar(Plr)
                    local Root = GetRoot(Char)
                    if not (Char and Root) then continue end
                    local Hammer = Char:FindFirstChild("Hammer")
                    if Hammer then
                        local AllPlayers = Players:GetPlayers()
                        table.remove(AllPlayers, table.find(AllPlayers, Plr))
                        local FreezePods = {}
                        local Map = GetMap()
                        if not Map then RunService.Heartbeat:Wait() continue end
                        for i, FreezePod in ipairs(Map:GetChildren()) do
                            if FreezePod.Name == "FreezePod" then
                                table.insert(FreezePods, FreezePod)
                            end
                        end
                        for i, Player in ipairs(AllPlayers) do
                            local PlayerChar = GetChar(Player)
                            local PlayerRoot = GetRoot(PlayerChar)
                            if not (PlayerChar and PlayerRoot) then continue end
                            Root.CFrame = PlayerRoot.CFrame
                            task.wait(0.1)
                            RunService.Heartbeat:Wait()
                            Char.Hammer.HammerEvent:FireServer("HammerHit", PlayerRoot)
                            task.wait(0.1)
                            RunService.Heartbeat:Wait()
                            Char.Hammer.HammerEvent:FireServer("HammerTieUp", PlayerRoot, PlayerRoot.Position)
                            if FreezePods[i] and FreezePods[i].PrimaryPart then
                                Root.CFrame = FreezePods[i].PrimaryPart.CFrame * CFrame.new(0, 4, -4)
                                task.wait(0.1)
                                RunService.Heartbeat:Wait()
                                ReplicatedStorage.RemoteEvent:FireServer("Input", "Action", true)
                            end
                        end
                    end
                end
            end)
        end,
    })
	
    OnShutdown:Once(function()
        ToggleComputerTriggerESP:Toggle()
        ToggleFreezePodTriggerESP:Toggle()
        ToggleExitTriggerESP:Toggle()
        ToggleDoorTriggerESP:Toggle()
    end)

	Notify({
		Text = "<font color = 'rgb(0, 255, 0)'>Successfully</font> Loaded Flee The Facility Modules Have Fun (:"
	})
elseif IsStrongmanSimulator then -- Strongman Simulator
    StrongmanSimulatorCategory = CreateCategory({
        Name = "Strongman Simulator",
        Size = UDim2.fromScale(1, 0.5),
        Pos = UDim2.fromScale(0.77, 0),
        ClosedPos = UDim2.fromScale(0.45, 1),
    })
    WeightlessItems = false
    NoStrongmanSimulatorPopups = false
    InstantSellItems = false
    Connections.StrongmanSimulator = {}
    local MasslessItems = {}

    ToggleWeightlessItems = StrongmanSimulatorCategory:CreateToggle({
        Text = "Weightless Items",
        Info = "Makes Items Weightless And Easy To Pull",
        MouseButton1Click = function(Args)
            WeightlessItems = not WeightlessItems
            ModuleToggled(ToggleWeightlessItems, "Weightless Items", WeightlessItems, Args.NoNotify)
            if WeightlessItems then
                local PlrDraggables = workspace.PlayerDraggables:FindFirstChild(Plr.UserId)
                if not PlrDraggables then return end
                Connections.StrongmanSimulator.WeightlessItemsLoop = PlrDraggables.ChildAdded:Connect(function(Child)
                    RunService.Heartbeat:Wait()
                    if Child:IsA("BasePart") then
                        Child.Massless = true
                        Child.CustomPhysicalProperties = PhysicalProperties.new(0, 0, 0, 0, 0)
                    end
                    for i, v in ipairs(Child:GetChildren()) do
                        if v:IsA("BasePart") then
                            v.Massless = true
                            v.CustomPhysicalProperties = PhysicalProperties.new(0, 0, 0, 0, 0)
                            table.insert(MasslessItems, v)
                        end
                    end
                end)
            else
                if Connections.StrongmanSimulator.WeightlessItemsLoop then
                    Connections.StrongmanSimulator.WeightlessItemsLoop:Disconnect()
                    Connections.StrongmanSimulator.WeightlessItemsLoop = nil
                end

                local PlrDraggables = workspace.PlayerDraggables:FindFirstChild(Plr.UserId)
                if not PlrDraggables then return end

                for i, v in ipairs(MasslessItems) do
                    v.Massless = false
                end
                table.clear(MasslessItems)
            end
        end,
    })
    
    ToggleNoGamepassPopups = StrongmanSimulatorCategory:CreateToggle({
        Text = "No Gamepass Popups",
        Info = "Removes Gamepass/Product Popups In Strongman Simulator",
        MouseButton1Click = function(Args)
            NoStrongmanSimulatorPopups = not NoStrongmanSimulatorPopups
            ModuleToggled(ToggleNoGamepassPopups, "No Gamepass Popups", NoStrongmanSimulatorPopups, Args.NoNotify)
            if NoStrongmanSimulatorPopups then
                local PopupPurchase = Plr:FindFirstChildWhichIsA("PlayerGui"):FindFirstChild("PopupPurchase")
                if not PopupPurchase then return end
                PopupPurchase.Enabled = false
                local PopupScript = PopupPurchase:FindFirstChild("AdPopup")
                if not PopupScript then return end
                PopupScript.Enabled = false
            else
                local PopupPurchase = Plr:FindFirstChildWhichIsA("PlayerGui"):FindFirstChild("PopupPurchase")
                if not PopupPurchase then return end
                local PopupScript = PopupPurchase:FindFirstChild("AdPopup")
                if not PopupScript then return end
                PopupScript.Enabled = true
            end
        end,
    })

    ToggleInstantSellItems = StrongmanSimulatorCategory:CreateToggle({
        Text = "Instant Sell Items",
        Info = "Instantly Sells Items The Moment You Grab Them",
        MouseButton1Click = function(Args)
            InstantSellItems = not InstantSellItems
            ModuleToggled(ToggleInstantSellItems, "Instant Sell Items", InstantSellItems, Args.NoNotify)
            if not FireTouchInterest() then return NotifyExploitDoesntSupportFunction("FireTouchInterest") end
            if InstantSellItems then
                local PlrDraggables = workspace.PlayerDraggables:FindFirstChild(Plr.UserId)
                if not PlrDraggables then return end
                Connections.StrongmanSimulator.InstantSellItems = PlrDraggables.ChildAdded:Connect(function(Child)
                    local Success, Goal = pcall(function()
                        return workspace.Areas.Area20_Princess.Goal
                    end)
                    if Child:IsA("BasePart") and Goal then
                        FireTouchInterest(Goal, Child, true)
                    end
                end)
            else
                if Connections.StrongmanSimulator.InstantSellItems then
                    Connections.StrongmanSimulator.InstantSellItems:Disconnect()
                    Connections.StrongmanSimulator.InstantSellItems = nil
                end
            end
        end,
    })

    Notify({
        Text = "<font color = 'rgb(0, 255, 0)'>Successfully</font> Loaded Strongman Simulator Modules Have Fun (:"
    })
elseif IsDeadByRoblox then -- Dead By Roblox
    DeadByRobloxCategory = CreateCategory({
        Name = "Dead By Roblox",
        Size = UDim2.fromScale(1, 0.5),
        Pos = UDim2.fromScale(0.77, 0),
        ClosedPos = UDim2.fromScale(0.45, 1),
    })
    PalletESP = false
    WindowESP = false
    GeneratorESP = false

    local function ClearGeneratorESP()
        for i, v in ipairs(EspFolder:GetChildren()) do
            if string.find(v.Name, "Generator_ESP_") then
                v:Destroy()
            end
        end
    end

    ToggleGeneratorESP = DeadByRobloxCategory:CreateToggle({
        Text = "Generator ESP",
        MouseButton1Click = function(Args)
            GeneratorESP = not GeneratorESP
            ModuleToggled(ToggleGeneratorESP, "Generator ESP", GeneratorESP, Args.NoNotify)
            ClearGeneratorESP()
            if not GeneratorESP then return end
            for i, v in ipairs(workspace:GetChildren()) do
                if not string.find(v.Name, "Generator") then continue end
                local Highlight = Instance.new("Highlight")
                Highlight.Adornee = v
                Highlight.OutlineColor = Color3.fromRGB(255, 0, 0)
                Highlight.FillColor = Color3.fromRGB(255, 0, 0)
                Highlight.Name = "Generator_ESP_" .. string.sub(v.Name, #v.Name, #v.Name)
                Highlight.Parent = EspFolder
            end
        end,
    })
    
    local function ClearWindowESP()
        for i, v in ipairs(EspFolder:GetChildren()) do
            if string.find(v.Name, "Window_ESP_") then
                v:Destroy()
            end
        end
    end

    ToggleWindowESP = DeadByRobloxCategory:CreateToggle({
        Text = "Window ESP",
        MouseButton1Click = function(Args)
            WindowESP = not WindowESP
            ModuleToggled(ToggleWindowESP, "Window ESP", WindowESP, Args.NoNotify)
            ClearWindowESP()
            if not WindowESP then return end
            for i, v in ipairs(workspace:GetChildren()) do
                if not string.find(v.Name, "Window") then continue end
                local Highlight = Instance.new("Highlight")
                Highlight.Adornee = v
                Highlight.OutlineColor = Color3.fromRGB(255, 0, 0)
                Highlight.FillColor = Color3.fromRGB(255, 0, 0)
                Highlight.Name = "Window_ESP_" .. string.sub(v.Name, #v.Name, #v.Name)
                Highlight.Parent = EspFolder
            end
        end,
    })

    local function ClearPalletESP()
        for i, v in ipairs(EspFolder:GetChildren()) do
            if string.find(v.Name, "Pallet_ESP_") then
                v:Destroy()
            end
        end
    end

    TogglePalletESP = DeadByRobloxCategory:CreateToggle({
        Text = "Pallet ESP",
        MouseButton1Click = function(Args)
            PalletESP = not PalletESP
            ModuleToggled(TogglePalletESP, "Pallet ESP", PalletESP, Args.NoNotify)
            ClearPalletESP()
            if not PalletESP then return end
            for i, v in ipairs(workspace:GetChildren()) do
                if not string.find(v.Name, "Pallet") then continue end
                local Highlight = Instance.new("Highlight")
                Highlight.Adornee = v
                Highlight.OutlineColor = Color3.fromRGB(255, 0, 0)
                Highlight.FillColor = Color3.fromRGB(255, 0, 0)
                Highlight.Name = "Pallet_ESP_" .. string.sub(v.Name, #v.Name, #v.Name)
                Highlight.Parent = EspFolder
            end
        end,
    })

    InstantWiggle = false

    ToggleInstantWiggle = DeadByRobloxCategory:CreateToggle({
        Text = "Decisive Strike",
        Info = "Makes You Instantly Escape The Killer When You Are Picked Up",
        MouseButton1Click = function(Args)
            InstantWiggle = not InstantWiggle
            ModuleToggled(ToggleInstantWiggle, "Instant Wiggle", InstantWiggle, Args.NoNotify)
            if InstantWiggle then
                local Success, Held = pcall(function()
                    return Plr:FindFirstChildWhichIsA("Backpack").Scripts.values.Holded
                end)
                if not Success then
                    Notify({Text = "<font color = 'rgb(255, 0, 0)'>Error</font> Finding Value"})
                    return
                end
                Connections.Other.InstantWiggle = Held:GetPropertyChangedSignal("Value"):Connect(function()
                    if Held.Value == false then return end
                    local Killer
                    for i, Player in ipairs(Players:GetPlayers()) do
                        local PlayerChar = GetChar(Player)
                        if not PlayerChar then continue end
                        if PlayerChar:FindFirstChild("SwingSound", true) then
                            Killer = Player
                        end
                    end
                    Notify({
                        Text = "Decisive Strike Has Been Activated!",
                        Duration = 2,
                    })
                    while Held.Value do
                        for i = 1, 10 do
                            ReplicatedStorage.RemoteEvents.Server_Event:FireServer("Wiggle", Killer)
                        end
                        task.wait()
                    end
                end)
            else
                if Connections.Other.InstantWiggle then
                    Connections.Other.InstantWiggle:Disconnect()
                    Connections.Other.InstantWiggle = nil
                end
            end
        end,
    })

    SpamSwingSound = DeadByRobloxCategory:CreateButton({
        Text = "Spam Swing Sound",
        Info = "Must Be The Killer For This To Work",
        MouseButton1Click = function()
            local Char = GetChar(Plr)
            if not Char then return end
            for i = 1, 1000 do
                Plr.Backpack.Scripts.GlobalKiller.Action.BasicAttack.RemoteEvent:FireServer(Char:FindFirstChild("SwingSound", true))
            end
        end,
    })
    
    Notify({
        Text = "<font color = 'rgb(0, 255, 0)'>Successfully</font> Loaded Dead By Roblox Modules Have Fun (:"
    })
elseif IsViolenceDistrict then
    ViolenceDistrictCategory = CreateCategory({
        Name = "Violence District",
        Size = UDim2.fromScale(1, 0.5),
        Pos = UDim2.fromScale(0.77, 0),
        ClosedPos = UDim2.fromScale(0.45, 1),
    })
    
    ChangeGenProgress = ViolenceDistrictCategory:CreateTextbox({
        ButtonText = "Change Gen Progress",
        MouseButton1Click = function(Args)
            local Map = workspace:FindFirstChild("Map")
            if not Map then return end
            if not tonumber(Args.Text) then return end
            for i, v in ipairs(Map:GetChildren()) do
                if v.Name == "Generator" then
                    for i2, v2 in ipairs(v:GetChildren()) do
                        if string.find(v2.Name, "GeneratorPoint") then
                            ReplicatedStorage.Remotes.Generator.SkillCheckResultEvent:FireServer("success", tonumber(Args.Text), v, v2)   
                            break
                        end
                    end
                end
            end
        end,
    })
    
    TimeStop = false
    local PlayTimeStopSound = false

    ToggleTimeStop = ViolenceDistrictCategory:CreateToggle({
        Text = "Time Stop",
        MouseButton1Click = function(Args)
            TimeStop = not TimeStop
            ModuleToggled(ToggleTimeStop, "Time Stop", TimeStop, Args.NoNotify)
            for i, Player in pairs(Players:GetPlayers()) do
                if Player == Plr then continue end
                local PlayerChar = GetChar(Player)
                local PlayerRoot = GetRoot(PlayerChar)
                if not (PlayerChar and PlayerRoot) then continue end
                ReplicatedStorage.Remotes.Collision.Anchor:FireServer(PlayerRoot, TimeStop)
            end
            if TimeStop then
                local Sound = Instance.new("Sound")
                Sound.SoundId = "rbxassetid://5104670875"
                Sound.Parent = SoundsFolder
                Sound:Play()
                Sound.Ended:Once(function()
                    Sound:Destroy()
                end)
            else
                local Sound = Instance.new("Sound")
                Sound.SoundId = "rbxassetid://3101648169"
                Sound.Parent = SoundsFolder
                Sound:Play()
                Sound.Ended:Once(function()
                    Sound:Destroy()
                end)
            end
        end,
        MouseButton2Click = function()
            TogglePlayTimeStopSound.MainFrame.Visible = true
        end,
    })

    TogglePlayTimeStopSound = CreateToggle({
        Text = "Play Time Stop Sound",
        MouseButton1Click = function()
            PlayTimeStopSound = not PlayTimeStopSound
            ToggleButtonColor(TogglePlayTimeStopSound, PlayTimeStopSound)
        end,
    })

    AnchorPlayer = ViolenceDistrictCategory:CreateTextbox({
        ButtonText = "Anchor Player",
        MouseButton1Click = function(Args)
            local Player = FindPlayer(Args.Text)
            local PlayerChar = GetChar(Player)
            local PlayerRoot = GetRoot(PlayerChar)
            if not (Player and PlayerChar and PlayerRoot) then return end
            ReplicatedStorage.Remotes.Collision.Anchor:FireServer(PlayerRoot, true)
        end,
    })

    UnAnchorPlayer = ViolenceDistrictCategory:CreateTextbox({
        ButtonText = "Un Anchor Player",
        MouseButton1Click = function(Args)
            local Player = FindPlayer(Args.Text)
            local PlayerChar = GetChar(Player)
            local PlayerRoot = GetRoot(PlayerChar)
            if not (Player and PlayerChar and PlayerRoot) then return end
            ReplicatedStorage.Remotes.Collision.Anchor:FireServer(PlayerRoot, false)
        end,
    })
    
    PickUpPlayer = ViolenceDistrictCategory:CreateTextbox({
        ButtonText = "Pick Up Player",
        MouseButton1Click = function(Args)
            local Player = FindPlayer(Args.Text)
            local PlayerChar = GetChar(Player)
            local PlayerRoot = GetRoot(PlayerChar)
            if not (Player and PlayerChar and PlayerRoot) then return end
            ReplicatedStorage.Remotes.Carry.CarrySurvivorEvent:FireServer(PlayerChar)
        end,
    })

    DropPlayer = ViolenceDistrictCategory:CreateTextbox({
        ButtonText = "Drop Player",
        MouseButton1Click = function(Args)
            local Player = FindPlayer(Args.Text)
            local PlayerChar = GetChar(Player)
            local PlayerRoot = GetRoot(PlayerChar)
            if not (Player and PlayerChar and PlayerRoot) then return end
            ReplicatedStorage.Remotes.Carry.DropSurvivorEvent:FireServer(PlayerChar)
        end,
    })

    BringAllPlayers = ViolenceDistrictCategory:CreateButton({
        Text = "Bring All Players",
        MouseButton1Click = function()
            for i, Player in pairs(Players:GetPlayers()) do
                if Player == Plr then continue end
                local PlayerChar = GetChar(Player)
                if not PlayerChar then continue end
                ReplicatedStorage.Remotes.Carry.CarrySurvivorEvent:FireServer(PlayerChar)

                task.wait()

                ReplicatedStorage.Remotes.Carry.DropSurvivorEvent:FireServer(PlayerChar)

                task.wait()
            end
        end,
    })

    MapUnAnchored = false

    ToggleAnchorMap = ViolenceDistrictCategory:CreateToggle({
        Text = "Un Anchor Map",
        MouseButton1Click = function()
            MapUnAnchored = not MapUnAnchored
            ToggleButtonColor(ToggleAnchorMap, MapUnAnchored)
            for i, v in ipairs(workspace:GetDescendants()) do
                if v:IsA("BasePart") and not Players:GetPlayerFromCharacter(v.Parent) then
                    ReplicatedStorage.Remotes.Collision.Anchor:FireServer(v, not MapUnAnchored)
                end
            end
        end,
    })
end

----------------------------------------------------------------------------------------------------- CREATING BUTTONS IN VISUALS Category

ToggleNoShadows = Visuals:CreateToggle({
	Text = "No Shadows",
	Info = "Removes All Shadows.",
	Function = function(Args)
		NoShadows = not NoShadows
		ModuleToggled(ToggleNoShadows, "No Shadows", NoShadows, Args.NoNotify)
		if NoShadows then
			Lighting.GlobalShadows = false
			Connections.Visuals.RemoveShadowsLoop = Lighting:GetPropertyChangedSignal("GlobalShadows"):Connect(function()
				Lighting.GlobalShadows = false
			end)
		else
			if Connections.Visuals.RemoveShadowsLoop then 
				Connections.Visuals.RemoveShadowsLoop:Disconnect()
				Connections.Visuals.RemoveShadowsLoop = nil
			end
		end
	end,
})

Connections.RemoveDepthOfFieldLoops = {}

ToggleNoDepthOfField = Visuals:CreateToggle({
	Text = "No Depth Of Field",
	Info = "Removes Depth Of Field. (Depth Of Field Makes Far Away Stuff Blurry)",
	Function = function(Args)
		NoDepthOfField = not NoDepthOfField
		ModuleToggled(ToggleNoDepthOfField, "No Depth Of Field", NoDepthOfField, Args.NoNotify)
		if NoDepthOfField then
			for i, v in ipairs(Lighting:GetDescendants()) do
                if not v:IsA("DepthOfFieldEffect") then continue end
                v.Enabled = false
				local Connection = v:GetPropertyChangedSignal("Enabled"):Connect(function()
                    v.Enabled = false
                end)
				table.insert(Connections.RemoveDepthOfFieldLoops, Connection)
			end
			Connections.DepthOfFieldAdded = Lighting.DescendantAdded:Connect(function(Child)
				if Child:IsA("DepthOfFieldEffect") then
					Child.Enabled = false
					local Connection = Child:GetPropertyChangedSignal("Enabled"):Connect(function()
                        Child.Enabled = false
                    end)
					table.insert(Connections.RemoveDepthOfFieldLoops, Connection)
				end
			end)
		else
			if Connections.DepthOfFieldAdded then
				Connections.DepthOfFieldAdded:Disconnect()
                Connections.DepthOfFieldAdded = nil
			end
			for i, v in pairs(Connections.RemoveDepthOfFieldLoops) do
				v:Disconnect()
				v = nil
			end
			table.clear(Connections.RemoveDepthOfFieldLoops)
		end
	end,
})

ToggleNoFog = Visuals:CreateToggle({
	Text = "No Fog",
	Info = "Removes Fog (Fog Makes It Foggy)",
	Function = function(Args)
		NoFog = not NoFog
		ModuleToggled(ToggleNoFog, "No Fog", NoFog, Args.NoNotify)
		if NoFog then
			Lighting.FogStart = 100000
			Connections.Visuals.RemoveFogStartLoop = Lighting:GetPropertyChangedSignal("FogStart"):Connect(function()
				Lighting.FogStart = 100000
			end)
			Lighting.FogEnd = 100000
			Connections.Visuals.RemoveFogEndLoop = Lighting:GetPropertyChangedSignal("FogEnd"):Connect(function()
				Lighting.FogEnd = 100000
			end)
		else
			if Connections.Visuals.RemoveFogStartLoop then
				Connections.Visuals.RemoveFogStartLoop:Disconnect()
				Connections.Visuals.RemoveFogStartLoop = nil
			end
			if Connections.Visuals.RemoveFogEndLoop then
				Connections.Visuals.RemoveFogEndLoop:Disconnect()
				Connections.Visuals.RemoveFogEndLoop = nil
			end
		end
	end,
})

Connections.Visuals.RemoveAtmosphereLoops = {}

ToggleNoAtmosphere = Visuals:CreateToggle({
    Text = "No Atmosphere",
    Info = "Atmosphere Makes It Hard To See.",
    Function = function(Args)
        NoAtmosphere = not NoAtmosphere
        ModuleToggled(ToggleNoAtmosphere, "No Atmosphere", NoAtmosphere, Args.NoNotify)
        if NoAtmosphere then
            for i, v in ipairs(Lighting:GetDescendants()) do
                if not v:IsA("Atmosphere") then continue end
                v.Density = 0
                local Connection = v:GetPropertyChangedSignal("Density"):Connect(function()
                    v.Density = 0
                end)
                v.Glare = 0
                local Connection2 = v:GetPropertyChangedSignal("Glare"):Connect(function()
                    v.Glare = 0
                end)
                v.Haze = 0
                local Connection3 = v:GetPropertyChangedSignal("Haze"):Connect(function()
                    v.Haze = 0
                end)
                table.insert(Connections.Visuals.RemoveAtmosphereLoops, Connection)
                table.insert(Connections.Visuals.RemoveAtmosphereLoops, Connection2)
                table.insert(Connections.Visuals.RemoveAtmosphereLoops, Connection3)
            end
            Connections.Visuals.AtmosphereAdded = Lighting.DescendantAdded:Connect(function(Child)
                if Child:IsA("Atmosphere") then
                    Child.Density = 0
                    local Connection = Child:GetPropertyChangedSignal("Density"):Connect(function()
                        Child.Density = 0
                    end)
                    Child.Glare = 0
                    local Connection2 = Child:GetPropertyChangedSignal("Glare"):Connect(function()
                        Child.Glare = 0
                    end)
                    Child.Haze = 0
                    local Connection3 = Child:GetPropertyChangedSignal("Haze"):Connect(function()
                        Child.Haze = 0
                    end)
                    table.insert(Connections.Visuals.RemoveAtmosphereLoops, Connection)
                    table.insert(Connections.Visuals.RemoveAtmosphereLoops, Connection2)
                    table.insert(Connections.Visuals.RemoveAtmosphereLoops, Connection3)
                end
            end)
        else
            if Connections.Visuals.AtmosphereAdded then
                Connections.Visuals.AtmosphereAdded:Disconnect()
                Connections.Visuals.AtmosphereAdded = nil
            end
            for i, v in pairs(Connections.Visuals.RemoveAtmosphereLoops) do
                v:Disconnect()
                v = nil
            end
            table.clear(Connections.Visuals.RemoveAtmosphereLoops)
        end
    end,
})

Connections.Visuals.RemoveBloomLoops = {}

ToggleNoBloom = Visuals:CreateToggle({
	Text = "No Bloom",
	Info = "Removes Bloom Effects",
	Function = function(Args)
		NoBloom = not NoBloom
		ModuleToggled(ToggleNoBloom, "No Bloom", NoBloom, Args.NoNotify)
		if NoBloom then
			for i, v in pairs(Lighting:GetDescendants()) do
                if not v:IsA("BloomEffect") then continue end
                v.Enabled = false
				local Connection = v:GetPropertyChangedSignal("Enabled"):Connect(function()
                    v.Enabled = false
                end)
				table.insert(Connections.Visuals.RemoveBloomLoops, Connection)
			end
			Connections.Visuals.BloomAdded = Lighting.DescendantAdded:Connect(function(Child)
				if Child:IsA("BloomEffect") then
                    Child.Enabled = false
					local Connection = Child:GetPropertyChangedSignal("Enabled"):Connect(function()
                        Child.Enabled = false
                    end)
					table.insert(Connections.Visuals.RemoveBloomLoops, Connection)
				end
			end)
		else
			if Connections.Visuals.BloomAdded then
				Connections.Visuals.BloomAdded:Disconnect()
				Connections.Visuals.BloomAdded = nil
			end
			for i, v in pairs(Connections.Visuals.RemoveBloomLoops) do
				v:Disconnect()
				v = nil
			end
			table.clear(Connections.Visuals.RemoveBloomLoops)
		end
	end,
})

Connections.Visuals.RemoveBlurLoops = {}

ToggleNoBlur = Visuals:CreateToggle({
	Text = "No Blur",
	Info = "Removes Blur Effects",
	Function = function(Args)
		NoBlur = not NoBlur
		ModuleToggled(ToggleNoBlur, "No Blur", NoBlur, Args.NoNotify)
		if NoBlur then
			for i, v in ipairs(Lighting:GetDescendants()) do
				if not v:IsA("BlurEffect") then continue end
                v.Enabled = false
                local Connection = v:GetPropertyChangedSignal("Enabled"):Connect(function()
                    v.Enabled = false
                end)
                table.insert(Connections.Visuals.RemoveBlurLoops, Connection)
			end
			Connections.Visuals.BlurAdded = Lighting.DescendantAdded:Connect(function(Child)
				if Child:IsA("BlurEffect") then
                    Child.Enabled = false
					local Connection = Child:GetPropertyChangedSignal("Enabled"):Connect(function()
                        Child.Enabled = false
                    end)
					table.insert(Connections.Visuals.RemoveBlurLoops, Connection)
				end
			end)
		else
			if Connections.Visuals.BlurAdded then
				Connections.Visuals.BlurAdded:Disconnect()
				Connections.Visuals.BlurAdded = nil
			end
			for i, v in pairs(Connections.Visuals.RemoveBlurLoops) do
				v:Disconnect()
				v = nil
			end
			table.clear(Connections.Visuals.RemoveBlurLoops)
		end
	end,
})

Connections.Visuals.NoColorCorrectionLoops = {}

ToggleNoColorCorrection = Visuals:CreateToggle({
	Text = "No Color Correction",
	Info = "Removes Color Correction Effects",
	Function = function(Args)
		NoColorCorrection = not NoColorCorrection
		ModuleToggled(ToggleNoColorCorrection, "No Color Correction", NoColorCorrection, Args.NoNotify)
		if NoColorCorrection then
			for i, v in ipairs(Lighting:GetDescendants()) do
                if not v:IsA("ColorCorrectionEffect") then continue end
                v.Enabled = false
				local Connection = v:GetPropertyChangedSignal("Enabled"):Connect(function()
                    v.Enabled = false
                end)
				table.insert(Connections.Visuals.NoColorCorrectionLoops, Connection)
			end
			Connections.Visuals.ColorCorrectionAdded = Lighting.DescendantAdded:Connect(function(Child)
				if Child:IsA("ColorCorrectionEffect") then
                    Child.Enabled = false
					local Connection = Child:GetPropertyChangedSignal("Enabled"):Connect(function()
                        Child.Enabled = false
                    end)
					table.insert(Connections.Visuals.NoColorCorrectionLoops, Connection)
				end
			end)
		else
			if Connections.Visuals.ColorCorrectionAdded then
				Connections.Visuals.ColorCorrectionAdded:Disconnect()
				Connections.Visuals.ColorCorrectionAdded = nil
			end
			for i, v in pairs(Connections.Visuals.NoColorCorrectionLoops) do
				v:Disconnect()
				v = nil
			end
			table.clear(Connections.Visuals.NoColorCorrectionLoops)
		end
	end,
})

Connections.Visuals.RemoveSunRaysLoops = {}

ToggleNoSunRays = Visuals:CreateToggle({
	Text = "No SunRays",
	Info = "Removes SunRay Effects",
	Function = function(Args)
		NoSunRays = not NoSunRays
		ModuleToggled(ToggleNoSunRays, "No Sun Rays", NoSunRays, Args.NoNotify)
		if NoSunRays then
			for i, v in ipairs(Lighting:GetDescendants()) do
                if not v:IsA("SunRaysEffect") then continue end
                v.Enabled = false
				local Connection = v:GetPropertyChangedSignal("Enabled"):Connect(function()
                    v.Enabled = false
                end)
				table.insert(Connections.Visuals.RemoveSunRaysLoops, Connection)
			end
			Connections.Visuals.SunRayAdded = Lighting.DescendantAdded:Connect(function(Child)
				if Child:IsA("SunRaysEffect") then
                    Child.Enabled = false
					local Connection = Child:GetPropertyChangedSignal("Enabled"):Connect(function()
                        Child.Enabled = false
                    end)
					table.insert(Connections.Visuals.RemoveSunRaysLoops, Connection)
				end
			end)
		else
			if Connections.Visuals.SunRayAdded then
				Connections.Visuals.SunRayAdded:Disconnect()
				Connections.Visuals.SunRayAdded = nil
			end
			for i, v in pairs(Connections.Visuals.RemoveSunRaysLoops) do
				v:Disconnect()
				v = nil
			end
			table.clear(Connections.Visuals.RemoveSunRaysLoops)
		end
	end,
})

do
    local function RemoveSky(Sky)
        Sky.CelestialBodiesShown = false
        Sky.MoonAngularSize = 0
        Sky.MoonTextureId = ""
        Sky.SkyboxBk = "rbxasset://textures/sky/sky512_bk.tex"
        Sky.SkyboxDn = "rbxasset://textures/sky/Dn.tex"
        Sky.SkyboxFt = "rbxasset://textures/sky/sky512_ft.tex"
        Sky.SkyboxLf = "rbxasset://textures/sky/sky512_lf.tex"
        Sky.SkyboxRt = "rbxasset://textures/sky/sky512_rt.tex"
        Sky.SkyboxUp = "rbxasset://textures/sky/sky512_up.tex"
        Sky.StarCount = 0
        Sky.SunAngularSize = 0
        Sky.SunTextureId = ""
    end

    Connections.Visuals.NoSkyLoops = {}

    ToggleNoSky = Visuals:CreateToggle({
        Text = "No Sky",
        Info = "This Will Force All Skyboxes To Be The Default Skybox",
        Function = function(Args)
            NoSky = not NoSky
            ModuleToggled(ToggleNoSky, "No Sky", NoSky, Args.NoNotify)
            if NoSky then
                for i, v in ipairs(Lighting:GetDescendants()) do
                    if not v:IsA("Sky") then continue end
                    RemoveSky(v)
                    local Connection = v.Changed:Connect(function()
                        RemoveSky(v)
                    end)
                    table.insert(Connections.Visuals.NoSkyLoops, Connection)
                end
                Connections.Visuals.SkyAdded = Lighting.DescendantAdded:Connect(function(Child)
                    if Child:IsA("Sky") then
                        RemoveSky(Child)
                        local Connection = Child.Changed:Connect(function()
                            RemoveSky(Child)
                        end)
                        table.insert(Connections.Visuals.NoSkyLoops, Connection)
                    end
                end)
            else
                if Connections.Visuals.SkyAdded then
                    Connections.Visuals.SkyAdded:Disconnect()
                    Connections.Visuals.SkyAdded = nil
                end
                for i, v in pairs(Connections.Visuals.NoSkyLoops) do
                    v:Disconnect()
                    v = nil
                end
                table.clear(Connections.Visuals.NoSkyLoops)
            end
        end,
    })
end

Connections.Visuals.NoColorGradingEffects = {}

ToggleNoColorGrading = Visuals:CreateToggle({
	Text = "No Color Grading",
	Info = "Removes Color Grading Effects",
	Function = function(Args)
		NoColorGrading = not NoColorGrading
		ModuleToggled(ToggleNoColorGrading, "No Color Grading", NoColorGrading, Args.NoNotify)
		if NoColorGrading then
			for i, v in ipairs(Lighting:GetDescendants()) do
                if not v:IsA("ColorGradingEffect") then continue end
                v.Enabled = false
				local Connection = v:GetPropertyChangedSignal("Enabled"):Connect(function()
                    v.Enabled = false
                end)
				table.insert(Connections.Visuals.NoColorGradingEffects, Connection)
			end
			Connections.Visuals.ColorGradingAdded = Lighting.DescendantAdded:Connect(function(Child)
				if Child:IsA("ColorGradingEffect") then
                    Child.Enabled = false
					local Connection = Child:GetPropertyChangedSignal("Enabled"):Connect(function()
                        Child.Enabled = false
                    end)
					table.insert(Connections.Visuals.NoColorGradingEffects, Connection)
				end
			end)
		else
			if Connections.Visuals.ColorGradingAdded then
				Connections.Visuals.ColorGradingAdded:Disconnect()
				Connections.Visuals.ColorGradingAdded = nil
			end
			for i, v in pairs(Connections.Visuals.NoColorGradingEffects) do
				v:Disconnect()
				v = nil
			end
			table.clear(Connections.Visuals.NoColorGradingEffects)
		end
	end,
})

do
    local function UpdateTimeOfDay()
        if ForceTimeOfDayEnabled then
            Lighting.ClockTime = ForceTimeOfDay
        end
    end

    ToggleForceTimeOfDay = Visuals:CreateToggle({
        Text = "Force Time Of Day",
        Info = "Forces It To Be The Specified Time Of Day (In Hours)",
        Function = function(Args)
            ForceTimeOfDayEnabled = not ForceTimeOfDayEnabled
            ModuleToggled(ToggleForceTimeOfDay, "Force Time Of Day", ForceTimeOfDayEnabled, Args.NoNotify)
            if ForceTimeOfDayEnabled then
                UpdateTimeOfDay()
                Connections.Visuals.ForceTimeOfDayLoop = Lighting:GetPropertyChangedSignal("ClockTime"):Connect(UpdateTimeOfDay)
            else
                if Connections.Visuals.ForceTimeOfDayLoop then
                    Connections.Visuals.ForceTimeOfDayLoop:Disconnect()
                    Connections.Visuals.ForceTimeOfDayLoop = nil
                end
            end
        end,
        Function2 = function()
            TimeOfDaySlider.Visible = true
        end,
    })

    TimeOfDaySlider = CreateSlider({
        Text = "Time Of Day",
        Min = 0,
        Default = 12,
        Max = 24,
        Function = function(Val)
            ForceTimeOfDay = Val
            UpdateTimeOfDay()
        end,
        Function2 = function(Val)
            ForceTimeOfDay = Val
            UpdateTimeOfDay()
        end,
    })
end

do
	local function UpdateBrightness()
		if BrightnessEnabled then
            Lighting.Brightness = Brightness
        end
	end

    ToggleBrightness = Visuals:CreateToggle({
        Text = "Brightness",
        Info = "Changes The Brightness Of Lighting. (Brightness Makes It Very Bright)",
        Function = function(Args)
            BrightnessEnabled = not BrightnessEnabled
            ModuleToggled(ToggleBrightness, "Brightness", BrightnessEnabled, Args.NoNotify)
            if BrightnessEnabled then
                Lighting.Brightness = Brightness
                Connections.Visuals.SetBrightnessLoop = Lighting:GetPropertyChangedSignal("Brightness"):Connect(function()
                    Lighting.Brightness = Brightness
                end)
            else
                if Connections.Visuals.SetBrightnessLoop then
                    Connections.Visuals.SetBrightnessLoop:Disconnect()
                    Connections.Visuals.SetBrightnessLoop = nil
                end
            end
        end,
        Function2 = function()
            BrightnessSlider.Visible = true
            RebindBrightness.Visible = true
        end,
    })

    BrightnessSlider = CreateSlider({
        Text = "Brightness",
        Min = 0,
        Default = 3,
        Max = 30,
        Function = function(Val)
            Brightness = Val
            UpdateBrightness()
        end,
        Function2 = function(Val)
            Brightness = Val
            UpdateBrightness()
        end,
    })
    RebindBrightness = CreateRebindButton("Brightness")
end

ToggleWaterTransparency = Visuals:CreateToggle({
    Text = "Water Transparency",
    Info = "Sets Water Transparency To The Specified Value",
    MouseButton1Click = function(Args)
        WaterTransparencyEnabled = not WaterTransparencyEnabled
        ModuleToggled(ToggleWaterTransparency, "Water Transparency", WaterTransparencyEnabled, Args.NoNotify)
        if WaterTransparencyEnabled then
            local Terrain = workspace:FindFirstChildWhichIsA("Terrain")
            if not Terrain then return end
            Terrain.WaterTransparency = WaterTransparency
            Connections.Visuals.WaterTransparencyLoop = Terrain:GetPropertyChangedSignal("WaterTransparency"):Connect(function()
                Terrain.WaterTransparency = WaterTransparency
            end)
        else
            if Connections.Visuals.WaterTransparencyLoop then
                Connections.Visuals.WaterTransparencyLoop:Disconnect()
                Connections.Visuals.WaterTransparencyLoop = nil
            end
        end
    end,
    MouseButton2Click = function()
        WaterTransparencySlider.Visible = true
    end,
})

WaterTransparencySlider = CreateSlider({
    Text = "Water Transparency",
    Min = 0,
    Default = 0.5,
    Max = 1,
    Function = function(Val)
        WaterTransparency = Val
    end,
    Function2 = function(Val)
        WaterTransparency = Val
    end,
})

ToggleGeographicLatitude = Visuals:CreateToggle({
    Text = "Geographic Latitude",
    MouseButton1Click = function(Args)
        GeographicLatitudeEnabled = not GeographicLatitudeEnabled
        ModuleToggled(ToggleGeographicLatitude, "Geographic Latitude", GeographicLatitudeEnabled, Args.NoNotify)
        if GeographicLatitudeEnabled then
            Lighting.GeographicLatitude = GeographicLatitude
            Connections.Visuals.GeographicLatitudeConnection = Lighting:GetPropertyChangedSignal("GeographicLatitude"):Connect(function()
                Lighting.GeographicLatitude = GeographicLatitude
            end)
        else
            if Connections.Visuals.GeographicLatitudeConnection then
                Connections.Visuals.GeographicLatitudeConnection:Disconnect()
                Connections.Visuals.GeographicLatitudeConnection = nil
            end
        end
    end,
    MouseButton2Click = function()
        GeographicLatitudeSlider.Visible = true
    end,
})

GeographicLatitudeSlider = CreateSlider({
    Text = "Geographic Latitude",
    Min = 0,
    Default = 0,
    Max = 360,
    Function = function(Val)
        GeographicLatitude = Val
        if GeographicLatitudeEnabled then
            Lighting.GeographicLatitude = GeographicLatitude
        end
    end,
    Function2 = function(Val)
        GeographicLatitude = Val
        if GeographicLatitudeEnabled then
            Lighting.GeographicLatitude = GeographicLatitude
        end
    end,
})

ToggleColorShiftBottom = Visuals:CreateToggle({
    Text = "Color Shift Bottom",
    MouseButton1Click = function(Args)
        ColorShiftBottomEnabled = not ColorShiftBottomEnabled
        ModuleToggled(ToggleColorShiftBottom, "Color Shift Bottom", ColorShiftBottomEnabled, Args.NoNotify)
        if ColorShiftBottomEnabled then
            Lighting.ColorShift_Bottom = ColorShiftBottom
            Connections.Visuals.ColorShiftBottomConnection = Lighting:GetPropertyChangedSignal("ColorShift_Bottom"):Connect(function()
                Lighting.ColorShift_Bottom = ColorShiftBottom
            end)
        else
            if Connections.Visuals.ColorShiftBottomConnection then
                Connections.Visuals.ColorShiftBottomConnection:Disconnect()
                Connections.Visuals.ColorShiftBottomConnection = nil
            end
        end
    end,
    MouseButton2Click = function()
        ColorShiftBottomColorPicker.Visible = true
    end,
})

ColorShiftBottomColorPicker = CreateColorPicker({
    Text = "Color Shift Bottom Color",
    Function = function(Color)
        ColorShiftBottom = Color
        if ColorShiftBottomEnabled then
            Lighting.ColorShift_Bottom = ColorShiftBottom
        end
    end,
})

ToggleColorShiftTop = Visuals:CreateToggle({
    Text = "Color Shift Top",
    MouseButton1Click = function(Args)
        ColorShiftTopEnabled = not ColorShiftTopEnabled
        ModuleToggled(ToggleColorShiftTop, "Color Shift Top", ColorShiftTopEnabled, Args.NoNotify)
        if ColorShiftTopEnabled then
            Lighting.ColorShift_Top = ColorShiftTop
            Connections.Visuals.ColorShiftTopConnection = Lighting:GetPropertyChangedSignal("ColorShift_Top"):Connect(function()
                Lighting.ColorShift_Top = ColorShiftTop
            end)
        else
            if Connections.Visuals.ColorShiftTopConnection then
                Connections.Visuals.ColorShiftTopConnection:Disconnect()
                Connections.Visuals.ColorShiftTopConnection = nil
            end
        end
    end,
    MouseButton2Click = function()
        ColorShiftTopColorPicker.Visible = true
    end,
})

ColorShiftTopColorPicker = CreateColorPicker({
    Text = "Color Shift Top Color",
    Function = function(Color)
        ColorShiftTop = Color
        if ColorShiftTopEnabled then
            Lighting.ColorShift_Top = ColorShiftTop
        end
    end,
})

ToggleAmbient = Visuals:CreateToggle({
    Text = "Ambient",
    MouseButton1Click = function(Args)
        AmbientEnabled = not AmbientEnabled
        ModuleToggled(ToggleAmbient, "Ambient", AmbientEnabled, Args.NoNotify)
        if AmbientEnabled then
            Lighting.Ambient = Ambient
            Connections.Visuals.AmbientConnection = Lighting:GetPropertyChangedSignal("Ambient"):Connect(function()
                Lighting.Ambient = Ambient
            end)
        else
            if Connections.Visuals.AmbientConnection then
                Connections.Visuals.AmbientConnection:Disconnect()
                Connections.Visuals.AmbientConnection = nil
            end
        end
    end,
    MouseButton2Click = function()
        AmbientColorPicker.Visible = true
    end,
})

AmbientColorPicker = CreateColorPicker({
    Text = "Ambient Color",
    Function = function(Color)
        Ambient = Color
        if AmbientEnabled then
            Lighting.Ambient = Ambient
        end
    end,
})

ToggleOutdoorAmbient = Visuals:CreateToggle({
    Text = "Outdoor Ambient",
    MouseButton1Click = function(Args)
        OutdoorAmbientEnabled = not OutdoorAmbientEnabled
        ModuleToggled(ToggleOutdoorAmbient, "Outdoor Ambient", OutdoorAmbientEnabled, Args.NoNotify)
        if OutdoorAmbientEnabled then
            Lighting.OutdoorAmbient = OutdoorAmbient
            Connections.Visuals.OutdoorAmbientConnection = Lighting:GetPropertyChangedSignal("OutdoorAmbient"):Connect(function()
                Lighting.OutdoorAmbient = OutdoorAmbient
            end)
        else
            if Connections.Visuals.OutdoorAmbientConnection then
                Connections.Visuals.OutdoorAmbientConnection:Disconnect()
                Connections.Visuals.OutdoorAmbientConnection = nil
            end
        end
    end,
    MouseButton2Click = function()
        OutdoorAmbientColorPicker.Visible = true
    end,
})

OutdoorAmbientColorPicker = CreateColorPicker({
    Text = "Outdoor Ambient Color",
    Function = function(Color)
        OutdoorAmbient = Color
        if OutdoorAmbientEnabled then
            Lighting.OutdoorAmbient = OutdoorAmbient
        end
    end,
})

ToggleEnvironmentDiffuseScale = Visuals:CreateToggle({
    Text = "Environment Diffuse Scale",
    MouseButton1Click = function(Args)
        EnvironmentDiffuseScaleEnabled = not EnvironmentDiffuseScaleEnabled
        ModuleToggled(ToggleEnvironmentDiffuseScale, "Environment Diffuse Scale", EnvironmentDiffuseScaleEnabled, Args.NoNotify)
        if EnvironmentDiffuseScaleEnabled then
            Lighting.EnvironmentDiffuseScale = EnvironmentDiffuseScale
            Connections.Visuals.EnvironmentDiffuseScaleConnection = Lighting:GetPropertyChangedSignal("EnvironmentDiffuseScale"):Connect(function()
                Lighting.EnvironmentDiffuseScale = EnvironmentDiffuseScale
            end)
        else
            if Connections.Visuals.EnvironmentDiffuseScaleConnection then
                Connections.Visuals.EnvironmentDiffuseScaleConnection:Disconnect()
                Connections.Visuals.EnvironmentDiffuseScaleConnection = nil
            end
        end
    end,
    MouseButton2Click = function()
        EnvironmentDiffuseScaleSlider.Visible = true
    end,
})

EnvironmentDiffuseScaleSlider = CreateSlider({
    Text = "Environment Diffuse Scale",
    Min = 0,
    Default = 1,
    Max = 1,
    Function = function(Val)
        EnvironmentDiffuseScale = Val
        if EnvironmentDiffuseScaleEnabled then
            Lighting.EnvironmentDiffuseScale = EnvironmentDiffuseScale
        end
    end,
    Function2 = function(Val)
        EnvironmentDiffuseScale = Val
        if EnvironmentDiffuseScaleEnabled then
            Lighting.EnvironmentDiffuseScale = EnvironmentDiffuseScale
        end
    end,
})

ToggleEnvironmentSpecularScale = Visuals:CreateToggle({
    Text = "Environment Specular Scale",
    MouseButton1Click = function(Args)
        EnvironmentSpecularScaleEnabled = not EnvironmentSpecularScaleEnabled
        ModuleToggled(ToggleEnvironmentSpecularScale, "Environment Specular Scale", EnvironmentSpecularScaleEnabled, Args.NoNotify)
        if EnvironmentSpecularScaleEnabled then
            Lighting.EnvironmentSpecularScale = EnvironmentSpecularScale
            Connections.Visuals.EnvironmentSpecularScaleConnection = Lighting:GetPropertyChangedSignal("EnvironmentSpecularScale"):Connect(function()
                Lighting.EnvironmentSpecularScale = EnvironmentSpecularScale
            end)
        else
            if Connections.Visuals.EnvironmentSpecularScaleConnection then
                Connections.Visuals.EnvironmentSpecularScaleConnection:Disconnect()
                Connections.Visuals.EnvironmentSpecularScaleConnection = nil
            end
        end
    end,
    MouseButton2Click = function()
        EnvironmentSpecularScaleSlider.Visible = true
    end,
})

EnvironmentSpecularScaleSlider = CreateSlider({
    Text = "EnvironmentSpecularScale",
    Min = 0,
    Default = EnvironmentSpecularScale,
    Max = 1,
    Function = function(Val)
        EnvironmentSpecularScale = Val
        if EnvironmentSpecularScaleEnabled then
            Lighting.EnvironmentSpecularScale = EnvironmentSpecularScale
        end
    end,
    Function2 = function(Val)
        EnvironmentSpecularScale = Val
        if EnvironmentSpecularScaleEnabled then
            Lighting.EnvironmentSpecularScale = EnvironmentSpecularScale
        end
    end,
})

ToggleShadowSoftness = Visuals:CreateToggle({
    Text = "Shadow Softness",
    MouseButton1Click = function(Args)
        ShadowSoftnessEnabled = not ShadowSoftnessEnabled
        ModuleToggled(ToggleShadowSoftness, "Shadow Softness", ShadowSoftnessEnabled, Args.NoNotify)
        if ShadowSoftnessEnabled then
            Lighting.ShadowSoftness = ShadowSoftness
            Connections.Visuals.ShadowSoftnessConnection = Lighting:GetPropertyChangedSignal("ShadowSoftness"):Connect(function()
                Lighting.ShadowSoftness = ShadowSoftness
            end)
        else
            if Connections.Visuals.ShadowSoftnessConnection then
                Connections.Visuals.ShadowSoftnessConnection:Disconnect()
                Connections.Visuals.ShadowSoftnessConnection = nil
            end
        end
    end,
    MouseButton2Click = function()
        ShadowSoftnessSlider.Visible = true
    end,
})

ShadowSoftnessSlider = CreateSlider({
    Text = "Shadow Softness",
    Min = 0,
    Default = ShadowSoftness,
    Max = 1,
    Function = function(Val)
        ShadowSoftness = Val
    end,
    Function2 = function(Val)
        ShadowSoftness = Val
    end,
})

ToggleExposureCompensation = Visuals:CreateToggle({
    Text = "Exposure Compensation",
    MouseButton1Click = function(Args)
        ExposureCompensationEnabled = not ExposureCompensationEnabled
        ModuleToggled(ToggleExposureCompensation, "Exposure Compensation", ExposureCompensationEnabled, Args.NoNotify)
        if ExposureCompensationEnabled then
            Lighting.ExposureCompensation = ExposureCompensation
            Connections.ExposureCompensationConnection = Lighting:GetPropertyChangedSignal("ExposureCompensation"):Connect(function()
                Lighting.ExposureCompensation = ExposureCompensation
            end)
        else
            if Connections.ExposureCompensationConnection then
                Connections.ExposureCompensationConnection:Disconnect()
                Connections.ExposureCompensationConnection = nil
            end
        end
    end,
    MouseButton2Click = function()
        ExposureCompensationSlider.Visible = true
    end,
})

ExposureCompensationSlider = CreateSlider({
    Text = "Exposure Compensation",
    Min = -3,
    Default = 0,
    Max = 3,
    Function = function(Val)
        ExposureCompensation = Val
    end,
    Function2 = function(Val)
        ExposureCompensation = Val
    end,
})

TogglePlayerHighlightESP = Visuals:CreateToggle({
	Text = "Player Highlight ESP",
	Info = "Uses Roblox Highlights To Make ESP.",
	Function = function(Args)
		PlayerHighlightESP = not PlayerHighlightESP
		ModuleToggled(TogglePlayerHighlightESP, "Player Highlight ESP", PlayerHighlightESP, Args.NoNotify)
		if PlayerHighlightESP then
			for i, Player in pairs(Players:GetPlayers()) do
                if Player == Plr then continue end
				local PlayerChar = GetChar(Player)
				local Highlight = Instance.new("Highlight")
				Highlight.Name = Player.Name .. "_PlayerHighlightESP"
                Highlight.Parent = EspFolder

				Connections.Visuals["PlayerHighlightEspLoop_" .. Player.Name] = RunService.RenderStepped:Connect(function()
					if AutomaticPlayerHighlightEspOutlineColor then
						Highlight.OutlineColor = Player.TeamColor.Color
					else
                        if IsTeammate(Player) then
                            Highlight.OutlineColor = PlayerHighlightEspTeammateOutlineColor
                        else
                            Highlight.OutlineColor = PlayerHighlightEspEnemyOutlineColor
                        end
					end
                    Highlight.FillColor = Highlight.OutlineColor
                    Highlight.OutlineTransparency = PlayerHighlightEspOutlineTransparency
                    Highlight.FillTransparency = PlayerHighlightEspFillTransparency
					Highlight.Adornee = PlayerChar
				end)
			end
		else
			for Name, Connection in pairs(Connections.Visuals) do
                if string.find(Name, "PlayerHighlightEspLoop") then
                    Connection:Disconnect()
					Connection = nil
                end
			end
			for i, Highlight in pairs(EspFolder:GetChildren()) do
				if string.find(Highlight.Name, "_PlayerHighlightESP") then
					Highlight:Destroy()
				end
			end
		end
	end,
	Function2 = function()
		RebindPlayerHighlightESP.Visible = true
		PlayerHighlightEspEnemyFillColorPicker.Visible = true
		PlayerHighlightEspEnemyOutlineColorPicker.Visible = true
		PlayerHighlightEspTeammateOutlineColorPicker.Visible = true
		PlayerHighlightEspTeammateFillColorPicker.Visible = true
		PlayerHighlightEspOutlineTransparencySlider.Visible = true
		PlayerHighlightEspFillTransparencySlider.Visible = true
		ToggleAutomaticPlayerHighlightEspOutlineColor.MainFrame.Visible = true
		ToggleAutomaticPlayerHighlightEspFillColor.MainFrame.Visible = true
	end,
})

RebindPlayerHighlightESP = CreateRebindButton("PlayerHighlightESP")

PlayerHighlightEspTeammateOutlineColorPicker = CreateColorPicker({
    Text = "Teammate Outline Color",
    Function = function(Color)
        PlayerHighlightEspTeammateOutlineColor = Color
    end,
})

PlayerHighlightEspTeammateFillColorPicker = CreateColorPicker({
    Text = "Teammate Fill Color",
    Function = function(Color)
        PlayerHighlightEspTeammateFillColor = Color
    end,
})

PlayerHighlightEspEnemyOutlineColorPicker = CreateColorPicker({
    Text = "Enemy Outline Color",
    Function = function(Color)
        PlayerHighlightEspEnemyOutlineColor = Color
    end,
})

PlayerHighlightEspEnemyFillColorPicker = CreateColorPicker({
    Text = "Enemy Fill Color",
    Function = function(Color)
        PlayerHighlightEspEnemyFillColor = Color
    end,
})

PlayerHighlightEspOutlineTransparencySlider = CreateSlider({
    Text = "Outline Transparency",
    Min = 0,
    Default = 0,
    Max = 1,
    Function = function(Val)
        PlayerHighlightEspOutlineTransparency = Val
    end,
    Function2 = function(Val)
        PlayerHighlightEspOutlineTransparency = Val
    end,
})

PlayerHighlightEspFillTransparencySlider = CreateSlider({
    Text = "Fill Transparency",
    Min = 0,
    Default = 1,
    Max = 1,
    Function = function(Val)
        PlayerHighlightEspFillTransparency = Val
    end,
    Function2 = function(Val)
        PlayerHighlightEspFillTransparency = Val
    end,
})

ToggleAutomaticPlayerHighlightEspOutlineColor = CreateToggle({
    Text = "Automatic Outline Color",
    Function = function()
        AutomaticPlayerHighlightEspOutlineColor = not AutomaticPlayerHighlightEspOutlineColor
        ToggleButtonColor(ToggleAutomaticPlayerHighlightEspOutlineColor, AutomaticPlayerHighlightEspOutlineColor)
    end,
})

ToggleAutomaticPlayerHighlightEspFillColor = CreateToggle({
    Text = "Automatic Fill Color",
    Function = function()
        AutomaticPlayerHighlightEspFillColor = not AutomaticPlayerHighlightEspFillColor
        ToggleButtonColor(ToggleAutomaticPlayerHighlightEspFillColor, AutomaticPlayerHighlightEspFillColor)
    end,
})

TogglePlayerTracers = Visuals:CreateToggle({
	Text = "Player Tracers",
	Info = "Creates Lines From The Specified Position To Players.",
	Function = function(Args)
		PlayerTracers = not PlayerTracers
		ModuleToggled(TogglePlayerTracers, "Player Tracers", PlayerTracers, Args.NoNotify)
	end,
	Function2 = function()
		RebindPlayerTracers.Visible = true
		PlayerTracersXPosSlider.Visible = true
		PlayerTracersYPosSlider.Visible = true
		PlayerTracersThicknessSlider.Visible = true
		PlayerTracersTeammateColorPicker.Visible = true
		PlayerTracersEnemyColorPicker.Visible = true
		ToggleAutomaticPlayerTracersColor.MainFrame.Visible = true
	end,
})

RebindPlayerTracers = CreateRebindButton("PlayerTracers")
PlayerTracersXPosSlider = CreateSlider({
    Text = "Tracer X From",
    Min = 0,
    Default = PlayerTracersPosition.X,
    Max = 1920,
    Function = function(Val)
        PlayerTracersPosition = Vector2.new(Val, PlayerTracersPosition.Y)
    end,
    Function2 = function(Val)
        PlayerTracersPosition = Vector2.new(Val, PlayerTracersPosition.Y)
    end,
})

PlayerTracersYPosSlider = CreateSlider({
    Text = "Tracers Y From",
    Min = 0,
    Default = PlayerTracersPosition.Y,
    Max = 1080,
    Function = function(Val)
        PlayerTracersPosition = Vector2.new(PlayerTracersPosition.X, Val)
    end,
    Function2 = function(Val)
        PlayerTracersPosition = Vector2.new(PlayerTracersPosition.X, Val)
    end,
})

PlayerTracersThicknessSlider = CreateSlider({
    Text = "Tracers Thickness",
    Min = 1,
    Default = 1,
    Max = 30,
    Function = function(Val)
        PlayerTracersThickness = Val
    end,
    Function2 = function(Val)
        PlayerTracersThickness = Val
    end,
})

PlayerTracersTeammateColorPicker = CreateColorPicker({
    Text = "Tracers Teammate Color",
    Function = function(Color)
        PlayerTracersTeammateColor = Color
    end,
})

PlayerTracersEnemyColorPicker = CreateColorPicker({
    Text = "Tracers Enemy Color",
    Function = function(Color)
        PlayerTracersEnemyColor = Color
    end,
})

ToggleAutomaticPlayerTracersColor = CreateToggle({
    Text = "Automatic Tracer Color",
    Function = function()
        AutomaticPlayerTracersColor = not AutomaticPlayerTracersColor
        ToggleButtonColor(ToggleAutomaticPlayerTracersColor, AutomaticPlayerTracersColor)
    end,
})

do
    function IsTeammate(Player)
        if IsFleeTheFacility then
            local Char = GetChar(Plr)
            local PlayerChar = GetChar(Player)
            if Char and PlayerChar then
                if Char:FindFirstChild("Hammer") then
                    return PlayerChar:FindFirstChild("Hammer") ~= nil
                else
                    return PlayerChar:FindFirstChild("Hammer") == nil
                end
            end
            return false
        else
            if Player.Team == Plr.Team then
                return true
            end
            return false
        end
    end
    
    function EspPlayer(Player)
        local Text = TidalWaveDrawing.new("Text", DrawingFolder)
        Text.Centered = true
        local Square = TidalWaveDrawing.new("Square", DrawingFolder)
        Square.Centered = true
        local Tracer = TidalWaveDrawing.new("Line", DrawingFolder)
        local PlayerRemoved = false

        task.spawn(function()
            if Connections.Visuals[Player.Name .. "_ESP"] then
                Connections.Visuals[Player.Name .. "_ESP"] = nil
                task.wait()
            end

            Connections.Visuals[Player.Name .. "_ESP"] = true

            while Player and Connections.Visuals[Player.Name .. "_ESP"] do
                RunService.RenderStepped:Wait()
                local PlayerChar = GetChar(Player)
                local PlayerRoot = GetRootPart(PlayerChar)
                local PlayerHumanoid = GetHumanoid(PlayerChar)
                local Char = GetChar(Plr)
                local Root = GetRootPart(Char)

                if PlayerChar and PlayerRoot and PlayerHumanoid and PlayerHumanoid.Health > 0 and Char and Root then
                    local Vector, OnScreen = Camera:WorldToViewportPoint(PlayerRoot.Position)
                    if OnScreen then
                        if PlayerDrawingESP then
                            local HeadPos = Camera:WorldToViewportPoint(PlayerRoot.Position + Vector3.new(0, 1, 0))
                            local LegPos = Camera:WorldToViewportPoint(PlayerRoot.Position + Vector3.new(0, -4, 0))
                            Square.Size = Vector2.new((PlayerDrawingEspSize.X / Vector.Z), (HeadPos.Y - LegPos.Y) - PlayerDrawingEspSize.Y)
                            Square.Position = Vector
                            Square.Filled = PlayerDrawingEspFilled
                            Square.OutlineThickness = PlayerDrawingEspThickness
                            if AutomaticPlayerDrawingEspColor then
                                Square.Color = Player.TeamColor.Color
                                Square.OutlineColor = Player.TeamColor.Color
                            else
                                if IsTeammate(Player) then
                                    Square.Color = PlayerDrawingEspTeammateColor
                                    Square.OutlineColor = PlayerDrawingEspTeammateColor
                                else
                                    Square.Color = PlayerDrawingEspEnemyColor
                                    Square.OutlineColor = PlayerDrawingEspEnemyColor
                                end
                            end
                            Square.Visible = true
                        else
                            Square.Visible = false
                        end
                        if PlayerTracers then
                            Tracer.From = PlayerTracersPosition
                            Tracer.To = Vector
                            if AutomaticPlayerTracersColor then
                                Tracer.Color = Player.TeamColor.Color
                            else
                                if IsTeammate(Player) then
                                    Tracer.Color = PlayerTracersTeammateColor
                                else
                                    Tracer.Color = PlayerTracersEnemyColor
                                end
                            end
                            Tracer.Thickness = PlayerTracersThickness
                            Tracer.Visible = true
                        else
                            Tracer.Visible = false
                        end
                        Text.Position = Vector
                        if AutomaticEspTextColor then
                            Text.TextColor3 = Player.TeamColor.Color
                        else
                            if IsTeammate(Player) then
                                Text.TextColor3 = EspTeammateTextColor
                            else
                                Text.TextColor3 = EspEnemyTextColor
                            end
                        end
                        Text.TextSize = PlayerEspTextSize
                        Text.Text = ""
                        if WalkSpeedESP then
                            Text.Text = "SPD: " .. PlayerHumanoid.WalkSpeed .. " | "
                        end
                        if JumpPowerESP then
                            Text.Text = Text.Text .. "JP: " .. PlayerHumanoid.JumpPower .. " | "
                        end
                        if NameESP then
                            Text.Text = Text.Text .. "@" .. Player.Name .. " | " .. Player.DisplayName .. " | "
                        end
                        if DistanceESP then
                            Text.Text = Text.Text .. "Studs: " .. tostring(math.round((Root.Position - PlayerRoot.Position).Magnitude)) .. " | "
                        end
                        local Health = Player:GetAttribute("Health") and math.round(Player:GetAttribute("Health")) or PlayerHumanoid.Health
                        if HealthESP then
                            Text.Text = Text.Text .. "HP: " .. tostring(Health) .. " | "
                        end
                        if KillESP and Player:GetAttribute("Kills") then
                            Text.Text = Text.Text .. "Kills: " .. tostring(Player:GetAttribute("Kills")) .. " | "
                        end
                        if LevelESP and Player:GetAttribute("Level") then
                            Text.Text = Text.Text .. "LVL: " .. tostring(Player:GetAttribute("Level")) .. " | "
                        end
                        if WinsESP and Player:GetAttribute("Wins") then
                            Text.Text = Text.Text .. "Wins: " .. tostring(Player:GetAttribute("Wins")) .. " | "
                        end
                        if WinStreakESP and Player:GetAttribute("WinStreak") then
                            Text.Text = Text.Text .. "WS: " .. tostring(Player:GetAttribute("WinStreak")) .. " | "
                        end
                        if RankESP and Player:GetAttribute("Rank") then
                            Text.Text = Text.Text .. "Rank: " .. Player:GetAttribute("Rank") .. " | "
                        end
                        if TitleESP and Player:GetAttributed("Title") then
                            Text.Text = Text.Text .. "Title: " .. Player:GetAttributed("Title") .. " | "
                        end
                        if HelmetESP and Player:GetAttribute("Helmet") then
                            Text.Text = Text.Text .. "Helmet: " .. Player:GetAttribute("Helmet") .. " | "
                        end
                        if ChestplateESP and Player:GetAttribute("Chestplate") then
                            Text.Text = Text.Text .. "Chestplate: " .. Player:GetAttribute("Chestplate") .. " | "
                        end
                        if LeggingESP and Player:GetAttribute("Leggings") then
                            Text.Text = Text.Text .. "Leggings: " .. Player:GetAttribute("Leggings") .. " | "
                        end
                        if HelmetESP or ChestplateESP or LeggingESP then
                            Text.Text = Text.Text .. "\n"
                        end
                        Text.Visible = true
                    else
                        Text.Visible = false
                        Tracer.Visible = false
                        Square.Visible = false
                    end
                else
                    Tracer.Visible = false
                    Text.Visible = false
                    Square.Visible = false
                end
            end

            if not Text:IsRemoved() then
                Text:Remove()
            end
            if not Square:IsRemoved() then
                Square:Remove()
            end
            if not Tracer:IsRemoved() then
                Tracer:Remove()
            end
            if Connections.Visuals[Player.Name .. "_ESP"] then
                Connections.Visuals[Player.Name .. "_ESP"] = nil
            end
        end)
    end

    function UnEspPlayer(Player)
        if Connections.Visuals[Player.Name .. "_ESP"] then
            Connections.Visuals[Player.Name .. "_ESP"] = nil
        end
    end
end

for i, Player in ipairs(Players:GetPlayers()) do
    if Player == Plr then continue end
	EspPlayer(Player)
end

Connections.Visuals.MainEspPlayerAddedConnection = Players.PlayerAdded:Connect(function(Player)
    EspPlayer(Player)
end)

do
    PlayerEspTextSizeSlider = CreateSlider({
        Text = "Text Size",
        Min = 0,
        Default = PlayerEspTextSize,
        Max = 100,
        Function = function(Val)
            PlayerEspTextSize = Val
        end,
        Function2 = function(Val)
            PlayerEspTextSize = Val
        end,
    })

    ToggleHealthESP = Visuals:CreateToggle({
        Text = "Health ESP",
        Info = "Shows Players Health.",
        Function = function(Args)
            HealthESP = not HealthESP
            ModuleToggled(ToggleHealthESP, "Health ESP", HealthESP, Args.NoNotify)
        end,
        Function2 = function()
            PlayerEspTextSizeSlider.Visible = true
        end
    })

    ToggleNameESP = Visuals:CreateToggle({
        Text = "Name ESP",
        Info = "Shows Players Names.",
        Function = function(Args)
            NameESP = not NameESP
            ModuleToggled(ToggleNameESP, "Name ESP", NameESP, Args.NoNotify)
        end,
        Function2 = function()
            PlayerEspTextSizeSlider.Visible = true
        end
    })

    ToggleDistanceESP = Visuals:CreateToggle({
        Text = "Distance ESP",
        Info = "Shows The Distance Between You And Players",
        Function = function(Args)
            DistanceESP = not DistanceESP
            ModuleToggled(ToggleDistanceESP, "Distance ESP", DistanceESP, Args.NoNotify)
        end,
        Function2 = function()
            PlayerEspTextSizeSlider.Visible = true
        end
    })

    ToggleWalkSpeedESP = Visuals:CreateToggle({
        Text = "Speed ESP",
        Info = "Shows Players Walk Speed",
        Function = function(Args)
            WalkSpeedESP = not WalkSpeedESP
            ModuleToggled(ToggleWalkSpeedESP, "Walk Speed ESP", WalkSpeedESP, Args.NoNotify)
        end,
        Function2 = function()
            PlayerEspTextSizeSlider.Visible = true
        end
    })

    ToggleJumpPowerESP = Visuals:CreateToggle({
        Text = "JP ESP",
        Info = "Shows Players Jump Power",
        Function = function(Args)
            JumpPowerESP = not JumpPowerESP
            ModuleToggled(ToggleJumpPowerESP, "Jump Power ESP", JumpPowerESP, Args.NoNotify)
        end,
        Function2 = function()
            PlayerEspTextSizeSlider.Visible = true
        end
    })
end

RebindPlayerDrawingESP = CreateRebindButton("PlayerDrawingESP")
PlayerDrawingEspThicknessSlider = CreateSlider({
    Text = "Thickness",
    Min = 1,
    Default = 1,
    Max = 100,
    Function = function(Val)
        PlayerDrawingEspThickness = Val
    end,
    Function2 = function(Val)
        PlayerDrawingEspThickness = Val
    end,
})

PlayerDrawingEspTeammateColorPicker = CreateColorPicker({
    Text = "Teammate Color",
    Function = function(Color)
        PlayerDrawingEspTeammateColor = Color
    end,
})

PlayerDrawingEspEnemyColorPicker = CreateColorPicker({
    Text = "Enemy Color",
    Function = function(Color)
        PlayerDrawingEspEnemyColor = Color
    end,
})

ToggleAutomaticPlayerDrawingEspColor = CreateToggle({
    Text = "Automatic Color",
    Function = function()
        AutomaticPlayerDrawingEspColor = not AutomaticPlayerDrawingEspColor
        ToggleButtonColor(ToggleAutomaticPlayerDrawingEspColor, AutomaticPlayerDrawingEspColor)
    end,
})

TogglePlayerDrawingEspFilled = CreateToggle({
    Text = "Box Filled",
    Function = function()
        PlayerDrawingEspFilled = not PlayerDrawingEspFilled
        ToggleButtonColor(TogglePlayerDrawingEspFilled, PlayerDrawingEspFilled)
    end,
})

PlayerDrawingEspSizeXSlider = CreateSlider({
    Text = "Box Size X",
    Min = 0,
    Default = PlayerDrawingEspSize.X,
    Max = 3000,
    Function = function(Val)
        PlayerDrawingEspSize = Vector2.new(Val, PlayerDrawingEspSize.Y)
    end,
    Function2 = function(Val)
        PlayerDrawingEspSize = Vector2.new(Val, PlayerDrawingEspSize.Y)
    end
})

PlayerDrawingEspSizeYSlider = CreateSlider({
    Text = "Box Size Y",
    Min = 0,
    Default = 0,
    Max = 300,
    Function = function(Val)
        PlayerDrawingEspSize = Vector2.new(PlayerDrawingEspSize.X, Val)
    end,
    Function2 = function(Val)
        PlayerDrawingEspSize = Vector2.new(PlayerDrawingEspSize.X, Val)
    end
})

TogglePlayerDrawingESP = Visuals:CreateToggle({
	Text = "Player Drawing ESP",
	Info = "Creates ESP Using Drawings Instead Of Using Roblox Highlights.",
	Function = function(Args)
		PlayerDrawingESP = not PlayerDrawingESP
		ModuleToggled(TogglePlayerDrawingESP, "Player Drawing ESP", PlayerDrawingESP, Args.NoNotify)
	end,
	Function2 = function()
		RebindPlayerDrawingESP.Visible = true
		PlayerDrawingEspThicknessSlider.Visible = true
		PlayerDrawingEspTeammateColorPicker.Visible = true
		PlayerDrawingEspEnemyColorPicker.Visible = true
		TogglePlayerDrawingEspFilled.MainFrame.Visible = true
		PlayerDrawingEspSizeXSlider.Visible = true
		PlayerDrawingEspSizeYSlider.Visible = true
		ToggleAutomaticPlayerDrawingEspColor.MainFrame.Visible = true
	end,
})

do
    local Highlights = {}

	local function HighlightPart(Part)
		if PartEspHighlightMode == "Highlight" then
			local Highlight = Instance.new("Highlight")
			Highlight.OutlineColor = PartEspOutlineColor
			Highlight.OutlineTransparency = PartEspOutlineTransparency
			Highlight.FillColor = PartEspFillColor
			Highlight.FillTransparency = PartEspFillTransparency
			Highlight.Adornee = Part
			Highlight.Name = Part.Name .. "_PartEspHighlight"
            Highlight.Parent = EspFolder
            table.insert(Highlights, Highlight)
		elseif PartEspHighlightMode == "BoxHandleAdornment" then
			local BoxHandleAdornment = Instance.new("BoxHandleAdornment")
			BoxHandleAdornment.Adornee = Part
			BoxHandleAdornment.AlwaysOnTop = true
			BoxHandleAdornment.ZIndex = 1
			BoxHandleAdornment.Size = Part.Size
			BoxHandleAdornment.Name = Part.Name .. "_PartEspBoxHandleAdornment"
			BoxHandleAdornment.Color3 = PartEspFillColor
			BoxHandleAdornment.Transparency = PartEspFillTransparency
            BoxHandleAdornment.Parent = EspFolder
            table.insert(Highlights, BoxHandleAdornment)
		end
	end
	
	TogglePartESP = Visuals:CreateToggle({
		Text = "Part ESP",
		Info = "Adds Highlights To Parts",
		Function = function(Args)
			PartESP = not PartESP
			ModuleToggled(TogglePartESP, "Part ESP", PartESP, Args.NoNotify)
			if PartESP then
				Connections.Visuals.PartEspLoop = workspace.DescendantAdded:Connect(function(Descendant)
                    local Name = string.lower(Descendant.Name)
                    local IsA = Descendant:IsA("BasePart") or Descendant:IsA("Model")
					if PartEspMode == "Folder" and PartEspPath then
						if Descendant:FindFirstAncestor(PartEspPath.Name) and IsA then
							HighlightPart(Descendant)
						end
					elseif PartEspMode == "ExactName" and PartEspName then
						local Char = GetChar(Plr)
						if Char and Descendant:FindFirstAncestor(Char.Name) then return end
						if Name == PartEspName and IsA then
							HighlightPart(Descendant)
						end
					elseif PartEspMode == "ContainsString" and PartEspName then
						local Char = GetChar(Plr)
						if Char and Descendant:FindFirstAncestor(Char.Name) then return end
						if string.find(Name, PartEspName) or string.find(PartEspName, Name) and IsA then
							HighlightPart(Descendant)
						end
					end
				end)
				
				if PartEspMode == "Folder" and PartEspPath then
					for i, Part in pairs(PartEspPath:GetDescendants()) do
						if Part:IsA("BasePart") or Part:IsA("Model") then
							HighlightPart(Part)
						end
					end
				elseif PartEspMode == "ExactName" then
					local Char = GetChar(Plr)
					for i, Part in pairs(workspace:GetDescendants()) do
						if Char and Part:FindFirstAncestor(Char.Name) then continue end
                        local Name = string.lower(Part.Name)
						if Name == PartEspName and (Part:IsA("BasePart") or Part:IsA("Model")) then
							HighlightPart(Part)
						end
					end
				elseif PartEspMode == "ContainsString" and PartEspName then
					local Char = GetChar(Plr)
					for i, Part in pairs(workspace:GetDescendants()) do
						if Char and Part:FindFirstAncestor(Char.Name) then continue end
                        local Name = string.lower(Part.Name)
						if (string.find(Name, PartEspName) or string.find(PartEspName, Name)) and (Part:IsA("BasePart") or Part:IsA("Model")) then
							HighlightPart(Part)
						end
					end
				end
			else
				if Connections.Visuals.PartEspLoop then
					Connections.Visuals.PartEspLoop:Disconnect()
                    Connections.Visuals.PartEspLoop = nil
				end
				for i, v in ipairs(Highlights:GetChildren()) do
					v:Destroy()
                    v = nil
				end
                table.clear(Highlights)
			end
		end,
		Function2 = function()
			RebindPartESP.Visible = true
			PartEspFillColorPicker.Visible = true
			PartEspOutlineColorPicker.Visible = true
			PartEspFillTransparencySlider.Visible = true
			PartEspOutlineTransparencySlider.Visible = true
			PartEspModeDropdown.MainFrame.Visible = true
			PartEspPathTextbox.MainFrame.Visible = true
			PartEspNameTextbox.MainFrame.Visible = true
			PartEspHighlightModeDropdown.MainFrame.Visible = true
		end,
	})

    local function UpdatePartEsp()
        for i, v in ipairs(Highlights) do
            if v:IsA("Highlight") then
                v.FillColor = PartEspFillColor
                v.OutlineColor = PartEspOutlineColor
                v.FillTransparency = PartEspFillTransparency
                v.OutlineTransparency = PartEspOutlineTransparency
            elseif v:IsA("BoxHandleAdornment") then
                v.Transparency = PartEspFillTransparency
                v.Color3 = PartEspFillColor
            end
        end
    end

    RebindPartESP = CreateRebindButton("PartESP")

    PartEspFillColorPicker = CreateColorPicker({
        Text = "Part ESP Fill Color",
        Function = function(Color)
            PartEspFillColor = Color
            UpdatePartEsp()
        end,
    })

    PartEspOutlineColorPicker = CreateColorPicker({
        Text = "Part ESP Outline Color",
        Function = function(Color)
            PartEspOutlineColor = Color
            UpdatePartEsp()
        end,
    })
    
    PartEspFillTransparencySlider = CreateSlider({
        Text = "Part ESP Fill Transparency",
        Min = 0,
        Default = 1,
        Max = 1,
        Function = function(Val)
            PartEspFillTransparency = Val
            UpdatePartEsp()
        end,
        Function2 = function(Val)
            PartEspFillTransparency = Val
            UpdatePartEsp()
        end,
    })

    PartEspOutlineTransparencySlider = CreateSlider({
        Text = "Part ESP Outline Transparency",
        Min = 0,
        Default = 0,
        Max = 1,
        Function = function(Val)
            PartEspOutlineTransparency = Val
            UpdatePartEsp()
        end,
        Function2 = function(Val)
            PartEspOutlineTransparency = Val
            UpdatePartEsp()
        end,
    })

    PartEspModeDropdown = CreateDropdown({
        Text = "Part ESP Mode",
        Default = "Folder",
        AutoUpdateText = true,
    })
    PartEspModeDropdown:CreateButton({
        Text = "Folder",
        Function = function()
            PartEspMode = "Folder"
        end,
    })
    PartEspModeDropdown:CreateButton({
        Text = "Exact Name",
        Function = function()
            PartEspMode = "ExactName"
        end,
    })
    PartEspModeDropdown:CreateButton({
        Text = "Contains String",
        Function = function()
            PartEspMode = "ContainsString"
        end,
    })

    PartEspHighlightModeDropdown = CreateDropdown({
        Text = "Part ESP Highlight Mode",
        Default = "Highlight",
        AutoUpdateText = true,
    })
    PartEspHighlightModeDropdown:CreateButton({
        Text = "Highlight",
        Function = function()
            PartEspHighlightMode = "Highlight"
        end,
    })
    PartEspHighlightModeDropdown:CreateButton({
        Text = "Box Handle Adornment",
        Function = function()
            PartEspHighlightMode = "BoxHandleAdornment"
        end,
    })

    PartEspPathTextbox = CreateTextbox({
        TextLabelText = "Part ESP Path",
        PlaceholderText = "Path",
        Info = "Enter A Folder To Loop Through",
        MouseButton1Click = function(Args)
            local Success, Er = pcall(function()
                PartEspPath = loadstring("return " .. Args.Text)()
            end)
            if Success then
                Notify({
                    Text = `Set "PartEspPath" To {GetFullName(PartEspPath)}`,
                })
            else
                Notify({
                    Text = Er,
                })
            end
        end,
    })

    PartEspNameTextbox = CreateTextbox({
        TextLabelText = "Part ESP Name",
        PlaceholderText = "Part Name",
        Info = "Adds Highlight To All Parts That Have The Name Of The Specified String",
        FocusLost = function(Args)
            PartEspName = string.lower(Args.Text)
        end,
    })
end

ToggleNoRender = Visuals:CreateToggle({
	Text = "No Render",
	Info = "Removes 3D Rendering",
	MouseButton1Click = function()
		NoRender = not NoRender
		ToggleButtonColor(ToggleNoRender, NoRender)
		pcall(function()
			if NoRender then
				RunService:Set3dRenderingEnabled(false)
			else
				RunService:Set3dRenderingEnabled(true)
			end
		end)
	end,
})

Toggle2022Materials = Visuals:CreateToggle({
	Text = "2022 Materials",
	Info = "Changes The Materials To 2022 Materials",
	MouseButton1Click = function()
		Material2022 = not Material2022
		ToggleButtonColor(Toggle2022Materials, Material2022)
		if Material2022 then
            if SetHidden then
                SetHidden(MaterialService, "Use2022Materials", true)
            else
                Notify({
                    Text = 'Your Exploit Doesnt Support "SetHiddenProperty"',
                    Duration = 5,
                })
            end
        else
            if SetHidden then
                SetHidden(MaterialService, "Use2022Materials", false)
            else
                Notify({
                    Text = 'Your Exploit Doesnt Support "SetHiddenProperty"',
                    Duration = 5,
                })
            end
        end
	end,
})

TogglePruchasePrompts = Visuals:CreateToggle({
	Text = "No Purchase Prompts",
	Info = "Turns On/Off Purchase Prompts",
	MouseButton1Click = function(Args)
		NoPurchasePrompts = not NoPurchasePrompts
		ModuleToggled(TogglePruchasePrompts, "No Purchase Prompts", NoPurchasePrompts, Args.NoNotify)
		pcall(function()
			CoreGui.PurchasePrompt.Enabled = not NoPurchasePrompts
		end)
	end,
})

ToggleInvisibleParts = Visuals:CreateToggle({
	Text = "Invisible Parts",
	Info = "Shows Invisible Parts",
	MouseButton1Click = function()
		InvisPartsEnabled = not InvisPartsEnabled
		ToggleButtonColor(ToggleInvisibleParts, InvisPartsEnabled)
		if InvisPartsEnabled then
			for i, v in pairs(workspace:GetDescendants()) do
				if v:IsA("BasePart") and v.Transparency == 1 then
					if not table.find(Connections.Storage.ShownParts, v) then
						table.insert(Connections.Storage.ShownParts, v)
					end
					v.Transparency = 0
				end
			end
		else
			for i, v in pairs(Connections.Storage.ShownParts) do
				v.Transparency = 1
			end
		end
	end,
})

do
    local function UpdateFov()
		if not LoopFovEnabled then return end
		Camera.FieldOfView = Fov
	end
    
    ToggleLoopFov = Visuals:CreateToggle({
        Text = "Fov",
        Info = "Sets Fov To The Specified Value",
        Function = function(Args)
            LoopFovEnabled = not LoopFovEnabled
            ModuleToggled(ToggleLoopFov, "Part ESP", LoopFovEnabled, Args.NoNotify)
            if LoopFovEnabled then
                Camera.FieldOfView = Fov
                Connections.Other.FovLoop = Camera:GetPropertyChangedSignal("FieldOfView"):Connect(function()
                    Camera.FieldOfView = Fov
                end)
            else
                if Connections.Other.FovLoop then
                    Connections.Other.FovLoop:Disconnect()
                end
            end
        end,
        Function2 = function()
            ChangeFovSlider.Visible = true
        end,
    })

    ChangeFovSlider = CreateSlider({
        Text = "Fov",
        Min = 0,
        Default = 70,
        Max = 120,
        Function = function(Val)
            Fov = Val
            UpdateFov()
        end,
        Function2 = function(Val)
            Fov = Val
            UpdateFov()
        end,
    })
end

ToggleLoopCameraZoom = Visuals:CreateToggle({
	Text = "Camera Zoom",
	Info = "Loop Sets Camera Min Zoom And Max Zoom",
	Function = function(Args)
		LoopCameraZoom = not LoopCameraZoom
		ModuleToggled(ToggleLoopCameraZoom, "Loop Camera Zoom", LoopCameraZoom, Args.NoNotify)
		if LoopCameraZoom then
			Connections.Other.CameraMaxZoomLoop = Plr:GetPropertyChangedSignal("CameraMaxZoomDistance"):Connect(function()
				Plr.CameraMaxZoomDistance = MaxZoom
			end)
			Connections.Other.CameraMinZoomLoop = Plr:GetPropertyChangedSignal("CameraMinZoomDistance"):Connect(function()
				Plr.CameraMinZoomDistance = MinZoom
			end)
		else
			if Connections.Other.CameraMaxZoomLoop then
				Connections.Other.CameraMaxZoomLoop:Disconnect()
			end
			if Connections.Other.CameraMinZoomLoop then
				Connections.Other.CameraMinZoomLoop:Disconnect()
			end
		end
	end,
})

ToggleFirstPerson = Visuals:CreateToggle({
	Text = "First Person",
	Info = "Loop Sets Your Camera Mode To First Person",
	Function = function(Args)
		FirstPerson = not FirstPerson
		ModuleToggled(ToggleFirstPerson, "Loop First Person", FirstPerson, Args.NoNotify)
		if ThirdPerson then
			ToggleThirdPerson:Toggle()
			task.wait()
		end
		if FirstPerson then
			Plr.CameraMode = Enum.CameraMode.LockFirstPerson
			Connections.Other.LoopFirstPerson = Plr:GetPropertyChangedSignal("CameraMode"):Connect(function()
				Plr.CameraMode = Enum.CameraMode.LockFirstPerson
			end)
		else
			if Connections.Other.LoopFirstPerson then
				Connections.Other.LoopFirstPerson:Disconnect()
			end
		end
	end,
})

ToggleThirdPerson = Visuals:CreateToggle({
	Text = "Third Person",
	Info = "Loop Sets Your Camera Mode To Third Person",
	Function = function(Args)
		ThirdPerson = not ThirdPerson
		ModuleToggled(ToggleThirdPerson, "Loop Third Person", ThirdPerson, Args.NoNotify)
		if FirstPerson then
			ToggleFirstPerson:Toggle()
		end
		if ThirdPerson then
			Plr.CameraMode = Enum.CameraMode.Classic
			Connections.Other.LoopThirdPerson = Plr:GetPropertyChangedSignal("CameraMode"):Connect(function()
				Plr.CameraMode = Enum.CameraMode.Classic
			end)
		else
			if Connections.Other.LoopThirdPerson then
				Connections.Other.LoopThirdPerson:Disconnect()
			end
		end
	end,
})

AntiLag = Visuals:CreateButton({
	Text = "Anti Lag",
	Info = "Removes Lots Of Different Things To Boost FPS",
	MouseButton1Click = function()
		local Terrain = workspace:FindFirstChildOfClass("Terrain")
        if Terrain then
            Terrain.WaterWaveSize = 0
            Terrain.WaterWaveSpeed = 0
            Terrain.WaterReflectance = 0
            Terrain.WaterTransparency = 0
        end
        if not NoShadows then
            ToggleNoShadows:Toggle({NoNotify = true})
        end
        if not NoFog then
            ToggleNoFog:Toggle({NoNotify = true})
        end
		for i, v in pairs(game:GetDescendants()) do
			if v:IsA("BasePart") then
				v.Material = "Plastic"
				v.Reflectance = 0
			elseif v:IsA("Decal") then
				v.Transparency = 1
			elseif v:IsA("ParticleEmitter") then
				v.Lifetime = NumberRange.new(0, 0)
			elseif v:IsA("Trail") then
				v.Lifetime = 0
			elseif v:IsA("Explosion") then
				v.BlastPressure = 1
				v.BlastRadius = 1
			end
		end
		for i, v in ipairs(Lighting:GetDescendants()) do
			if v:IsA("BlurEffect") or v:IsA("SunRaysEffect") or v:IsA("ColorCorrectionEffect") or v:IsA("BloomEffect") or v:IsA("DepthOfFieldEffect") then
				v.Enabled = false
			end
		end
		Connections.Visuals.AntiLagDescendantAddedConnection = workspace.DescendantAdded:Connect(function(Child)
			if Child:IsA("ForceField") then
				Child:Destroy()
			elseif Child:IsA("Sparkles") then
				Child:Destroy()
			elseif Child:IsA("Smoke") or Child:IsA("Fire") then
				Child:Destroy()
			end
		end)
	end,
})

----------------------------------------------------------------------------------------------------- World Category

NoClickDetectorLimits = WorldCategory:CreateButton({
	Text = "No Click Detector Limits",
	Info = "Allows You To Activate Click Detectors From Any Distance (Unless The Game Actually Does Checks)",
	Function = function()
		for i, CD in pairs(workspace:GetDescendants()) do
			if CD:IsA("ClickDetector") then
				CD.MaxActivationDistance = math.huge
			end
		end
	end,
})

FireClickDetectors = WorldCategory:CreateButton({
	Text = "Fire Click Detectors",
	Info = 'Fires All Click Detectors (Requires "FireClickDetector" Function)',
	Function = function()
		if FireClickDetector then
			for i, CD in pairs(workspace:GetDescendants()) do
				if CD:IsA("ClickDetector") then
					FireClickDetector(CD)
				end
			end
		else
			NotifyExploitDoesntSupportFunction("FireClickDetector")
		end
	end,
})

NoProximityPromptLimits = WorldCategory:CreateButton({
	Text = "No Proximity Prompt Limits",
	Info = "Allows You To Activate Proximity Prompts From Any Distance (Unless The Game Actually Does Checks)",
	Function = function()
		for i, Prox in pairs(workspace:GetDescendants()) do
			if Prox:IsA("ProximityPrompt") then
				Prox.MaxActivationDistance = math.huge
			end
		end
	end,
})

FireProximityPrompts = WorldCategory:CreateButton({
	Text = "Fire Proximity Prompts",
	Info = 'Fires All Proximity Prompts (Requires "FireProximityPrompts" Function)',
	Function = function()
		if FireProximityPrompt then
			for i, Prox in pairs(workspace:GetDescendants()) do
				if Prox:IsA("ProximityPrompt") then
					FireProximityPrompt(Prox)
				end
			end
		else
			NotifyExploitDoesntSupportFunction("FireProximityPrompts")
		end
	end,
})

ToggleInstantProximityPrompts = WorldCategory:CreateToggle({
	Text = "Instant Proximity Prompts",
	Info = "Instantly Activates Proximity Prompts",
	Function = function(Args)
		if FireProximityPrompt then
			InstantProximityPrompts = not InstantProximityPrompts
			ModuleToggled(ToggleInstantProximityPrompts, "Instant Proximity Prompts", InstantProximityPrompts, Args.NoNotify)
			if InstantProximityPrompts then
				Connections.World.InstantProximityPromptConnection = ProximityPromptService.PromptButtonHoldBegan:Connect(function(Prompt)
					FireProximityPrompt(Prompt)
				end)
			else
				if Connections.World.InstantProximityPromptConnection then
					Connections.World.InstantProximityPromptConnection:Disconnect()
				end
			end
		else
			NotifyExploitDoesntSupportFunction("FireProximityPrompts")
		end
	end,
})

FireTouchInterests = WorldCategory:CreateButton({
	Text = "Fire Touch Interests",
	Info = "Fires All Touch Interests",
	MouseButton1Click = function()
		if not FireTouchInterest() then NotifyExploitDoesntSupportFunction("FireTouchInterest") return end
		local Char = GetChar(Plr)
		local Root = GetRoot(Char)
		for i, Part in pairs(workspace:GetDescendants()) do
			if not (Part:IsA("BasePart") and Char and Root) then continue end
			FireTouchInterest(Part, Root, true)
		end
	end,
})

do
    XrayParts = {}

    ToggleXray = WorldCategory:CreateToggle({
        Text = "Xray",
        Info = "Guys I Just Did Some Off Camera Mining",
        Function = function(Args)
            Xray = not Xray
            ModuleToggled(ToggleXray, "Xray", Xray, Args.NoNotify)
            if Xray then
                for i, Part in pairs(workspace:GetDescendants()) do
                    if not Part:IsA("BasePart") or Part:FindFirstAncestorOfClass("Model") and Players:GetPlayerFromCharacter(Part:FindFirstAncestorOfClass("Model")) then continue end
                    Part.LocalTransparencyModifier = 0.5
                    table.insert(XrayParts, Part)
                end
            else
                for i, Part in pairs(XrayParts) do
                    Part.LocalTransparencyModifier = 0
                end
                table.clear(XrayParts)
            end
        end,
    })
end

SaveGame = WorldCategory:CreateButton({
	Text = "Save Game",
	Info = "Saves Local Instances To Your Exploit's Workspace Folder",
	Function = function()
		if SaveInstance then
			Notify({
				Text = "Started Saving The Game",
				Duration = 2,
			})
			SaveInstance(game)
			Notify({
				Text = "Finished Saving The Game",
				Duration = 2,
			})
		else
			Notify({
				Text = 'Your Exploit Doesnt Support "SaveInstance"',
				Duration = 5,
			})
		end
	end,
})

ToggleLockWorkspace = WorldCategory:CreateToggle({
	Text = "Unlock Workspace",
	Info = "Unlocks/Locks Workspace",
	Function = function()
		UnLockWorkspace = not UnLockWorkspace
		ToggleButtonColor(ToggleLockWorkspace, UnLockWorkspace)
		if UnLockWorkspace then
			for i,v in pairs(workspace:GetDescendants()) do
				if v:IsA("BasePart") then
					v.Locked = false
				end
			end
		else
			for i,v in pairs(workspace:GetDescendants()) do
				if v:IsA("BasePart") then
					v.Locked = true
				end
			end
		end
	end,
})

ToggleVehicleNoclip = WorldCategory:CreateToggle({
	Text = "Vehicle Noclip",
	Info = "Make Car Have Not Collide",
	Function = function(Args)
		VehicleNoclip = not VehicleNoclip
		ModuleToggled(ToggleVehicleNoclip, "Vehicle Noclip", VehicleNoclip, Args.NoNotify)
		if VehicleNoclip then
			local Char = GetChar(Plr)
			local Humanoid = GetHumanoid(Char)
			if not (Char and Humanoid and Humanoid.SeatPart and Humanoid.SeatPart.Parent) then return end
			local Seat = Humanoid.SeatPart
			local VehicleModel = Seat.Parent
			if not Noclip then
				ToggleNoclip:Toggle({NoNotify = true})
			end
			repeat
				if VehicleModel.Parent.ClassName == "Model" then
					VehicleModel = VehicleModel.Parent
				end
			until VehicleModel.Parent.ClassName ~= "Model"
			task.wait()
            Connections.World.VehicleNoclipLoop = RunService.Stepped:Connect(function()
                for i, v in pairs(VehicleModel:GetDescendants()) do
                    if v:IsA("BasePart") then
                        v.CanCollide = false
                    end
                end
            end)
		else
			if Connections.World.VehicleNoclipLoop then
				Connections.World.VehicleNoclipLoop:Disconnect()
				Connections.World.VehicleNoclipLoop = nil
			end
		end
	end,
})

ToggleClickPartToSelectToSelect = WorldCategory:CreateToggle({
	Text = "Click Part To Select",
	Info = 'Part Path Will Be Copied To Clipboard But Only If Your Exploit Supports "SetClipboard" And It Will Also Be Printed Into The Console',
	Function = function()
		ClickPartToSelect = not ClickPartToSelect
		ToggleButtonColor(ToggleClickPartToSelectToSelect.Btn, ClickPartToSelect)
        if not ClickPartToSelect then
            ClickPartToSelectOutline.Adornee = nil
        end
	end,
})

do
    local Vel = 0
    ToggleAntiVoid = WorldCategory:CreateToggle({
        Text = "Anti Void",
        Info = "Prevents You From Falling In The Void",
        Function = function(Args)
            AntiVoid = not AntiVoid
            ModuleToggled(ToggleAntiVoid, "Anti Void", AntiVoid, Args.NoNotify)
            if AntiVoid then
                Connections.World.AntiVoidLoop = RunService.Stepped:Connect(function()
                    local Char = GetChar(Plr)
                    local Root = GetRoot(Char)
                    if not (Char and Root) then return end
                    if Root.Position.Y <= workspace.FallenPartsDestroyHeight + 25 then
                        Root.AssemblyLinearVelocity += Vector3.new(0, Vel + 25, 0)
                    end
                    RunService.Heartbeat:Wait()
                    if not Root then return end
                    Vel = Root.AssemblyLinearVelocity.Y * -1
                end)
            else
                if Connections.World.AntiVoidLoop then
                    Connections.World.AntiVoidLoop:Disconnect()
                    Connections.World.AntiVoidLoop = nil
                end
            end
        end,
    })
end

ToggleClickDelete = WorldCategory:CreateToggle({
	Text = "Click Delete",
	Info = "Deletes Parts When You Hold You Binded Key Down And Click",
	Function = function(Args)
		ClickDelete = not ClickDelete
		ModuleToggled(ToggleClickDelete, "Click Delete", ClickDelete, Args.NoNotify)
	end,
	Function2 = function()
		RebindClickDelete.Visible = true
		ToggleClickDeleteIgnorePlayer.MainFrame.Visible = true
	end,
})

RebindClickDelete = CreateRebindButton("ClickDelete")

ToggleClickDeleteIgnorePlayer = CreateToggle({
	Text = "Ignore Player",
	Info = "Ignores The Player You Clicked On",
	Function = function(Args)
		ClickDeleteIgnorePlayer = not ClickDeleteIgnorePlayer
		ToggleButtonColor(ToggleClickDeleteIgnorePlayer.Btn, ClickDeleteIgnorePlayer)
	end,
})

DeleteInvisParts = WorldCategory:CreateButton({
	Text = "Delete Invis Parts",
	Info = "Deletes All Parts That Are Invisible",
	Function = function()
		for i,v in pairs(workspace:GetDescendants()) do
			if v:IsA("BasePart") and v.Transparency == 1 and v.CanCollide then
				v:Destroy()
			end
		end
	end,
})

DeleteInstanceTextbox = WorldCategory:CreateTextbox({
	ButtonText = "Delete",
	PlaceholderText = "Instance Name",
	Info = "Deletes All Instances That Have The Specified Name",
	Function = function(Args)
		for i, v in pairs(workspace:GetDescendants()) do
			if string.lower(v.Name) == string.lower(Args.Text) then
				v:Destroy()
			end
		end
	end,
})

DeleteClassTextbox = WorldCategory:CreateTextbox({
	ButtonText = "Delete Class",
	PlaceholderText = "Class Name",
	Info = "Deletes All Instances That Have The Specified ClassName",
	Function = function(Args)
		for i, v in pairs(workspace:GetDescendants()) do
			if string.lower(v.ClassName) == string.lower(Args.Text) then
				v:Destroy()
			end
		end
	end,
})

do
	local Limbs = {
		"Head",
		"Torso",
		"LowerTorso",
		"UpperRightArm",
		"Right Arm",
		"LowerRightArm",
		"UpperLeftArm",
		"LowerLeftArm",
		"Left Arm",
		"UpperRightLeg",
		"LowerRightLeg",
		"Right Leg",
		"UpperLeftLeg",
		"LowerLeftLeg",
		"Left Leg",
		"HumanoidRootPart",
	}

	local function ClearAllBodyGyros(Part)
		for i, v in pairs(Part:GetChildren()) do
			if v:IsA("BodyGyro") or v:IsA("BodyPosition") then
				v:Destroy()
			end
		end
	end

	TeleportUnAchored = WorldCategory:CreateButton({
		Text = "Tpua",
		PlaceholderText = "Player Name",
		Info = "Teleports Un Anchored Parts To You",
		Function = function(Args)
			local Char = GetChar(Plr)
			local Root = GetRoot(Char)
			
			for i, Part in pairs(workspace:GetDescendants()) do
				
				if not (Part:IsA("BasePart") and Char and Root) or Part.Anchored or Part:IsDescendantOf(Char) or table.find(Limbs, Part.Name) then continue end
				
				ClearAllBodyGyros(Part)
				
				local ForceInstance = Instance.new("BodyPosition")
				ForceInstance.MaxForce = Vector3.new(math.huge, math.huge, math.huge)
                ForceInstance.Parent = Part

				local Player = FindPlayer(Args.Text)
				local PlayerChar = GetChar(Player)
				local PlayerRoot = GetRoot(PlayerChar)

				if Player and PlayerChar and PlayerRoot then
					ForceInstance.Position = PlayerRoot.Position
				else
					ForceInstance.Position = Root.Position
				end
			end
		end,
	})
end

----------------------------------------------------------------------------------------------------- Creating Buttons In Other Category

RunInfiniteYield = Other:CreateButton({
	Text = "Infinite Yield",
	Function = function()
		pcall(function()
			loadstring(game:HttpGet('https://raw.githubusercontent.com/EdgeIY/infiniteyield/master/source'))()
		end)
	end,
})

RunDex = Other:CreateButton({
	Text = "Dex",
	Function = function()
		pcall(function()
			loadstring(game:HttpGet("https://raw.githubusercontent.com/infyiff/backup/main/dex.lua"))()
		end)
	end,
})

RunRemoteSpy = Other:CreateButton({
	Text = "Remote Spy",
	Function = function()
		pcall(function()
			loadstring(game:HttpGet("https://raw.githubusercontent.com/infyiff/backup/main/SimpleSpyV3/main.lua"))()
		end)
	end,
})

RunCobalt = Other:CreateButton({
	Text = "Cobalt",
	Info = "Remote Spy But Better",
	MouseButton1Click = function()
		pcall(function()
			loadstring(game:HttpGet("https://github.com/notpoiu/cobalt/releases/latest/download/Cobalt.luau"))()
		end)
	end,
})

RunAudioLogger = Other:CreateButton({
	Text = "Audio Logger",
	Function = function()
		pcall(function()
			loadstring(game:HttpGet(('https://raw.githubusercontent.com/infyiff/backup/main/audiologger.lua'), true))()
		end)
	end,
})

RunF3X = Other:CreateButton({
	Text = "F3X",
	Info = "Runs F3X",
	Function = function()
		pcall(function()
			loadstring(game:HttpGet("https://raw.githubusercontent.com/infyiff/backup/refs/heads/main/f3x.lua"))()
		end)
	end,
})

RunWallWalker = Other:CreateButton({
	Text = "Wall Walker",
	Info = "Runs Wall Walker",
	Function = function()
		pcall(function()
			loadstring(game:HttpGet("https://raw.githubusercontent.com/infyiff/backup/main/wallwalker.lua"))()
		end)
	end,
})

RunUNCTest = Other:CreateButton({
    Text = "UNC Test",
    Info = "Runs A UNC Test",
    MouseButton1Click = function()
        pcall(function()
            loadstring(game:HttpGet("https://github.com/ltseverydayyou/uuuuuuu/blob/main/UNC%20test?raw=true"))()
        end)
    end,
})

RunSUNCTest = Other:CreateButton({
    Text = "SUNC Test",
    Info = "Runs An SUNC Test (Takes You To A Different Game)",
    MouseButton1Click = function()
        pcall(function()
            loadstring(game:HttpGet("https://gitlab.com/sens3/nebunu/-/raw/main/HummingBird8's_sUNC_yes_i_moved_to_gitlab_because_my_github_acc_got_brickedd/sUNCm0m3n7.lua"))()
        end)
    end,
})

Rejoin = Other:CreateButton({
	Text = "Rejoin",
	Info = "Makes You Rejoin The Server.",
	Function = function()
		if #Players:GetPlayers() <= 1 then
			Plr:Kick("\nRejoining...")
			task.wait()
			TeleportService:Teleport(game.PlaceId, Plr)
		else
			TeleportService:TeleportToPlaceInstance(game.PlaceId, game.JobId, Plr)
		end
	end,
})

ServerHop = Other:CreateButton({
	Text = "Server Hop",
	Info = "Joins A Random Server",
	Function = function()
		if not HttpRequest then NotifyExploitDoesntSupportFunction("HttpRequest") return end
		local Servers = {}
		local Request = HttpRequest({Url = string.format("https://games.roblox.com/v1/games/%d/servers/Public?sortOrder=Desc&limit=100&excludeFullGames=true", game.PlaceId)})
		local Body = HttpService:JSONDecode(Request.Body)

		if Body and Body.data then
			for i, v in next, Body.data do
				if type(v) == "table" and tonumber(v.playing) and tonumber(v.maxPlayers) and v.playing < v.maxPlayers and v.id ~= game.JobId then
					table.insert(Servers, 1, v.id)
				end
			end
		end

		if #Servers > 0 then
			TeleportService:TeleportToPlaceInstance(game.PlaceId, Servers[math.random(1, #Servers)], Plr)
		else
			Notify({
				Text = "Couldnt Find A Server",
			})
		end
	end,
})

ToggleServerInfo = Other:CreateToggle({
	Text = "Server Info",
	Info = "Shows Info About The Server.",
	Function = function()
		ServerInfoTopBar.Visible = not ServerInfoTopBar.Visible
		ToggleButtonColor(ToggleServerInfo, ServerInfoTopBar.Visible)
		if ServerInfoTopBar.Visible then
			task.spawn(function()
				repeat task.wait() until time() % 1 < 0.05
				while ServerInfoTopBar.Visible and not StopScript do
					DistributedGameTimeTextLabel.Btn.Text = "Distributed Game Time: " .. tostring(math.round(time()))
					task.wait(1)
				end
			end)
		end
	end,
})

do
    local Class = "RemoteEvent"

    local InstanceFinderTextbox = CreateTextbox({
        NoButton = true,
        Text = "RemoteEvent",
        PlaceholderText = "ClassName",
        FocusLost = function(Args)
            Class = Args.Text
        end,
    })

    ToggleInstanceFinder = Other:CreateToggle({
        Text = "Instance Finder",
        Info = "Finds Instances",
        MouseButton1Click = function()
            InstanceFinderMenu.MainFrame.Visible = not InstanceFinderMenu.MainFrame.Visible
            ToggleButtonColor(ToggleInstanceFinder, InstanceFinderMenu.MainFrame.Visible)
            if InstanceFinderMenu.MainFrame.Visible then
                for i, v in ipairs(game:GetDescendants()) do
                    if v:IsA(Class) then
                        local Button = CreateButton({
                            Parent = InstanceFinderMenu.ScrollingFrame,
                            Text = GetFullName(v),
                            MouseButton1Click = function()
                                SetClipboard(GetFullName(v), "Copied FullName To Clipboard")
                            end,
                        })
                    end
                end
            else
                for i, v in ipairs(InstanceFinderMenu.ScrollingFrame:GetChildren()) do
                    if v:GetAttribute("Button") then
                        v:Destroy()
                    end
                end
            end
        end,
        MouseButton2Click = function()
            InstanceFinderTextbox.MainFrame.Visible = true
        end,
    })

    InstanceFinderMenu = CreateMenu({
        Text = "Instance Finder",
        OnClose = function()
            ToggleButtonColor(ToggleInstanceFinder, InstanceFinderMenu.MainFrame.Visible)
            for i, v in ipairs(InstanceFinderMenu.ScrollingFrame:GetChildren()) do
                if v:GetAttribute("Button") then
                    v:Destroy()
                end
            end
        end,
    })
end

ToggleViewPlayer = Other:CreateTextbox({
	ButtonText = "View Player",
	PlaceholderText = "Player Name",
	Info = "Sets Your Humanoid Subject To The Specified Player.",
	Function = function(Args)
		ViewingPlayer = not ViewingPlayer
		ModuleToggled(ToggleViewPlayer, "View Player", ViewingPlayer, Args.NoNotify)
		if ViewingPlayer then
			local Player = FindPlayer(Args.Text)
			local PlayerChar = GetChar(Player)
			local PlayerRoot = GetRoot(PlayerChar)
			local PlayerHumanoid = GetHumanoid(PlayerChar)
			local Char = GetChar(Plr)
			local Root = GetRoot(Char)
			local Humanoid = GetHumanoid(Char)
			if not (Player and PlayerChar and PlayerRoot and Char and Root) then return end
			Camera.CameraSubject = PlayerHumanoid or PlayerRoot or Humanoid or Root
		else
			local Char = GetChar(Plr)
			local Humanoid = GetHumanoid(Char)
			local Root = GetRoot(Char)
			if Char and Humanoid then
				Camera.CameraSubject = Humanoid or Root
			end
		end
	end,
	Function2 = function()
		RebindViewPlayer.Visible = true
	end,
})

RebindViewPlayer = CreateRebindButton("ViewPlayer")

PlaceTeleport = Other:CreateTextbox({
	PlaceholderText = "Place ID",
	ButtonText = "Place Teleport",
	Info = "Teleports You Between Places (Not Games)",
	Function = function(Args)
		if not tonumber(Args.Text) then return end
		TeleportService:Teleport(tonumber(Args.Text), Plr)
	end,
})

CancelTeleport = Other:CreateButton({
	Text = "Cancel Teleport",
	Info = "Cancels The Current Teleport In Progress",
	Function = function()
		pcall(function()
			TeleportService:TeleportCancel()
		end)
	end,
})

FPSCapTextbox = Other:CreateTextbox({
	ButtonText = "FPS Bypass",
	PlaceholderText = "FPS",
	Function = function(Args)
		if SetFPSCap then
			if tonumber(Args.Text) then
				SetFPSCap(tonumber(Args.Text))
			elseif string.lower(Args.Text) == "none" then
				SetFPSCap(1000000)
			else
				Notify({
					Text = 'Enter A Valid Number Or Enter "None" For No FPS Cap',
					Duration = 2,
				})
			end
		else
			NotifyExploitDoesntSupportFunction("SetFPSCap")
		end
	end,
})

ToggleViewPart = Other:CreateTextbox({
	TextLabelText = "View Part",
	PlaceholderText = "Part Name",
	EnabledIndicator = true,
	Function = function(Args)
		ViewPart = not ViewPart
		ToggleButtonColor(ToggleViewPart, ViewPart)
		if ViewPart then
			for i, v in pairs(workspace:GetDescendants()) do
				if string.lower(v.Name) == string.lower(Args.Text) then
					Camera.CameraSubject = v
					break
				end
			end
		else
			local Char = GetChar(Plr)
			local Humanoid = GetHumanoid(Char)
			if Char and Humanoid then
				Camera.CameraSubject = Humanoid
			elseif Char then
				if Char:FindFirstChild("Head") then
					Camera.CameraSubject = Char:FindFirstChild("Head")
				else
					local Root = GetRootPart(Char)
					if Root then
						Camera.CameraSubject = Root
					end
				end
			end
		end
	end,
})

GiveBtools = Other:CreateButton({
	Text = "Btools",
	Info = "Gives You Btools",
	Function = function()
        local Backpack = Plr:FindFirstChildWhichIsA("Backpack")
        if not Backpack then return end
		for i = 1, 4 do
			local Tool = Instance.new("HopperBin")
			Tool.BinType = i
			Tool.Name = "Tool"
            Tool.Parent = Backpack
		end
	end,
})

do
	local ClientBringLoop = nil
	ClientBring = Other:CreateTextbox({
		ButtonText = "Bring",
		PlaceholderText = "Player Name",
		Info = "Brings A Player To You (Client)",
		Function = function(Args)
			local Player = FindPlayer(Args.Text)
			ClientBringEnabled = not ClientBringEnabled
            if not Player then return end
			local PlayerChar = GetChar(Player)
            local PlayerRoot = GetRootPart(PlayerChar)
            local Char = GetChar(Plr)
            local Root = GetRootPart(Char)
            if PlayerChar and PlayerRoot and Char and Root then
                PlayerRoot.CFrame = Root.CFrame
            end

            if LoopClientBring then
                Connections.Other.ClientBringLoop = RunService.Heartbeat:Connect(function()
                    PlayerChar = GetChar(Player)
                    PlayerRoot = GetRootPart(PlayerChar)
                    Char = GetChar(Plr)
                    Root = GetRootPart(Char)
                    if PlayerChar and PlayerRoot and Char and Root then
                        PlayerRoot.CFrame = Root.CFrame
                    end
                end)
            else
                if Connections.Other.ClientBringLoop then
                    Connections.Other.ClientBringLoop:Disconnect()
                end
            end
		end,
	})
end

ToggleShiftLock = Other:CreateToggle({
	Text = "Enable Shiftlock",
	Info = "Forces The Game To Allow Shiftlock",
	Function = function(Args)
		ForceEnableShiftLock = not ForceEnableShiftLock
		ModuleToggled(ToggleShiftLock, "Enable Shiftlock", ForceEnableShiftLock, Args.NoNotify)
		if ForceEnableShiftLock then
			Plr.DevEnableMouseLock = true
			Connections.Other.ForceEnableShiftLockLoop = Plr:GetPropertyChangedSignal("DevEnableMouseLock"):Connect(function()
				Plr.DevEnableMouseLock = true
			end)
		else
			if Connections.Other.ForceEnableShiftLockLoop then
				Connections.Other.ForceEnableShiftLockLoop:Disconnect()
			end
		end
	end,
})

InvisGuis = {}
HiddenGuis = {}

ToggleShowGuis = Other:CreateToggle({
	Text = "Show Guis",
	Info = "Shows Hidden Guis",
	Function = function(Args)
		ShowGuis = not ShowGuis
		ModuleToggled(ToggleShowGuis, "Show Guis", ShowGuis, Args.NoNotify)
		if ShowGuis then
            if HideGuis then
                ToggleHideGuis:Toggle({NoNotify = true})
            end
			for i, v in pairs(Plr:FindFirstChildWhichIsA("PlayerGui"):GetDescendants()) do
				if v:FindFirstAncestor(TidalWaveScreenGui.Name) then continue end
				if (v:IsA("Frame") or v:IsA("ImageLabel") or v:IsA("ScrollingFrame")) and not v.Visible then
					v.Visible = true
					if not table.find(InvisGuis, v) then
						table.insert(InvisGuis, v)
					end
				end
			end
		else
			for i,v in pairs(InvisGuis) do
				v.Visible = false
			end
			InvisGuis = {}
		end
	end,
})

ToggleHideGuis = Other:CreateToggle({
	Text = "Hide Guis",
	Info = "Hides Guis",
	Function = function(Args)
		HideGuis = not HideGuis
		ModuleToggled(ToggleHideGuis, "Hide Guis", HideGuis, Args.NoNotify)
		if HideGuis then
            if ShowGuis then
                ToggleShowGuis:Toggle({NoNotify = true})
            end
			for i, v in pairs(Plr:FindFirstChildWhichIsA("PlayerGui"):GetDescendants()) do
				if v:FindFirstAncestor(TidalWaveScreenGui.Name) then continue end
				if (v:IsA("Frame") or v:IsA("ImageLabel") or v:IsA("ScrollingFrame")) and v.Visible then
					v.Visible = false
					if not table.find(HiddenGuis, v) then
						table.insert(HiddenGuis, v)
					end
				end
			end
		else
			for i,v in pairs(HiddenGuis) do
				v.Visible = true
			end
			HiddenGuis = {}
		end
	end,
})

ToggleGuiDelete = Other:CreateToggle({
	Text = "Gui Delete",
	Info = "Deletes All Guis Your Mouse Is Hovering Over When Pressing Backspace Or Delete",
	Function = function(Args)
		GuiDelete = not GuiDelete
		ModuleToggled(ToggleGuiDelete, "Gui Delete", GuiDelete, Args.NoNotify)
		local GuiDeleteInputBegan
		if GuiDelete then
			GuiDeleteInputBegan = UIS.InputBegan:Connect(function(Input)
				if ChatboxFocused() or TidalWaveFocused then return end
				if Input.KeyCode == Enum.KeyCode.Backspace or Input.KeyCode == Enum.KeyCode.Delete then
					for i, v in pairs(Plr:FindFirstChildWhichIsA("PlayerGui"):GetGuiObjectsAtPosition(Mouse.X, Mouse.Y)) do
                        if v:FindFirstAncestor(TidalWaveScreenGui.Name) then continue end
                        if v.Visible then
                            v:Destroy()
                        end
                    end
				end
			end)
		else
			if GuiDeleteInputBegan then
				GuiDeleteInputBegan:Disconnect()
                GuiDeleteInputBegan = nil
			end
		end
	end,
})

do
	local OnVoiceModerated

	UnSuspendVC = Other:CreateButton({
		Text = "Un Suspend VC",
		Info = "It Un Suspends You From Voice Chat",
		Function = function()
            pcall(function()
                VoiceChatService:joinVoice()

                if typeof(OnVoiceModerated) ~= "RBXScriptConnection" then
                    OnVoiceModerated = VoiceChatInternal.LocalPlayerModerated:Connect(function()
                        task.wait(1)
                        VoiceChatService:joinVoice()
                    end)
                end
            end)
		end,
	})
end

DataLimit = Other:CreateTextbox({
	ButtonText = "Data Limit",
	PlaceholderText = "Number",
	MouseButton1Click = function(Args)
		if tonumber(Args.Text) then
			pcall(function()
				NetworkClient:SetOutgoingKBPSLimit(tonumber(Args.Text))
			end)
		end
	end,
})

ReplicationLag = Other:CreateTextbox({
	ButtonText = "Replication Lag",
	PlaceholderText = "Number",
	MouseButton1Click = function(Args)
		if not tonumber(Args.Text) then return end
		pcall(function()
			settings():GetService("NetworkSettings").IncomingReplicationLag = tonumber(Args.Text)
		end)
	end,
})

ToggleAntiAfk = Other:CreateButton({
	Text = "Anti AFK",
	Info = "Prevents You From Getting Kicked For Being Idle",
	Function = function()
		if GetConnections then
			for i, v in pairs(GetConnections(Plr.Idled)) do
				if v["Disable"] then
					v["Disable"](v)
				elseif v["Disconnect"] then
					v["Disconnect"](v)
				end
			end
			ModuleToggled(ToggleAntiAfk, "Anti AFK", true)
		else
			Plr.Idled:Connect(function()
				VirtualUser:CaptureController()
				VirtualUser:ClickButton2(Vector2.new())
			end)
		end
	end,
})

ToggleBubbleChat = Other:CreateToggle({
	Text = "Bubble Chat",
	Info = "Enables/Disables Bubble Chat",
	EnabledIndicatorDefault = true,
	MouseButton1Click = function(Args)
		local BubbleChat = TextChatService:FindFirstChildWhichIsA("BubbleChatConfiguration", true)
		if not BubbleChat then return end
		BubbleChat.Enabled = not BubbleChat.Enabled
		ModuleToggled(ToggleBubbleChat, "Bubble Chat", BubbleChat.Enabled, Args.NoNotify)
	end,
})

SpoofValueButton = Other:CreateButton({
    Text = "Spoof Value",
    MouseButton1Click = function()
        if not Hookmetamethod then return NotifyExploitDoesntSupportFunction("Hookmetamethod") end
        local Old; Old = Hookmetamethod(game, "__index", NewCClosure(function(self, Key)
            if CheckCaller and not CheckCaller() and SpoofCheckCaller then return Old(self, Key) end
            if self == InstanceToSpoof and string.lower(tostring(Key)) == ValueToSpoof then
                return SpoofValue
            end
            return Old(self, Key)
        end))
    end,
    MouseButton2Click = function()
        InstanceToSpoofTextbox.MainFrame.Visible = true
        ValueToSpoofTextbox.MainFrame.Visible = true
        SpoofValueTextbox.MainFrame.Visible = true
        ToggleCheckCaller.MainFrame.Visible = true
    end,
})

InstanceToSpoofTextbox = CreateTextbox({
    ButtonText = "Instance To Spoof",
    PlaceholderText = "[Path]",
    Info = "The Instance With The Value You Wanna Spoof",
    FocusLost = function(Args)
        local Success, Er = pcall(function()
            InstanceToSpoof = loadstring("return " .. Args.Text)()
        end)
        if Success then
            Notify({
                Text = `Set Instance To Spoof To {GetFullName(InstanceToSpoof)}`,
            })
        else
            Notify({
                Text = Er,
            })
        end
    end,
})

ValueToSpoofTextbox = CreateTextbox({
    ButtonText = "Value To Spoof",
    PlaceholderText = "[Value]",
    Info = "The Value To Spoof",
    FocusLost = function(Args)
        ValueToSpoof = string.lower(Args.Text)
    end,
})

SpoofValueTextbox = CreateTextbox({
    ButtonText = "Value",
    PlaceholderText = "[AnyValue]",
    Info = "The Value To Set It To",
    FocusLost = function(Args)
        local Success, Er = pcall(function()
            SpoofValue = loadstring("return " .. Args.Text)()
        end)
        if Success then
            Notify({
                Text = `Set Value To {SpoofValue}`
            })
        else
            Notify({
                Text = Er
            })
        end
    end,
})

ToggleCheckCaller = CreateToggle({
    Text = "Check Caller",
    Info = "Whether Or Not To Spoof The Value When Being Referenced From Your Executor",
    Default = SpoofCheckCaller,
    MouseButton1Click = function()
        SpoofCheckCaller = not SpoofCheckCaller
        ToggleButtonColor(ToggleCheckCaller, SpoofCheckCaller)
    end,
})

do
    local SpoofFunctionArgs = Connections.Storage.SpoofFunctionArgs

    SpoofFunction = Other:CreateButton({
        Text = "Spoof Function",
        MouseButton1Click = function()
            if not Hookmetamethod then return NotifyExploitDoesntSupportFunction("Hookmetamethod") end
            if not GetNameCallMethod then return NotifyExploitDoesntSupportFunction("GetNameCallMethod") end
            local Old; Old = Hookmetamethod(game, "__namecall", NewCClosure(function(self, ...)
                if CheckCaller and not CheckCaller() and SpoofFunctionCheckCaller then return Old(self, ...) end
                local Method = GetNameCallMethod()
                if self == SpoofFunctionSelf and Method == SpoofFunctionMethod then
                    if SpoofFunctionSelfToReturn == "self" then
                        return Old(self, unpack(SpoofFunctionArgs))
                    else
                        return Old(SpoofFunctionSelfToReturn, unpack(SpoofFunctionArgs))
                    end
                end
                return Old(self, ...)
            end))
        end,
        MouseButton2Click = function()
            SpoofFunctionSelfTextbox.MainFrame.Visible = true
            SpoofFunctionMethodTextbox.MainFrame.Visible = true
            SpoofFunctionArgsTextbox.MainFrame.Visible = true
            ToggleSpoofFunctionCheckCaller.MainFrame.Visible = true
        end,
    })
end

SpoofFunctionSelfTextbox = CreateTextbox({
    ButtonText = "Function Self",
    PlaceholderText = "[Obj With Func]",
    FocusLost = function(Args)
        local Success, Er = pcall(function()
            SpoofFunctionSelf = loadstring("return " .. Args.Text)()
        end)
        if Success then
            Notify({
                Text = `Set "FunctionSelf" To {GetFullName(SpoofFunctionSelf)}`
            })
        else
            Notify({
                Text = Er
            })
        end
    end,
})

SpoofFunctionMethodTextbox = CreateTextbox({
    ButtonText = "Method",
    PlaceholderText = "[Method]",
    Info = "Make Sure To Type The Method Exact Which For A Remote Event It Would Be \"FireServer\"",
    FocusLost = function(Args)
        SpoofFunctionMethod = Args.Text
    end,
})

SpoofFunctionArgsTextbox = CreateTextbox({
    ButtonText = "Args",
    PlaceholderText = "[Arg1, Arg2]",
    FocusLost = function(Args)
        local Success, Er = pcall(function()
            SpoofFunctionArgs = loadstring("return {" .. Args.Text .. "}")()
        end)
        if Success then
            Notify({
                Text = `Set Args To {unpack(SpoofFunctionArgs)}`
            })
        else
            Notify({
                Text = Er
            })
        end
    end,
})

ToggleSpoofFunctionCheckCaller = CreateToggle({
    Text = "Check Caller",
    Info = "Whether Or Not To Spoof The Function When Being Called From Your Executor",
    Default = SpoofFunctionCheckCaller,
    MouseButton1Click = function()
        SpoofFunctionCheckCaller = not SpoofFunctionCheckCaller
        ToggleButtonColor(ToggleSpoofFunctionCheckCaller, SpoofFunctionCheckCaller)
    end,
})

SpoofFunctionSelfToReturnTextbox = CreateTextbox({
    ButtonText = "Self To Return",
    PlaceholderText = "[Obj]",
    Info = "Sets The Self Of The Function Which Allows You To Change The Instance Being Destroyed By Something Like Destroy() Or Remove()",
    FocusLost = function(Args)
        local Success, Er = pcall(function()
            SpoofFunctionSelfToReturn = loadstring("return " .. Args.Text)()
            if typeof(SpoofFunctionSelfToReturn) == "string" then
                SpoofFunctionSelfToReturn = string.lower(SpoofFunctionSelfToReturn)
            end
        end)
        if Success then
            Notify({
                Text = `Set "SelfToReturn" To {GetFullName(SpoofFunctionSelfToReturn)}`
            })
        else
            Notify({
                Text = Er
            })
        end
    end,
})

----------------------------------------------------------------------------------------------------- Settings Category

ToggleAnimateWindows = MenuSettings:CreateToggle({
	Text = "Animate Windows",
	Info = "Toggles Menu Opening/Closing Animation",
	EnabledIndicatorDefault = true,
	Function = function()
		AnimateWindows = not AnimateWindows
		ToggleButtonColor(ToggleAnimateWindows, AnimateWindows)
	end,
	Function2 = function()
		MenuOpenSpeedSlider.Visible = true
		MenuEasingStyleDropdown.Visible = true
		MenuOpenEasingDirectionDropdown.Visible = true
		MenuCloseEasingDirectionDropdown.Visible = true
	end,
})

ToggleKeepCMDBarOpen = MenuSettings:CreateToggle({
	Text = "Keep CMD Bar Open",
	Function = function()
		KeepCMDBarOpen = not KeepCMDBarOpen
		ToggleButtonColor(ToggleKeepCMDBarOpen, KeepCMDBarOpen)
		CMDCategory:MakeToggleable(not KeepCMDBarOpen)
	end,
})

ToggleNotifications = MenuSettings:CreateToggle({
	Text = "Notifications",
	EnabledIndicatorDefault = true,
	Function = function()
		NotifyOn = not NotifyOn
		ToggleButtonColor(ToggleNotifications, NotifyOn)
	end,
})

MenuOpenSpeedSlider = CreateSlider({
	Text = "Animation Duration",
    Min = 0,
	Default = 0.2,
	Max = 2,
	Function = function(Val)
		MenuOpenSpeed = Val
	end,
	Function2 = function(Val)
		MenuOpenSpeed = Val
	end,
})

MenuEasingStyleDropdown = CreateDropdown({
	Text = "Easing Style",
	Default = MenuEasingStyle,
})
MenuEasingStyleDropdown.AddButton("Linear", function()
	MenuEasingStyle = "Linear"
end)
MenuEasingStyleDropdown.AddButton("Sine", function()
	MenuEasingStyle = "Sine"
end)
MenuEasingStyleDropdown.AddButton("Quad", function()
	MenuEasingStyle = "Quad"
end)
MenuEasingStyleDropdown.AddButton("Cubic", function()
	MenuEasingStyle = "Cubic"
end)
MenuEasingStyleDropdown.AddButton("Quart", function()
	MenuEasingStyle = "Quart"
end)
MenuEasingStyleDropdown.AddButton("Quint", function()
	MenuEasingStyle = "Quint"
end)
MenuEasingStyleDropdown.AddButton("Exponential", function()
	MenuEasingStyle = "Exponential"
end)
MenuEasingStyleDropdown.AddButton("Circular", function()
	MenuEasingStyle = "Circular"
end)
MenuEasingStyleDropdown.AddButton("Back", function()
	MenuEasingStyle = "Back"
end)
MenuEasingStyleDropdown.AddButton("Bounce", function()
	MenuEasingStyle = "Bounce"
end)
MenuEasingStyleDropdown.AddButton("Elastic", function()
	MenuEasingStyle = "Elastic"
end)

MenuOpenEasingDirectionDropdown = CreateDropdown({
	Text = "Open Easing Direction",
	Default = MenuOpenEasingDirection,
})
MenuOpenEasingDirectionDropdown.AddButton("In", function()
	MenuOpenEasingDirection = "In"
end)
MenuOpenEasingDirectionDropdown.AddButton("In", function()
	MenuOpenEasingDirection = "Out"
end)
MenuOpenEasingDirectionDropdown.AddButton("In", function()
	MenuOpenEasingDirection = "InOut"
end)

MenuCloseEasingDirectionDropdown = CreateDropdown({
	Text = "Close Easing Direction",
	Default = MenuCloseEasingDirection,
})
MenuCloseEasingDirectionDropdown.AddButton("In", function()
	MenuCloseEasingDirection = "In"
end)
MenuCloseEasingDirectionDropdown.AddButton("Out", function()
	MenuCloseEasingDirection = "Out"
end)
MenuCloseEasingDirectionDropdown.AddButton("InOut", function()
	MenuCloseEasingDirection = "InOut"
end)

function SaveProfileFunction()
	local ConfigsToSave = {
		--- Combat ---
        
        Combat = {
            GlobalAimbot = GlobalAimbot,
            GlobalAimbotWallCheck = GlobalAimbotWallCheck,
            GlobalAimbotTeamCheck = GlobalAimbotTeamCheck,
            GlobalAimbotSize = {
                X = GlobalAimbotSize.X,
                Y = GlobalAimbotSize.Y,
            },
            GlobalAimbotMinDistance = GlobalAimbotMinDistance,
            GlobalAimbotMaxDistance = GlobalAimbotMaxDistance,
            GlobalAimbotTarget = GlobalAimbotTarget,

            PartAimbot = PartAimbot,
            PartAimbotMode = PartAimbotMode,
            PartAimbotFolder = PartAimbotFolder,
            PartAimbotWallCheck = PartAimbotWallCheck,
            PartAimbotSize = {
                X = PartAimbotSize.X,
                Y = PartAimbotSize.Y,
            },
        },

		--- Player ---

        Player = {
            AntiRagdoll = AntiRagdoll,
		    Noclip = Noclip,
        },

		--- Movement ---

        Movement = {
            WalkSpeed = WalkSpeed,
            SpeedHackMethod = SpeedHackMethod,
            SpeedHack = SpeedHack,
            JumpPower = JumpPower,
            JumpPowerEnabled = JumpPowerEnabled,
            Gravity = Gravity,
            GravityEnabled = GravityEnabled,
            Float = Float,
            Fly = Fly,
            FlySpeed = FlySpeed,
            CFrameFly = CFrameFly,
            CFrameFlySpeed = CFrameFlySpeed,
            InfiniteJump = InfiniteJump,
            JumpWhileTyping = JumpWhileTyping,
            ClickTeleportEnabled = ClickTeleportEnabled,
        },

		--- Visuals ---

		Visuals = {
            Brightness = Brightness,
            BrightnessEnabled = BrightnessEnabled,
            HealthESP = HealthESP,
            NameESP = NameESP,
            DistanceESP = DistanceESP,
            WalkSpeedESP = WalkSpeedESP,
            JumpPowerESP = JumpPowerESP,
            PlayerEspTextSize = PlayerEspTextSize,
            TracersPos = {
                X = PlayerTracersPosition.X,
                Y = PlayerTracersPosition.Y,
            },
            PlayerTracersTeammateColor = {
                R = PlayerTracersTeammateColor.R,
                G = PlayerTracersTeammateColor.G,
                B = PlayerTracersTeammateColor.B,
            },
            PlayerTracersEnemyColor = {
                R = PlayerTracersEnemyColor.R,
                G = PlayerTracersEnemyColor.G,
                B = PlayerTracersEnemyColor.B,
            },
            AutomaticPlayerTracersColor = AutomaticPlayerTracersColor,
            PlayerTracers = PlayerTracers,
            TracersThickness = PlayerTracersThickness,
            PlayerDrawingESP = PlayerDrawingESP,
            PlayerDrawingEspThickness = PlayerDrawingEspThickness,
            PlayerDrawingEspFilled = PlayerDrawingEspFilled,
            PlayerDrawingEspTeammateColor = {
                R = PlayerDrawingEspTeammateColor.R,
                G = PlayerDrawingEspTeammateColor.G,
                B = PlayerDrawingEspTeammateColor.B,
            },
            PlayerDrawingEspEnemyColor = {
                R = PlayerDrawingEspEnemyColor.R,
                G = PlayerDrawingEspEnemyColor.G,
                B = PlayerDrawingEspEnemyColor.B,
            },
            AutomaticPlayerDrawingEspColor = AutomaticPlayerDrawingEspColor,
            PlayerDrawingEspSize = {
                X = PlayerDrawingEspSize.X,
                Y = PlayerDrawingEspSize.Y,
            },
            NoShadows = NoShadows,
            NoFog = NoFog,
            NoDepthOfField = NoDepthOfField,
            NoAtmosphere = NoAtmosphere,
            NoBloom = NoBloom,
            NoBlur = NoBlur,
            NoColorCorrection = NoColorCorrection,
            NoSunRays = NoSunRays,
            NoSky = NoSky,
            NoColorGrading = NoColorGrading,
            ForceTimeOfDayEnabled = ForceTimeOfDayEnabled,
            ForceTimeOfDay = ForceTimeOfDay,
            PlayerHighlightESP = PlayerHighlightESP,
            AutomaticPlayerHighlightEspOutlineColor = AutomaticPlayerHighlightEspOutlineColor,
            AutomaticPlayerHighlightEspFillColor = AutomaticPlayerHighlightEspFillColor,
            PlayerHighlightEspTeammateOutlineColor = {
                R = PlayerHighlightEspTeammateOutlineColor.R,
                G = PlayerHighlightEspTeammateOutlineColor.G,
                B = PlayerHighlightEspTeammateOutlineColor.B,
            },
            PlayerHighlightEspTeammateFillColor = {
                R = PlayerHighlightEspTeammateFillColor.R,
                G = PlayerHighlightEspTeammateFillColor.G,
                B = PlayerHighlightEspTeammateFillColor.B,
            },
            PlayerHighlightEspFillTransparency = PlayerHighlightEspFillTransparency,
            PlayerHighlightEspOutlineTransparency = PlayerHighlightEspOutlineTransparency,
            PartESP = PartESP,
            PartEspMode = PartEspMode,
            PartEspPath = PartEspPath,
            PartEspFillColor = {
                R = PartEspFillColor.R,
                G = PartEspFillColor.G,
                B = PartEspFillColor.B,
            },
            PartEspFillTransparency = PartEspFillTransparency,
            PartEspOutlineColor = {
                R = PartEspOutlineColor.R,
                G = PartEspOutlineColor.G,
                B = PartEspOutlineColor.B,
            },
            PartEspOutlineTransparency = PartEspOutlineTransparency,
            PartEspName = PartEspName,
            PartEspHighlightMode = PartEspHighlightMode,
        },

		--- World ---

        World = {
            AntiVoid = AntiVoid,
        },

        --- Skywars ---

        Skywars = {
            KillESP = KillESP,
            WinsESP = WinsESP,
            WinStreakESP = WinStreakESP,
            LevelESP = LevelESP,
            RankESP = RankESP,
            TitleESP = TitleESP,
            KillAura = KillAura,
            AutoLoot = AutoLoot,
            EggNuker = EggNuker,
            AutoQueue = AutoQueue,
            PlaySwordAnimationDuringKillAura = PlaySwordAnimationDuringKillAura,
            SwordAnimationPlayRate = SwordAnimationPlayRate,
            SilentAimbot = SilentAimbot,
            AutoWin = AutoWin,
            ModeToAutoQueue = ModeToAutoQueue,
            HelmetESP = HelmetESP,
            ChestplateESP = ChestplateESP,
            LeggingESP = LeggingESP,
        },

        --- Dead By Roblox ---

        DeadByRoblox = {
            InstantWiggle = InstantWiggle,
            PalletESP = PalletESP,
            WindowESP = WindowESP,
            GeneratorESP = GeneratorESP,
        },

        --- Stair Climbing Simulator ---

        StairClimbingSimulator = {
            AutoRebirth = AutoRebirth,
        },

        --- Flee The Facility ---

        FleeTheFacility = {
            ComputerESP = ComputerESP,
            VentESP = VentESP,
            WindowESP = WindowESP,
            ExitESP = ExitESP,
            FreezePodESP = FreezePodESP,
            DoorESP = DoorESP,
            LockerESP = LockerESP,
            SpawnESP = SpawnESP,
            DoorTriggerESP = DoorTriggerESP,
            ExitTriggerESP = ExitTriggerESP,
            FreezePodTriggerESP = FreezePodTriggerESP,
            ComputerTriggerESP = ComputerTriggerESP,
            CrouchAsBeast = CrouchAsBeast,
        },

        --- Strongman Simulator ---

        StrongmanSimulator = {
            InstantSellItems = InstantSellItems,
            WeightlessItems = WeightlessItems,
            NoStrongmanSimulatorPopups = NoStrongmanSimulatorPopups,
        },

		--- Other ---

        --- Menu Settings ---

        MenuSettings = {
            TidalWaveKeybinds = TidalWaveKeybinds
        },
	}

	CreateMainFiles()
	if not WriteFile then NotifyExploitDoesntSupportFunction("WriteFile") return end
	WriteFile("TidalWave/Profiles/" .. SaveProfile.Textbox.Text .. ".json", HttpService:JSONEncode(ConfigsToSave))
end

SaveProfile = MenuSettings:CreateTextbox({
	ButtonText =  "Save",
	PlaceholderText = "Profile Name",
	Info = "Saves All Your Options To A Profile.",
	Function = function()
		SaveProfileFunction()
	end,
})

function LoadProfileFunction(Json, ProfileName)
	local Char = GetChar(Plr)
	local RootPart = GetRootPart(Char)
	local Humanoid = GetHumanoid(Char)

	local StartTime = tick()

	--- Combat ---

	if Json.Combat.GlobalAimbot == true and not GlobalAimbot then
		ToggleGlobalAimbot:Toggle({NoNotify = true})
    elseif Json.Combat.GlobalAimbot == false and GlobalAimbot then
        ToggleGlobalAimbot:Toggle({NoNotify = true})
	end
	if Json.Combat.GlobalAimbotWallCheck == true and not GlobalAimbotWallCheck then 
		ToggleGlobalAimbotWallCheck:Toggle({NoNotify = true})
    elseif Json.Combat.GlobalAimbotWallCheck == false and GlobalAimbotWallCheck then
        ToggleGlobalAimbotWallCheck:Toggle({NoNotify = true})
	end
	if Json.Combat.GlobalAimbotTeamCheck == true and not GlobalAimbotTeamCheck then 
		ToggleGlobalAimbotTeamCheck:Toggle({NoNotify = true})
    elseif Json.Combat.GlobalAimbotTeamCheck == false and GlobalAimbotTeamCheck then
        ToggleGlobalAimbotTeamCheck:Toggle({NoNotify = true})
	end
	if Json.Combat.GlobalAimbotSize ~= nil then
        if Json.Combat.GlobalAimbotSize.X ~= nil then
            GlobalAimbotSize = Vector2.new(Json.Combat.GlobalAimbotSize.X, GlobalAimbotSize.Y)
        end
        if Json.Combat.GlobalAimbotSize.Y ~= nil then
            GlobalAimbotSize = Vector2.new(GlobalAimbotSize.X, Json.Combat.GlobalAimbotSize.Y)
        end
	end
	if Json.Combat.GlobalAimbotMinDistance ~= nil then 
		GlobalAimbotMinDistance = Json.Combat.GlobalAimbotMinDistance 
	end
	if Json.Combat.GlobalAimbotMaxDistance ~= nil then 
		GlobalAimbotMaxDistance = Json.Combat.GlobalAimbotMaxDistance 
	end
	if Json.Combat.GlobalAimbotTarget ~= nil then 
		GlobalAimbotTarget = Json.Combat.GlobalAimbotTarget 
    end
	if Json.Combat.PartAimbot == true and not PartAimbot then 
		TogglePartAimbot:Toggle({NoNotify = true})
    elseif Json.Combat.PartAimbot == false and PartAimbot then
        TogglePartAimbot:Toggle({NoNotify = true})
	end
	if Json.Combat.PartAimbotMode ~= nil then 
		PartAimbotMode = Json.Combat.PartAimbotMode 
	end
	if Json.Combat.PartAimbotFolder ~= nil then 
		PartAimbotFolder = Json.Combat.PartAimbotFolder 
	end
	if Json.Combat.PartAimbotWallCheck == true and not PartAimbotWallCheck then 
		TogglePartAimbotWallCheck:Toggle({NoNotify = true})
    elseif Json.Combat.PartAimbotWallCheck == false and PartAimbotWallCheck then
        TogglePartAimbotWallCheck:Toggle({NoNotify = true})
	end
	if Json.Combat.PartAimbotSize ~= nil then
        if Json.Combat.PartAimbotSize.X ~= nil then
            PartAimbotSize = Vector2.new(Json.Combat.PartAimbotSize, PartAimbotSize.Y)
        end
		if Json.Combat.PartAimbotSize.Y ~= nil then
            PartAimbotSize = Vector2.new(PartAimbotSize.X, Json.Combat.PartAimbotSize.Y)
        end
	end
	if Json.Combat.PartAimbotTarget ~= nil then 
		PartAimbotTarget = Json.Combat.PartAimbotTarget 
	end

	--- Player ---

	if Json.Player.AntiRagdoll == true and not AntiRagdoll then
		task.spawn(function()
            WaitUntilCharAdded(Plr, 5)
            ToggleAntiRagdoll:Toggle({NoNotify = true})
        end)
    elseif Json.Player.AntiRagdoll == false and AntiRagdoll then
        ToggleAntiRagdoll:Toggle({NoNotify = true})
	end
	if Json.Player.Noclip == true and not Noclip then 
		ToggleNoclip:Toggle({NoNotify = true})
    elseif Json.Player.Noclip == false and Noclip then
        ToggleNoclip:Toggle({NoNotify = true})
	end

	--- Movement ---

    if Json.Movement.CFrameFlySpeed ~= nil then
		CFrameFlySpeed = Json.Movement.CFrameFlySpeed
	end
	if Json.Movement.CFrameFly == true and not CFrameFly then
		ToggleCFrameFly:Toggle({NoNotify = true})
    elseif Json.Movement.CFrameFly == false and CFrameFly then
        ToggleCFrameFly:Toggle({NoNotify = true})
	end
	if Json.Movement.WalkSpeed ~= nil then
		WalkSpeed = Json.Movement.WalkSpeed 
	end
	if Json.Movement.SpeedHackMethod ~= nil then
		SpeedHackMethod = Json.Movement.SpeedHackMethod
	end
	if Json.Movement.SpeedHack == true and not SpeedHack then 
		task.spawn(function()
            WaitUntilCharAdded(Plr, 5)
            ToggleSpeedHack:Toggle({NoNotify = true})
        end)
    elseif Json.Movement.SpeedHack == false and SpeedHack then
        ToggleSpeedHack:Toggle({NoNotify = true})
	end
    if Json.Movement.FlySpeed ~= nil then
		FlySpeed = Json.Movement.FlySpeed
	end	
	if Json.Movement.Fly == true and not Fly then
		ToggleFly:Toggle({NoNotify = true})
    elseif Json.Movement.Fly == false and Fly then
        ToggleFly:Toggle({NoNotify = true})
	end
	if Json.Movement.JumpPower ~= nil then 
		JumpPower = Json.Movement.JumpPower
	end
	if Json.Movement.JumpPowerEnabled == true and not JumpPowerEnabled then 
		ToggleJumpPower:Toggle({NoNotify = true})
    elseif Json.Movement.JumpPowerEnabled == false and JumpPowerEnabled then
        ToggleJumpPower:Toggle({NoNotify = true})
	end
	if Json.Movement.Gravity ~= nil then 
		Gravity = Json.Movement.Gravity 
	end
	if Json.Movement.GravityEnabled == true and not GravityEnabled then 
		ToggleGravity:Toggle({NoNotify = true})
    elseif Json.Movement.GravityEnabled == false and GravityEnabled then
        ToggleGravity:Toggle({NoNotify = true})
	end
	if Json.Movement.InfiniteJump == true and not InfiniteJump then 
		ToggleInfiniteJump:Toggle({NoNotify = true})
    elseif Json.Movement.InfiniteJump == false and InfiniteJump then
        ToggleInfiniteJump:Toggle({NoNotify = true})
	end
	if Json.Movement.JumpWhileTyping == true and not JumpWhileTyping then 
		ToggleJumpWhileTyping:Toggle({NoNotify = true})
    elseif Json.Movement.JumpWhileTyping == false and JumpWhileTyping then
        ToggleJumpWhileTyping:Toggle({NoNotify = true})
	end
	if Json.ClickTeleportEnabled == true and not ClickTeleportEnabled then
		ToggleClickTeleport:Toggle({NoNotify = true})
    elseif Json.ClickTeleportEnabled == false and ClickTeleportEnabled then
        ToggleClickTeleport:Toggle({NoNotify = true})
	end

	--- Visuals ---

    if Json.Visuals.PartEspMode ~= nil then
		PartEspMode = Json.Visuals.PartEspMode
	end
	if Json.Visuals.PartEspPath ~= nil then
		PartEspPath = Json.Visuals.PartEspPath
	end
    if Json.Visuals.PartEspFillColor ~= nil then
		if Json.Visuals.PartEspFillColor.R ~= nil then
			PartEspFillColor = Color3.fromRGB(Json.Visuals.PartEspFillColor.R, PartEspFillColor.G, PartEspFillColor.B)
		end
		if Json.Visuals.PartEspFillColor.G ~= nil then
			PartEspFillColor = Color3.fromRGB(PartEspFillColor.R, Json.Visuals.PartEspFillColor.G, PartEspFillColor.B)
		end
		if Json.Visuals.PartEspFillColor.B ~= nil then
			PartEspFillColor = Color3.fromRGB(PartEspFillColor.R, PartEspFillColor.G, Json.Visuals.PartEspFillColor.B)
		end
	end
	if Json.Visuals.PartEspFillTransparency ~= nil then
		PartEspFillTransparency = Json.Visuals.PartEspFillTransparency
	end
	if Json.Visuals.PartEspOutlineColor ~= nil then
		if Json.Visuals.PartEspOutlineColor.R ~= nil then
			PartEspOutlineColor = Color3.fromRGB(Json.Visuals.PartEspOutlineColor.R, PartEspOutlineColor.G, PartEspOutlineColor.B)
		end
		if Json.Visuals.PartEspOutlineColor.G ~= nil then
			PartEspOutlineColor = Color3.fromRGB(PartEspOutlineColor.R, Json.Visuals.PartEspOutlineColor.G, PartEspOutlineColor.B)
		end
		if Json.Visuals.PartEspOutlineColor.B ~= nil then
			PartEspOutlineColor = Color3.fromRGB(PartEspOutlineColor.R, PartEspOutlineColor.G, Json.Visuals.PartEspOutlineColor.B)
		end
	end
	if Json.Visuals.PartEspOutlineTransparency ~= nil then
		PartEspOutlineTransparency = Json.Visuals.PartEspOutlineTransparency
	end
	if Json.Visuals.PartEspName ~= nil then
		PartEspName = Json.Visuals.PartEspName
	end
	if Json.Visuals.PartEspHighlightMode ~= nil then
		PartEspHighlightMode = Json.Visuals.PartEspHighlightMode
	end
	if Json.Visuals.PartESP == true and not PartESP then
		TogglePartESP:Toggle({NoNotify = true})
    elseif Json.Visuals.PartESP == false and PartESP then
        TogglePartESP:Toggle({NoNotify = true})
	end
	if Json.Visuals.TracersPos ~= nil then
		if Json.Visuals.TracersPos.X ~= nil then
			PlayerTracersPosition = Vector2.new(Json.Visuals.TracersPos.X, PlayerTracersPosition.Y)
		end
		if Json.Visuals.TracersPos.Y ~= nil then
			PlayerTracersPosition = Vector2.new(PlayerTracersPosition.X, Json.Visuals.TracersPos.Y)
		end
	end
	if Json.Visuals.PlayerTracersTeammateColor ~= nil then
		if Json.Visuals.PlayerTracersTeammateColor.R ~= nil then
			PlayerTracersTeammateColor = Color3.fromRGB(Json.Visuals.PlayerTracersTeammateColor.R, PlayerTracersTeammateColor.G, PlayerTracersTeammateColor.B)
		end
		if Json.Visuals.PlayerTracersTeammateColor.G ~= nil then
			PlayerTracersTeammateColor = Color3.fromRGB(PlayerTracersTeammateColor.R, Json.Visuals.PlayerTracersTeammateColor.G, PlayerTracersTeammateColor.B)
		end
		if Json.Visuals.PlayerTracersTeammateColor.B ~= nil then
			PlayerTracersTeammateColor = Color3.fromRGB(PlayerTracersTeammateColor.R, PlayerTracersTeammateColor.G, Json.Visuals.PlayerTracersTeammateColor.B)
		end
	end
	if Json.Visuals.PlayerTracersEnemyColor ~= nil then
		if Json.Visuals.PlayerTracersEnemyColor.R ~= nil then
			PlayerTracersEnemyColor = Color3.fromRGB(Json.Visuals.PlayerTracersEnemyColor.R, PlayerTracersEnemyColor.G, PlayerTracersEnemyColor.B)
		end
		if Json.Visuals.PlayerTracersEnemyColor.G ~= nil then
			PlayerTracersEnemyColor = Color3.fromRGB(PlayerTracersEnemyColor.R, Json.Visuals.PlayerTracersEnemyColor.G, PlayerTracersEnemyColor.B)
		end
		if Json.Visuals.PlayerTracersEnemyColor.B ~= nil then
			PlayerTracersEnemyColor = Color3.fromRGB(PlayerTracersEnemyColor.R, PlayerTracersEnemyColor.G, Json.Visuals.PlayerTracersEnemyColor.B)
		end
	end
	if Json.Visuals.TracersThickness ~= nil then 
		PlayerTracersThickness = Json.Visuals.TracersThickness 
	end
	if Json.Visuals.AutomaticPlayerTracersColor ~= nil then
		if Json.Visuals.AutomaticPlayerTracersColor and not AutomaticPlayerTracersColor then
			ToggleAutomaticPlayerTracersColor:Toggle({NoNotify = true})
		end
	end
	if Json.Visuals.PlayerTracers == true and not PlayerTracers then
		TogglePlayerTracers:Toggle({NoNotify = true})
    elseif Json.Visuals.PlayerTracers == false and PlayerTracers then
        TogglePlayerTracers:Toggle({NoNotify = true})
	end
	if Json.Visuals.PlayerDrawingEspTeammateColor ~= nil then
		if Json.Visuals.PlayerDrawingEspTeammateColor.R ~= nil then
			PlayerDrawingEspTeammateColor = Color3.fromRGB(Json.Visuals.PlayerDrawingEspTeammateColor.R, PlayerDrawingEspTeammateColor.G, PlayerDrawingEspTeammateColor.B)
		end
		if Json.Visuals.PlayerDrawingEspTeammateColor.G ~= nil then
			PlayerDrawingEspTeammateColor = Color3.fromRGB(PlayerDrawingEspTeammateColor.R, Json.Visuals.PlayerDrawingEspTeammateColor.G, PlayerDrawingEspTeammateColor.B)
		end
		if Json.Visuals.PlayerDrawingEspTeammateColor.B ~= nil then
			PlayerDrawingEspTeammateColor = Color3.fromRGB(PlayerDrawingEspTeammateColor.R, PlayerDrawingEspTeammateColor.G, Json.Visuals.PlayerDrawingEspTeammateColor.B)
		end
	end
	if Json.Visuals.PlayerDrawingEspEnemyColor ~= nil then
		if Json.Visuals.PlayerDrawingEspEnemyColor.R ~= nil then
			PlayerDrawingEspEnemyColor = Color3.fromRGB(Json.Visuals.PlayerDrawingEspEnemyColor.R, PlayerDrawingEspEnemyColor.G, PlayerDrawingEspEnemyColor.B)
		end
		if Json.Visuals.PlayerDrawingEspEnemyColor.G ~= nil then
			PlayerDrawingEspEnemyColor = Color3.fromRGB(PlayerDrawingEspEnemyColor.R, Json.Visuals.PlayerDrawingEspEnemyColor.G, PlayerDrawingEspEnemyColor.B)
		end
		if Json.Visuals.PlayerDrawingEspEnemyColor.B ~= nil then
			PlayerDrawingEspEnemyColor = Color3.fromRGB(PlayerDrawingEspEnemyColor.R, PlayerDrawingEspEnemyColor.G, Json.Visuals.PlayerDrawingEspEnemyColor.B)
		end
	end
	if Json.Visuals.PlayerDrawingEspSize ~= nil then
		if Json.Visuals.PlayerDrawingEspSize.X ~= nil then
			PlayerDrawingEspSize = Vector2.new(Json.Visuals.PlayerDrawingEspSize.X, PlayerDrawingEspSize.Y)
		end
		if Json.Visuals.PlayerDrawingEspSize.Y ~= nil then
			PlayerDrawingEspSize = Vector2.new(PlayerDrawingEspSize.X, Json.Visuals.PlayerDrawingEspSize.Y)
		end
	end
    if Json.Visuals.PlayerDrawingEspThickness ~= nil then
        PlayerDrawingEspThickness = Json.Visuals.PlayerDrawingEspThickness
    end
    if Json.Visuals.AutomaticPlayerDrawingEspColor == true and not AutomaticPlayerDrawingEspColor then
        ToggleAutomaticPlayerDrawingEspColor:Toggle({NoNotify = true})
    elseif Json.Visuals.AutomaticPlayerDrawingEspColor == false and AutomaticPlayerDrawingEspColor then
        ToggleAutomaticPlayerDrawingEspColor:Toggle({NoNotify = true})
    end
    if Json.Visuals.PlayerDrawingEspFilled == true and not PlayerDrawingEspFilled then
        TogglePlayerDrawingEspFilled:Toggle({NoNotify = true})
    elseif Json.Visuals.PlayerDrawingEspFiller == false and PlayerDrawingEspFilled then
        TogglePlayerDrawingEspFilled:Toggle({NoNotify = true})
    end
    if Json.Visuals.PlayerDrawingESP == true and not PlayerDrawingESP then
        TogglePlayerDrawingESP:Toggle({NoNotify = true})
    elseif Json.Visuals.PlayerDrawingESP == false and PlayerDrawingESP then
        TogglePlayerDrawingESP:Toggle({NoNotify = true})
    end
	if Json.Visuals.PlayerHighlightEspTeammateOutlineColor ~= nil then
		if Json.Visuals.PlayerHighlightEspTeammateOutlineColor.R ~= nil then
			PlayerHighlightEspTeammateOutlineColor = Color3.fromRGB(Json.Visuals.PlayerHighlightEspTeammateOutlineColor.R, PlayerHighlightEspTeammateOutlineColor.G, PlayerHighlightEspTeammateOutlineColor.B)
		end
		if Json.Visuals.PlayerHighlightEspTeammateOutlineColor.G ~= nil then
			PlayerHighlightEspTeammateOutlineColor = Color3.fromRGB(PlayerHighlightEspTeammateOutlineColor.R, Json.Visuals.PlayerHighlightEspTeammateOutlineColor.G, PlayerHighlightEspTeammateOutlineColor.B)
		end
		if Json.Visuals.PlayerHighlightEspTeammateOutlineColor.B ~= nil then
			PlayerHighlightEspTeammateOutlineColor = Color3.fromRGB(PlayerHighlightEspTeammateOutlineColor.R, PlayerHighlightEspTeammateOutlineColor.G, Json.Visuals.PlayerHighlightEspTeammateOutlineColor.B)
		end
	end
	if Json.Visuals.PlayerHighlightEspTeammateFillColor ~= nil then
		if Json.Visuals.PlayerHighlightEspTeammateFillColor.R ~= nil then
			PlayerHighlightEspTeammateFillColor = Color3.fromRGB(Json.Visuals.PlayerHighlightEspTeammateFillColor.R, PlayerHighlightEspTeammateFillColor.G, PlayerHighlightEspTeammateFillColor.B)
		end
		if Json.Visuals.PlayerHighlightEspTeammateFillColor.G ~= nil then
			PlayerHighlightEspTeammateFillColor = Color3.fromRGB(PlayerHighlightEspTeammateFillColor.R, Json.Visuals.PlayerHighlightEspTeammateFillColor.G, PlayerHighlightEspTeammateFillColor.B)
		end
		if Json.Visuals.PlayerHighlightEspTeammateFillColor.B ~= nil then
			PlayerHighlightEspTeammateFillColor = Color3.fromRGB(PlayerHighlightEspTeammateFillColor.R, PlayerHighlightEspTeammateFillColor.G, Json.Visuals.PlayerHighlightEspTeammateFillColor.B)
		end
	end
	if Json.Visuals.PlayerHighlightEspEnemyOutlineColor ~= nil then
		if Json.Visuals.PlayerHighlightEspEnemyOutlineColor.R ~= nil then
			PlayerHighlightEspEnemyOutlineColor = Color3.fromRGB(Json.Visuals.PlayerHighlightEspEnemyOutlineColor.R, PlayerHighlightEspEnemyOutlineColor.G, PlayerHighlightEspEnemyOutlineColor.B)
		end
		if Json.Visuals.PlayerHighlightEspEnemyOutlineColor.G ~= nil then
			PlayerHighlightEspEnemyOutlineColor = Color3.fromRGB(PlayerHighlightEspEnemyOutlineColor.R, Json.Visuals.PlayerHighlightEspEnemyOutlineColor.G, PlayerHighlightEspEnemyOutlineColor.B)
		end
		if Json.Visuals.PlayerHighlightEspEnemyOutlineColor.B ~= nil then
			PlayerHighlightEspEnemyOutlineColor = Color3.fromRGB(PlayerHighlightEspEnemyOutlineColor.R, PlayerHighlightEspEnemyOutlineColor.G, Json.Visuals.PlayerHighlightEspEnemyOutlineColor.B)
		end
	end
	if Json.Visuals.PlayerHighlightEspEnemyFillColor ~= nil then
		if Json.Visuals.PlayerHighlightEspEnemyFillColor.R ~= nil then
			PlayerHighlightEspEnemyFillColor = Color3.fromRGB(Json.Visuals.PlayerHighlightEspEnemyFillColor.R, PlayerHighlightEspEnemyFillColor.G, PlayerHighlightEspEnemyFillColor.B)
		end
		if Json.Visuals.PlayerHighlightEspEnemyFillColor.G ~= nil then
			PlayerHighlightEspEnemyFillColor = Color3.fromRGB(PlayerHighlightEspEnemyFillColor.R, Json.Visuals.PlayerHighlightEspEnemyFillColor.G, PlayerHighlightEspEnemyFillColor.B)
		end
		if Json.Visuals.PlayerHighlightEspEnemyFillColor.B ~= nil then
			PlayerHighlightEspEnemyFillColor = Color3.fromRGB(PlayerHighlightEspEnemyFillColor.R, PlayerHighlightEspEnemyFillColor.G, Json.Visuals.PlayerHighlightEspEnemyFillColor.B)
		end
	end
	if Json.Visuals.AutomaticPlayerHighlightEspOutlineColor ~= nil then
		if Json.Visuals.AutomaticPlayerHighlightEspOutlineColor and not AutomaticPlayerHighlightEspOutlineColor then
			ToggleAutomaticPlayerHighlightEspOutlineColor:Toggle({NoNotify = true})
		end
	end
	if Json.Visuals.AutomaticPlayerHighlightEspFillColor ~= nil then
		if Json.Visuals.AutomaticPlayerHighlightEspFillColor and not AutomaticPlayerHighlightEspFillColor then
			ToggleAutomaticPlayerHighlightEspFillColor:Toggle({NoNotify = true})
		end
	end
	if Json.Visuals.PlayerHighlightESP == true and not PlayerHighlightESP then
		TogglePlayerHighlightESP:Toggle({NoNotify = true})
    elseif Json.Visuals.PlayerHighlightESP == false and PlayerHighlightESP then
        TogglePlayerHighlightESP:Toggle({NoNotify = true})
	end
	if Json.Visuals.NoShadows == true and not NoShadows then
		ToggleNoShadows:Toggle({NoNotify = true})
    elseif Json.Visuals.NoShadows == false and NoShadows then
        ToggleNoShadows:Toggle({NoNotify = true})
	end
	if Json.Visuals.NoFog == true and not NoFog then 
		ToggleNoFog:Toggle({NoNotify = true})
    elseif Json.Visuals.NoFog == false and NoFog then
        ToggleNoFog:Toggle({NoNotify = true})
	end

	if Json.Visuals.NoDepthOfField == true and not NoDepthOfField then
		ToggleNoDepthOfField:Toggle({NoNotify = true})
    elseif Json.Visuals.NoDepthOfField == false and NoDepthOfField then
        ToggleNoDepthOfField:Toggle({NoNotify = true})
	end
	if Json.Visuals.NoAtmosphere == true and not NoAtmosphere then 
		ToggleNoAtmosphere:Toggle({NoNotify = true})
    elseif Json.Visuals.NoAtmosphere == false and NoAtmosphere then
        ToggleNoAtmosphere:Toggle({NoNotify = true})
	end
	if Json.Visuals.NoBloom == true and not NoBloom then
		ToggleNoBloom:Toggle({NoNotify = true})
    elseif Json.Visuals.NoBloom == false and NoBloom then
        ToggleNoBloom:Toggle({NoNotify = true})
	end
	if Json.Visuals.NoBlur == true and not NoBlur then 
		ToggleNoBlur:Toggle({NoNotify = true})
    elseif Json.Visuals.NoBlur == false and NoBlur then
        ToggleNoBlur:Toggle({NoNotify = true})
	end
	if Json.Visuals.NoColorCorrection == true and not NoColorCorrection then 
		ToggleNoColorCorrection:Toggle({NoNotify = true})
    elseif Json.Visuals.NoColorCorrection == false and NoColorCorrection then
        ToggleNoColorCorrection:Toggle({NoNotify = true})
	end
	if Json.Visuals.NoSunRays == true and not NoSunRays then 
		ToggleNoSunRays:Toggle({NoNotify = true})
    elseif Json.Visuals.NoSunRays == false and NoSunRays then
        ToggleNoSunRays:Toggle({NoNotify = true})
	end
	if Json.Visuals.NoSky == true and not NoSky then 
		ToggleNoSky:Toggle({NoNotify = true})
    elseif Json.Visuals.NoSky == false and NoSky then
        ToggleNoSky:Toggle({NoNotify = true})
	end
	if Json.Visuals.NoColorGrading == true and not NoColorGrading then 
		ToggleNoColorGrading:Toggle({NoNotify = true})
    elseif Json.Visuals.NoColorGrading == false and NoColorGrading then
        ToggleNoColorGrading:Toggle({NoNotify = true})
	end
    if Json.Visuals.ForceTimeOfDay ~= nil then 
		ForceTimeOfDay = Json.Visuals.ForceTimeOfDay 
	end
	if Json.Visuals.ForceTimeOfDayEnabled == true and not ForceTimeOfDayEnabled then
		ToggleForceTimeOfDay:Toggle({NoNotify = true})
    elseif Json.Visuals.ForceTimeOfDayEnabled == false and ForceTimeOfDayEnabled then
        ToggleForceTimeOfDay:Toggle({NoNotify = true})
	end
	if Json.Visuals.Brightness ~= nil then 
		Brightness = Json.Visuals.Brightness 
	end
	if Json.Visuals.BrightnessEnabled == true and not BrightnessEnabled then 
		ToggleBrightness:Toggle({NoNotify = true})
    elseif Json.Visuals.BrightnessEnabled == false and BrightnessEnabled then
        ToggleBrightness:Toggle({NoNotify = true})
	end
	if Json.Visuals.HealthESP == true and not HealthESP then
		ToggleHealthESP:Toggle({NoNotify = true})
    elseif Json.Visuals.HealthESP == false and HealthESP then
        ToggleHealthESP:Toggle({NoNotify = true})
	end
	if Json.Visuals.NameESP == true and not NameESP then 
		ToggleNameESP:Toggle({NoNotify = true})
    elseif Json.Visuals.NameESP == false and NameESP then
        ToggleNameESP:Toggle({NoNotify = true})
	end
	if Json.Visuals.DistanceESP == true and not DistanceESP then 
		ToggleDistanceESP:Toggle({NoNotify = true})
    elseif Json.Visuals.DistanceESP == false and DistanceESP then
        ToggleDistanceESP:Toggle({NoNotify = true})
	end
	if Json.Visuals.WalkSpeedESP == true and not WalkSpeedESP then
		ToggleWalkSpeedESP:Toggle({NoNotify = true})
    elseif Json.Visuals.WalkSpeedESP == false and WalkSpeedESP then
        ToggleWalkSpeedESP:Toggle({NoNotify = true})
	end
	if Json.Visuals.JumpPowerESP == true and not JumpPowerESP then
		ToggleJumpPowerESP:Toggle({NoNotify = true})
    elseif Json.Visuals.JumpPowerESP == false and JumpPowerESP then
        ToggleJumpPowerESP:Toggle({NoNotify = true})
	end

	--- World ---

	if Json.World.AntiVoid == true and not AntiVoid then
		ToggleAntiVoid:Toggle({NoNotify = true})
    elseif Json.World.AntiVoid == false and AntiVoid then
        ToggleAntiVoid:Toggle({NoNotify = true})
	end

	--- Other ---

	--- Skywars ---

	if IsSkywars then
		if Json.Skywars.KillESP == true and not KillESP then
			ToggleKillESP:Toggle({NoNotify = true})
        elseif Json.Skywars.KillESP == false and KillESP then
            ToggleKillESP:Toggle({NoNotify = true})
		end 
		if Json.Skywars.WinsESP == true and not WinsESP then
			ToggleWinESP:Toggle({NoNotify = true})
        elseif Json.Skywars.WinsESP == false and WinsESP then
            ToggleWinESP:Toggle({NoNotify = true})
		end 
		if Json.Skywars.WinStreakESP == true and not WinStreakESP then 
			ToggleWinStreakESP:Toggle({NoNotify = true})
        elseif Json.Skywars.WinStreakESP == false and WinStreakESP then
            ToggleWinStreakESP:Toggle({NoNotify = true})
		end
		if Json.Skywars.LevelESP == true and not LevelESP then
			ToggleLevelESP:Toggle({NoNotify = true})
        elseif Json.Skywars.LevelESP == false and LevelESP then
            ToggleLevelESP:Toggle({NoNotify = true})
		end
		if Json.Skywars.RankESP == true and not RankESP then
			ToggleRankESP:Toggle({NoNotify = true})
        elseif Json.Skywars.RankESP == false and RankESP then
            ToggleRankESP:Toggle({NoNotify = true})
		end
		if Json.Skywars.TitleESP == true and not TitleESP then
			ToggleTitleESP:Toggle({NoNotify = true})
        elseif Json.Skywars.TitleESP == false and TitleESP then
            ToggleTitleESP:Toggle({NoNotify = true})
		end
		if Json.Skywars.HelmetESP == true and not HelmetESP then
			ToggleHelmetESP:Toggle({NoNotify = true})
        elseif Json.Skywars.HelmetESP == false and HelmetESP then
            ToggleHelmetESP:Toggle({NoNotify = true})
		end
		if Json.Skywars.ChestplateESP == true and not ChestplateESP then
			ToggleChestplateESP:Toggle({NoNotify = true})
        elseif Json.Skywars.ChestplateESP == false and ChestplateESP then
            ToggleChestplateESP:Toggle({NoNotify = true})
		end
		if Json.Skywars.LeggingESP == true and not LeggingESP then
			ToggleLeggingsESP:Toggle({NoNotify = true})
        elseif Json.Skywars.LeggingESP == false and LeggingESP then
            ToggleLeggingsESP:Toggle({NoNotify = true})
		end
		if Json.Skywars.KillAura == true and not KillAura then
			ToggleKillAura:Toggle({NoNotify = true})
        elseif Json.Skywars.KillAura == false and KillAura then
            ToggleKillAura:Toggle({NoNotify = true})
		end
		if Json.Skywars.AutoLoot == true and not AutoLoot then
			ToggleAutoLoot:Toggle({NoNotify = true})
        elseif Json.Skywars.AutoLoot == false and AutoLoot then
            ToggleAutoLoot:Toggle({NoNotify = true})
		end
		if Json.Skywars.EggNuker == true and not EggNuker then
			ToggleEggNuker:Toggle({NoNotify = true})
        elseif Json.Skywars.EggNuker == false and EggNuker then
            ToggleEggNuker:Toggle({NoNotify = true})
		end
		if Json.Skywars.AutoQueue == true and not AutoQueue then
			ToggleAutoQueue:Toggle({NoNotify = true})
        elseif Json.Skywars.AutoQueue == false and AutoQueue then
            ToggleAutoQueue:Toggle({NoNotify = true})
		end
		if Json.Skywars.PlaySwordAnimationDuringKillAura == true and not PlaySwordAnimationDuringKillAura then
			task.spawn(function()
                WaitUntilCharAdded()
                ToggleSwordAnimationDuringKillAura:Toggle({NoNotify = true})
            end)
        elseif Json.Skywars.PlaySwordAnimationDuringKillAura == false and PlaySwordAnimationDuringKillAura then
            ToggleSwordAnimationDuringKillAura:Toggle({NoNotify = true})
		end
		if Json.Skywars.SwordAnimationPlayRate ~= nil then
			SwordAnimationPlayRate = Json.Skywars.SwordAnimationPlayRate
		end
		if Json.Skywars.SilentAimbot == true and not SilentAimbot then
			ToggleSilentAimbot:Toggle({NoNotify = true})
        elseif Json.Skywars.SilentAimbot == false and SilentAimbot then
            ToggleSilentAimbot:Toggle({NoNotify = true})
		end
		if Json.Skywars.ModeToAutoQueue ~= nil then
			ModeToAutoQueue = Json.Skywars.ModeToAutoQueue
		end
		if Json.Skywars.AutoWin == true and not AutoWin then
			ToggleAutoWin:Toggle({NoNotify = true})
        elseif Json.Skywars.AutoWin == false and AutoWin then
            ToggleAutoWin:Toggle({NoNotify = true})
		end
	end

    --- Stair Climbing Simulator ---

    if IsStairClimbingSimulator then
        if Json.StairClimbingSimulator.AutoRebirth == true and not AutoRebirth then
            ToggleAutoRebirth:Toggle({NoNotify = true})
        elseif Json.StairClimbingSimulator.AutoRebirth == false and AutoRebirth then
            ToggleAutoRebirth:Toggle({NoNotify = true})
        end
    end

    --- Flee The Facility ---

    if IsFleeTheFacility then
        if Json.FleeTheFacility.ComputerESP == true and not ComputerESP then
            ToggleComputerESP:Toggle({NoNotify = true})
        elseif Json.FleeTheFacility.ComputerESP == false and ComputerESP then
            ToggleComputerESP:Toggle({NoNotify = true})
        end
        if Json.FleeTheFacility.VentESP == true and not ComputerESP then
            ToggleVentESP:Toggle({NoNotify = true})
        elseif Json.FleeTheFacility.ComputerESP == false and ComputerESP then
            ToggleVentESP:Toggle({NoNotify = true})
        end
        if Json.FleeTheFacility.WindowESP == true and not WindowESP then
            ToggleWindowESP:Toggle({NoNotify = true})
        elseif Json.FleeTheFacility.WindowESP == false and WindowESP then
            ToggleWindowESP:Toggle({NoNotify = true})
        end
        if Json.FleeTheFacility.ExitESP == true and not ExitESP then
            ToggleExitESP:Toggle({NoNotify = true})
        elseif Json.FleeTheFacility.ExitESP == false and ExitESP then
            ToggleExitESP:Toggle({NoNotify = true})
        end
        if Json.FleeTheFacility.FreezePodESP == true and not FreezePodESP then
            ToggleFreezePodESP:Toggle({NoNotify = true})
        elseif Json.FleeTheFacility.FreezePodESP == false and FreezePodESP then
            ToggleFreezePodESP:Toggle({NoNotify = true})
        end
        if Json.FleeTheFacility.DoorESP == true and not DoorESP then
            ToggleDoorESP:Toggle({NoNotify = true})
        elseif Json.FleeTheFacility.DoorESp == false and DoorESP then
            ToggleDoorESP:Toggle({NoNotify = true})
        end
        if Json.FleeTheFacility.LockerESP == true and not LockerESP then
            ToggleLockerESP:Toggle({NoNotify = true})
        elseif Json.FleeTheFacility.LockerESP == false and LockerESP then
            ToggleLockerESP:Toggle({NoNotify = true})
        end
        if Json.FleeTheFacility.SpawnESP == true and not SpawnESP then
            ToggleSpawnESP:Toggle({NoNotify = true})
        elseif Json.FleeTheFacility.SpawnESP == false and SpawnESP then
            ToggleSpawnESP:Toggle({NoNotify = true})
        end
        if Json.FleeTheFacility.DoorTriggerESP == true and not DoorTriggerESP then
            ToggleDoorTriggerESP:Toggle({NoNotify = true})
        elseif Json.FleeTheFacility.DoorTriggerESP == false and DoorTriggerESP then
            ToggleDoorTriggerESP:Toggle({NoNotify = true})
        end
        if Json.FleeTheFacility.ExitTriggerESP == true and not DoorTriggerESP then
            ToggleDoorTriggerESP:Toggle({NoNotify = true})
        elseif Json.FleeTheFacility.ExitTriggerESP == false and DoorTriggerESP then
            ToggleDoorTriggerESP:Toggle({NoNotify = true})
        end
        if Json.FleeTheFacility.FreezePodTriggerESP == true and not FreezePodTriggerESP then
            ToggleFreezePodTriggerESP:Toggle({NoNotify = true})
        elseif Json.FleeTheFacility.FreezePodTriggerESP == false and FreezePodTriggerESP then
            ToggleFreezePodTriggerESP:Toggle({NoNotify = true})
        end
        if Json.FleeTheFacility.ComputerTriggerESP == true and not FreezePodTriggerESP then
            ToggleComputerTriggerESP:Toggle({NoNotify = true})
        elseif Json.FleeTheFacility.ComputerTriggerESP == false and FreezePodTriggerESP then
            ToggleComputerTriggerESP:Toggle({NoNotify = true})
        end
        if Json.FleeTheFacility.CrouchAsBeast == true and not CrouchAsBeast then
            ToggleCrouchAsBeast:Toggle({NoNotify = true})
        elseif Json.FleeTheFacility.CrouchAsBeast == false and CrouchAsBeast then
            ToggleCrouchAsBeast:Toggle({NoNotify = true})
        end
    end

    --- Strongman Simulator ---

    if IsStrongmanSimulator then
        if Json.StrongmanSimulator.InstantSellItems == true and not InstantSellItems then
            ToggleInstantSellItems:Toggle({NoNotify = true})
        elseif Json.StrongmanSimulator.InstantSellItems == false and InstantSellItems then
            ToggleInstantSellItems:Toggle({NoNotify = true})
        end
        if Json.StrongmanSimulator.WeightlessItems == true and not WeightlessItems then
            ToggleWeightlessItems:Toggle({NoNotify = true})
        elseif Json.StrongmanSimulator.WeightlessItems == false and WeightlessItems then
            ToggleWeightlessItems:Toggle({NoNotify = true})
        end
        if Json.StrongmanSimulator.NoStrongmanSimulatorPopups == true and not NoStrongmanSimulatorPopups then
            ToggleNoGamepassPopups:Toggle({NoNotify = true})
        elseif Json.StrongmanSimulator.NoStrongmanSimulatorPopups == false and NoStrongmanSimulatorPopups then
            ToggleNoGamepassPopups:Toggle({NoNotify = true})
        end
    end

    --- Dead By Roblox ---

    if IsDeadByRoblox then
        if Json.DeadByRoblox.InstantWiggle == true and not InstantWiggle then
            ToggleInstantWiggle:Toggle({NoNotify = true})
        elseif Json.DeadByRoblox.InstantWiggle == false and InstantWiggle then
            ToggleInstantWiggle:Toggle({NoNotify = true})
        end
        if Json.DeadByRoblox.GeneratorESP == true and not GeneratorESP then
            ToggleGeneratorESP:Toggle({NoNotify = true})
        elseif Json.DeadByRoblox.GeneratorESP == false and GeneratorESP then
            ToggleGeneratorESP:Toggle({NoNotify = true})
        end
        if Json.DeadByRoblox.WindowESP == true and not WindowESP then
            ToggleWindowESP:Toggle({NoNotify = true})
        elseif Json.DeadByRoblox.WindowESP == false and WindowESP then
            ToggleWindowESP:Toggle({NoNotify = true})
        end
    end

	--- Menu Settings ---

	if Json.MenuSettings.TidalWaveKeybinds ~= nil then
		TidalWaveKeybinds = Json.MenuSettings.TidalWaveKeybinds
	end
	
	if ProfileName then
		Notify({
			Text = "Loaded Profile: " .. ProfileName .. " In " .. tostring(SubstituteNumber(tick() - StartTime)) .. " Seconds",
		})
	else
		Notify({
			Text = "Loaded Profile In " .. tostring(SubstituteNumber(tick() - StartTime)) .. " Seconds",
		})
	end
end

LoadProfile = MenuSettings:CreateButton({
	Text = "Load Profile",
	Function = function()
		ProfileMenu.TopBar.Visible = true
		if not ReadFile then NotifyExploitDoesntSupportFunction("ReadFile") return end
		if not ListFiles then NotifyExploitDoesntSupportFunction("ListFiles") return end
		for i, v in pairs(ProfileMenu.ScrollingFrame:GetChildren()) do
			if not v:IsA("UIGridLayout") then
				v:Destroy()
			end
		end
		for i, v in pairs(ListFiles("TidalWave/Profiles")) do
			local String = string.gsub(string.split(v, "\\")[3], ".json", "")
			local TextButton = CreateButton({
				Text = String,
				Parent = ProfileMenu.ScrollingFrame,
				ZIndex = 69423,
				Function = function()
					if not IsFile then NotifyExploitDoesntSupportFunction("IsFile") return end
					if not ReadFile then NotifyExploitDoesntSupportFunction("ReadFile") return end
					if not IsFile(v) then return end
					local Json = HttpService:JSONDecode(ReadFile(v))
					LoadProfileFunction(Json, String)
				end,
			})
		end
	end,
})

ReloadScript = MenuSettings:CreateButton({
    Text = "Reload Tidal Wave",
    Function = function()
        Shutdown()

        if not LoadFile then return end

        LoadFile("TidalWave.lua")()
    end,
})

CloseScript = MenuSettings:CreateButton({
	Text = "Close Tidal Wave",
	Function = function()
		Shutdown()
	end,
})

SetAProfileToAutoLoad = MenuSettings:CreateButton({
	Text = "Auto Load Profile",
	Info = "Allows You To Select A Profile To Automatically Load Upon Opening Tidal Wave.",
	Function = function()
		ProfileMenu.TopBar.Visible = true
		for i, v in pairs(ProfileMenu.ScrollingFrame:GetChildren()) do
			if not v:IsA("UIGridLayout") then
				v:Destroy()
			end
		end

		if not IsFile then NotifyExploitDoesntSupportFunction("IsFile") return end
		if not WriteFile then NotifyExploitDoesntSupportFunction("WriteFile") return end

		local TextButton = CreateButton({
			Text = "nil",
			Parent = ProfileMenu.ScrollingFrame,
			MouseButton1Click = function()
				ProfileToAutoLoad = nil
				UpdateGlobalFiles()
				Notify({
					Text = "Set Profile To Auto Load To nil",
					Duration = 2,
				})
			end,
		})

		if not ListFiles then NotifyExploitDoesntSupportFunction("ListFiles") return end

		for i, Profile in pairs(ListFiles("TidalWave/Profiles")) do
			local ProfileName = string.gsub(string.split(Profile, "\\")[3], ".json", "")
			local TextButton = CreateButton({
				Text = ProfileName,
				Parent = ProfileMenu.ScrollingFrame,
				MouseButton1Click = function()
					ProfileToAutoLoad = Profile
					UpdateGlobalFiles()
					Notify({
						Text = "Set Profile To Auto Load To " .. ProfileName,
					})
				end,
			})
		end
	end,
})

ToggleKeepTidalWave = MenuSettings:CreateToggle({
	Text = "Keep Tidal Wave",
	Info = "Keeps Tidal Wave Opened When You Teleport Through Games.",
	Function = function()
		CreateMainFiles()
		if not WriteFile then NotifyExploitDoesntSupportFunction("WriteFile") return end
		if not QueueOnTeleport then NotifyExploitDoesntSupportFunction("QueueOnTeleport") return end
		KeepTidalWave = not KeepTidalWave
		ToggleButtonColor(ToggleKeepTidalWave, KeepTidalWave)
		UpdateGlobalFiles()
	end,
})

ToggleHackList = MenuSettings:CreateToggle({
	Text = "Hack List",
	EnabledIndicatorDefault = true,
	Function = function(Args)
		HackListFrame.Visible = not HackListFrame.Visible
		ToggleButtonColor(ToggleHackList, HackListFrame.Visible)
	end,
	Function2 = function()
		ToggleHackListRGBText.MainFrame.Visible = true
	end,
})

ToggleHackListRGBText = CreateToggle({
	Text = "RGB Text",
	Info = "Make Text Cool And RGB :D",
	Function = function(Args)
		HackListRGBText = not HackListRGBText
		ToggleButtonColor(ToggleHackListRGBText, HackListRGBText)
		if HackListRGBText then
			for i, v in pairs(HackListFrame:GetChildren()) do
				if v:IsA("UIListLayout") then continue end
				v.HackLabel.UIGradient.Enabled = true
				task.spawn(function()
					while HackListRGBText and not StopScript do
						local Tween = TweenService:Create(v.HackLabel.UIGradient.Enabled, TweenInfo.new(3, Enum.EasingStyle.Linear), {Offset = Vector2.new(1, 0)})
						Tween:Play()
						Tween.Completed:Wait()
						v.HackLabel.UIGradient.Offset = Vector2.new(v.Size.X.Scale - 1, 0)
					end
				end)
			end
		else
			for i, v in pairs(HackListFrame:GetChildren()) do
				if v:IsA("UIListLayout") then continue end
				v.HackLabel.UIGradient.Enabled = false
			end
		end
	end,
})

ToggleAnimateCategories = MenuSettings:CreateToggle({
	Text = "Animate Categories",
	Info = "Toggles Animations For Hiding/Showing Categories",
	EnabledIndicatorDefault = true,
	Function = function()
		AnimateCategories = not AnimateCategories
		ToggleButtonColor(ToggleAnimateCategories, AnimateCategories)
	end,
})

do
    HelpMenu = CreateMenu({
        Text = "Help",
        OnClose = function()
            ToggleButtonColor(HelpButton, HelpMenu.TopBar.Visible)
        end,
    })

    local HelpLabel = Instance.new("TextLabel")
    HelpLabel.BackgroundTransparency = 1
    HelpLabel.Size = UDim2.fromScale(0.95, 0.9)
    HelpLabel.TextSize = 16
    HelpLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
    HelpLabel.Font = TextFont
    HelpLabel.RichText = true
    HelpLabel.AutomaticSize = Enum.AutomaticSize.Y
    HelpLabel.Text = [[

    <b>Toggling Modules</b>
    
    left click to toggle a module
    
    <b>Accessing Module Settings</b>
    
    right click to access the Settings of a module
    
    <b>Making Keybinds For Modules</b>
    
    left click the keybind button in the settings of a module then press the key you want
    if you wanna cancel rebinding click off
    if you wanna delete the keybind press esc
    
    <b>Editing Menu Keybinds</b>
    
    go to the keybinds category
    left click the pencil then press the key you want
    if you wanna cancel rebinding click off
    if you wanna delete the keybind press esc

    <b>Saving Profiles</b>

    go over to the settings category
    then look for the save profile textbox which is at the bottom of the settings category
    then type in whatever name you want into the textbox
    and once you typed in a name just click save

    <b>Loading Profiles</b>

    to load profiles you click the load profile button which is in the settings category
    then it will open up a menu of all your profiles and then you just simply left click on whatever profile you wanna load

    ]]

    HelpLabel.Parent = HelpMenu.ScrollingFrame
end

HelpButton = MenuSettings:CreateToggle({
    Text = "Help",
    MouseButton1Click = function()
        HelpMenu.TopBar.Visible = not HelpMenu.TopBar.Visible
        ToggleButtonColor(HelpButton, HelpMenu.TopBar.Visible)
    end,
})

SearchTextbox = SearchCategory:CreateTextbox({
	NoButton = true,
	SizeMulti = 3,
	Name = "SearchBar",
})

SearchTextbox.Textbox:GetPropertyChangedSignal("Text"):Connect(function()
    for i, Category in ipairs(CategoryHolderFrame:GetChildren()) do
        if Category.Name == "CMD Bar" or Category.Name == "Search" then continue end
        local Success, ContentScrollingFrame = pcall(function()
            return Category.ContentFrame.ContentScrollingFrame
        end)
        if not Success then continue end
        for i2, Button in ipairs(ContentScrollingFrame:GetChildren()) do
            if not (Button:IsA("Frame") or Button:IsA("ImageButton") or Button:IsA("TextButton")) then continue end
            local SearchHasAZ = HasAZ(Button.Name, true)
            if not SearchHasAZ then return end
            local TextObject = Button:FindFirstChildWhichIsA("TextLabel", true) or Button:FindFirstChildWhichIsA("TextButton", true) or Button:FindFirstChildWhichIsA("TextBox", true)
            local Tags = nil
            if Button:GetAttribute("Tags") ~= "" then
                Tags = Button:GetAttribute("Tags")
            else
                Tags = nil
            end
            if not TextObject then Button.Visible = true continue end
            local ButtonText = string.lower(TextObject.Text)
            local SearchTextboxText = string.lower(SearchTextbox.Textbox.Text)
            if string.find(ButtonText, SearchTextboxText) or (Tags and string.find(Tags, ButtonText)) or string.find(string.gsub(ButtonText, " ", ""), SearchTextboxText) then
                Button.Visible = true
            else
                Button.Visible = false
            end
        end
    end
end)

CMDBar = CMDCategory:CreateTextbox({
	NoButton = true,
	SizeMulti = 3,
	Name = "CMDBar",
	FocusLost = function(Properties)
		if not Properties.Enter then return end
		local Text = string.gsub(Properties.Text, ", ", " ")
		Text = string.gsub(Text, ",", " ")
		local Args = string.split(string.lower(Text), " ")
        local CMD = TableFind(CMDS, Args[1], true)
        local Alias = TableFind(Aliases, Args[1], true)
		if CMD then
			CMD(Args)
		elseif Alias and CMDS[Alias] then
			CMDS[Alias](Args)
		end
		Properties.Textbox.Text = ""
	end,
})

do
	local i = 1
    do
        local TextboxText = string.lower(CMDBar.Textbox.Text)
        for CMD in pairs(CMDS) do
            local CMD = string.lower(CMD)
            if TextboxText == string.sub(CMD, 1, #TextboxText) then
                CMDCategory:CreateButton({
                    Text = CMD,
                    LayoutOrder = i,
                    Function = function()
                        CMDBar.Textbox.Text = CMD
                        CMDBar.Textbox:CaptureFocus()
                    end,
                })
            end
            i += 1
        end
        for Alias in pairs(Aliases) do
            local Alias = string.lower(Alias)
            if TextboxText == string.sub(Alias, 1, #TextboxText) then
                CMDCategory:CreateButton({
                    Text = Alias,
                    LayoutOrder = i,
                    Function = function()
                        CMDBar.Textbox.Text = Alias
                        CMDBar.Textbox:CaptureFocus()
                        CMDCategory.ContentFrame.CanvasPosition = Vector2.new(0, 0)
                    end,
                })
            end
            i += 1
        end
    end
	CMDBar.Textbox:GetPropertyChangedSignal("Text"):Connect(function()
		local String = string.gsub(CMDBar.Textbox.Text, "	", "")
		CMDBar.Textbox.Text = String
		for i, v in CMDCategory.ContentFrame:GetChildren() do
            if v:IsA("UIListLayout") then continue end
            if v == CMDBar.MainFrame then continue end
            if string.find(string.lower(v.Button.Text), string.lower(String)) then
                v.Visible = true
            else
                v.Visible = false
            end
        end
	end)

    local SoundID = 5409360995
	CreateMainFiles()
	if ListFiles and GetCustomAsset then
		local StartUpSounds = ListFiles("TidalWave/StartUpSounds")
        if #StartUpSounds > 0 then
            SoundID = GetCustomAsset(StartUpSounds[math.random(1, #StartUpSounds)])
        end
	end
	Notify({
		Text = "Loaded <b><font color = 'rgb(255, 215, 0)'>Tidal</font> <font color = 'rgb(20, 135, 255)'>Wave</font></b> v" .. CurrentVersion .. " In " .. tostring(SubstituteNumber(tick() - TidalWaveLoadStartTime), 3) .. " Seconds\n(Press " .. MenuKeybind .. " To Toggle Gui)",
		Duration = 6.9,
		SoundID = SoundID,
		SoundDuration = 6.9,
		Volume = 0.5,
	})
	
	if ReadFile then
		local Json = HttpService:JSONDecode(ReadFile("TidalWave/GlobalSettings.json"))
		if Json.KeepTidalWave == true and not KeepTidalWave then
			ToggleKeepTidalWave:Toggle({NoNotify = true})
        elseif Json.KeepTidalWave == false and KeepTidalWave then
            ToggleKeepTidalWave:Toggle({NoNotify = true})
		end
		if not IsFile then return end
		if Json.ProfileToAutoLoad ~= nil and IsFile(Json.ProfileToAutoLoad) then
			ProfileToAutoLoad = Json.ProfileToAutoLoad
			UpdateGlobalFiles()
			local String = string.gsub(string.split(ProfileToAutoLoad, "\\")[3], ".json", "")
			LoadProfileFunction(HttpService:JSONDecode(ReadFile(ProfileToAutoLoad)), String)
		end
	end

    TidalWaveLoadStartTime = nil
end
